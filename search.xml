<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>manjaro安装和配置</title>
      <link href="2021/01/14/manjaro-an-zhuang-he-pei-zhi/"/>
      <url>2021/01/14/manjaro-an-zhuang-he-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="manjaro安装和基础配置"><a href="#manjaro安装和基础配置" class="headerlink" title="manjaro安装和基础配置"></a>manjaro安装和基础配置</h1><blockquote><p>持续更新</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h3><ul><li><p>u盘，不小于4g</p></li><li><p>iso镜像 👉 <a href="https://mirrors.tuna.tsinghua.edu.cn/osdn/storage/g/m/ma/manjaro/">清华大学开源镜像站</a>，选择对应版本（我是kde）</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20210104133934602.png" alt="image-20210104133934602"></p></li><li><p><a href="http://rufus.ie/">Rufus</a>，光盘刻录工具(windows)</p></li><li><p>etcher (linux)</p></li></ul><h3 id="制作启动盘"><a href="#制作启动盘" class="headerlink" title="制作启动盘"></a>制作启动盘</h3><p>进入Rufus，选择刚刚下好的.iso文件，其他基本是默认，点击确定，会提示是否清空，确定即可开始烧写。这个过程比较长，等进度条跑完了提示完成就退出即可。（一定要小心，别再点一次，会出问题）</p><h3 id="利用U盘启动"><a href="#利用U盘启动" class="headerlink" title="利用U盘启动"></a>利用U盘启动</h3><p>我的电脑是戴尔的，插入u盘，关机后按F12，即可进入BIOS，选择U盘启动。</p><p><strong>问题</strong></p><ul><li>有的人找不到U盘启动选项，去bios设置U盘的优先级UEFI启动，具体根据机型百度即可</li><li>有的人使用u盘启动进不去，要在bios中关闭 security boot</li></ul><h3 id="进入pre-install界面"><a href="#进入pre-install界面" class="headerlink" title="进入pre-install界面"></a>进入pre-install界面</h3><p>首先是这个界面（<strong>图是我偷的</strong>，原文链接<a href="https://linuxacme.icu/?p=99">在这</a>），<code>lang</code>可以配置中文，也可以进入里面的界面再设置，driver设置驱动，如果是n卡选择nofree，会自动给一个显卡驱动的配置方式，也可以安装完成后再配置。然后进入系统安装</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20210104135559089.png" alt="image-20210104135559089"></p><h3 id="真正的安装"><a href="#真正的安装" class="headerlink" title="真正的安装"></a>真正的安装</h3><p>点击桌面的install Manjaro进入可视化安装界面（<strong>安装一定断网，否则最后会卡在93%！！！！！！！！！！！！！！！！</strong>）</p><p>这时候就会在欢迎页面卡一小会儿，提示你未连接网络，我们不管他，继续安装。</p><p>设置好时区为shanghai，键盘习惯等等，进入<strong>分区页面</strong>。</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20210104140332046.png"></p><blockquote><p>我这里是直接取代win10了，有的童鞋可能会装双系统，可以查看网上的教程</p><p>配置：</p><ul><li>戴尔G3老版<ul><li>cpu i5-8300H</li><li>显卡 gtx1050ti</li><li>内存 8+8</li><li>硬盘 128固态+1T机械</li></ul></li></ul></blockquote><p>在这个界面直接点删除，就能把原来的Windows分区删除了。这里给两个分区方案</p><p><strong>纯固态</strong></p><p>256G的可以这么分：</p><table><thead><tr><th align="center">挂载点</th><th align="center">文件系统</th><th align="center">大小</th><th align="center">标记</th></tr></thead><tbody><tr><td align="center">/boot/efi</td><td align="center">FAT32</td><td align="center">300M足够了</td><td align="center">/boot（新版的只需勾选这个，旧版的可能还有esp）</td></tr><tr><td align="center">/opt</td><td align="center">ext4</td><td align="center">30G（这个区域可以不分，直接归根目录中）</td><td align="center">无</td></tr><tr><td align="center">/</td><td align="center">ext4</td><td align="center">30G</td><td align="center">无</td></tr><tr><td align="center">/swap</td><td align="center">linuxswap</td><td align="center">跟你的内存有关如果是8g内存这里就是8g，如果是16g就是16g</td><td align="center">无</td></tr><tr><td align="center">无</td><td align="center">无</td><td align="center">8G（空8个G作为补充？？）</td><td align="center">无</td></tr><tr><td align="center">/home</td><td align="center">ext4</td><td align="center">剩下的全部</td><td align="center">无</td></tr></tbody></table><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20210104140717701.png" alt="图是我偷的"></p><p>512G的看着弄就行了，嫌麻烦可以不用单独分出opt和usr等区，直接放根目录中就行</p><p><strong>固态+机械</strong></p><p>manjaro的这里可以切换硬盘</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20210104141738254.png" alt="image-20210104141738254"></p><p>分区策略是：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">SSD硬盘：&#x2F;boot&#x2F;efi 300Mswaplinux 8G（根据你的内存定）空一些空间出来，跟上边的图一样&#x2F;    剩下的全部HHD硬盘：&#x2F;home   自己看着设吧，推荐100G以上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，，，，，</p><p>点击下一步，输入一些信息，选择no office 因为我们要用wps，，一直到最后点击安装即可。</p><p><strong>再次提醒，安装一定要断网，否则会卡在93%，卡一天</strong></p><hr><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p><strong>这里先提供一些基本的指令用来理解</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 安装xxxpacman -S  xxx   # 删除XXXXX（保留依赖的包）pacman -R XXXXX# 删除XXXXX以及其依赖的包pacman -Rs XXXXX#  安装自己下载的XXXXX包或者转换过的debpacman -U XXXXX# 清理未安装的包文件pacman -Sc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细的指令可以查看<a href="https://www.cnblogs.com/msvc/p/11298188.html">这里</a></p><hr><h3 id="配置源"><a href="#配置源" class="headerlink" title="配置源"></a>配置源</h3><h4 id="pacman"><a href="#pacman" class="headerlink" title="pacman"></a>pacman</h4><blockquote><p>pacman是manjaro的库管理软件，国外源太慢且不稳定，所以要切换为国内源</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo pacman-mirrors -i -c China -m rank<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是对国内镜像源测速并排序，在弹出的窗口中选择一个或多个，多个的情况是如果第一个连接超时就会去访问第二个</p><h4 id="添加AUR的源"><a href="#添加AUR的源" class="headerlink" title="添加AUR的源"></a>添加AUR的源</h4><p>Manjaro是archLinux的衍生系，可以使用Arch丰富的AUR库，官网是<a href="https://aur.archlinux.org/">这个</a></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo vim &#x2F;etc&#x2F;pacman.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果提示vim不存在，我们先下载vim</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo pacman -Sy vim# 这里的 -S表示下载，y表示更新源，保证你下载的是最新的，其实 -S也可以下载<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再次输入上面的指令，打开pacman.conf后，在末尾添加如下内容</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[archlinuxcn]SigLevel &#x3D; Optional TrustedOnlyServer &#x3D; https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;archlinuxcn&#x2F;$arch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>安装密钥</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo pacman -S archlinuxcn-keyring antergos-keyring<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更新软件列表</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo pacman -Syu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h4 id="下载并配置yay"><a href="#下载并配置yay" class="headerlink" title="下载并配置yay"></a>下载并配置yay</h4><blockquote><p> yay是优秀的AUR包管理工具，可以用来代替pacman，而且yay的语法跟pacman一模一样</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo pacman -Sy yay<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置镜像 (推荐清华镜像<a href="https://mirrors.tuna.tsinghua.edu.cn/help/AUR/">网站</a>)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yay --aururl &quot;https:&#x2F;&#x2F;aur.tuna.tsinghua.edu.cn&quot; --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改的配置文件位于 <code>~/.config/yay/config.json</code> ，还可通过以下命令查看修改过的配置：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yay -P -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="常用软件安装"><a href="#常用软件安装" class="headerlink" title="常用软件安装"></a>常用软件安装</h3><h4 id="输入法安装"><a href="#输入法安装" class="headerlink" title="输入法安装"></a>输入法安装</h4><p>这里我们安装fcitx输入法，主要是搜狗输入法不太好用，如果是gnome桌面环境，请选择ibus</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo pacman -S fcitx-im fcitx-configtool pacaur yay fcitx-libpinyin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改配置文件使fcitx输入法生效</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo sed -i &#39;$a\export GTK_IM_MODULE&#x3D;fcitx\nexport QT_IM_MODULE&#x3D;fcitx\nexport XMODIFIERS&#x3D;&quot;@im&#x3D;fcitx&quot;&#39;  &#x2F;etc&#x2F;environment<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用<code>cat /etc/environment</code>查看</p><p>然后请注销或者重启，就能生效了。</p><p>ctrl+space可以切换输入法</p><p>如果配置输入法请输入这个指令，或者去桌面找小图标右击它</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">fcitx-config-gtk3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="tim"><a href="#tim" class="headerlink" title="tim"></a>tim</h4><p>在archLinux官网搜qq，现在tim叫qq.tim.spark，是基于wine5的</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20210104145444472.png" alt="image-20210104145444472"></p><p>下载输入：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yay -Sy com.qq.tim.spark<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一直回车就行了，，耐心等待安装完成即可</p><p><strong>微信，qq同理</strong></p><hr><h4 id="网易云"><a href="#网易云" class="headerlink" title="网易云"></a>网易云</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yay -Sy netease-cloud-music  ###具体是不是这个命令我忘了，，去官网可以查看<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>解决网易云搜索不能用中文的问题</strong></p><p>????</p><h4 id="typora"><a href="#typora" class="headerlink" title="typora"></a>typora</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yay -Sy typora<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="xdm"><a href="#xdm" class="headerlink" title="xdm"></a>xdm</h4><blockquote><p>xdm是类似于idm的多线程下载器，可以用更快的速度下载软件~</p><p><a href="https://subhra74.github.io/xdm/">官网在此</a></p></blockquote><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20210104152100305.png" alt="image-20210104152100305"></p><p>点击下载即可，是tar.gz格式的</p><p>下载完成后解压缩并安装</p><h4 id="flameshot"><a href="#flameshot" class="headerlink" title="flameshot"></a>flameshot</h4><blockquote><p>Linux下好用的截图软件 falmeshot，跟Windows下的 Snipaste 有过而无不及</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo pacman -Sy flameshot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>flameshot又叫火焰截图，我们下载好以后，启动应用，左下角就会出现图标</p><p><strong>设置快捷键</strong></p><p>系统设置==》快捷键==》自定义快捷键==》编辑==》新建==》全局快捷键==》命令/URL</p><p>设置动作为 <code>flameshot gui</code></p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/img/image-20210109232237012.png" alt="image-20210109225955035"></p><p>设置触发器（快捷建），保存即可</p><hr><h4 id="wps"><a href="#wps" class="headerlink" title="wps"></a>wps</h4><p>archlinux上的wps下载下来的是英文的，所以我直接去官网下载的wps for linux —-&gt; <a href="https://www.wps.cn/product/wpslinux">官网</a></p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20210104152220686.png" alt="image-20210104152220686"></p><p>这时候我们用xdm下载速度会快一点~</p><p>我们这时候下载的是deb包，在archlinux中需要进行转换，我们需要<code>debtap</code>来帮助我们</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yay -Sy debtap## 更换中国源#替换：http:&#x2F;&#x2F;ftp.debian.org&#x2F;debian&#x2F;distshttps:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;debian&#x2F;dists#替换：http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;ubuntu&#x2F;distshttps:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;ubuntu&#x2F;dists&#x2F;#执行升级sudo debtap -u#升级完成后使用该指令安装，安装时会提示输入包名，以及license。包名随意，license填GPL 上述操作完成后会在deb包同级目录生成xxx.tar.xz文件sudo debtap xxx.deb# 安装完成后，执行sudo pacman -U xxx.tar.xz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ss"><a href="#ss" class="headerlink" title="ss"></a>ss</h4><p>manjaro官方有一个shadowsocks-qt5，下载以后填写相应的配置，即可使用。不过是默认对1080端口开放代理权限。</p><p>如果是在终端中上网</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yay -S proxychains-ngsudo vim &#x2F;etc&#x2F;proxychains.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>文件末尾修改为，或者添加为：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">socks5 127.0.0.1 1080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，大多数的终端软件就可以上网了，例如：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">proxychains curl www.google.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/img/image-20210109230138403.png"></p><p><strong>配置全局代理</strong></p><p>特别简单：</p><ol><li>安装polipo</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo pacman -Sy polipo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>设置</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo cp &#x2F;etc&#x2F;polipo&#x2F;config.sample &#x2F;etc&#x2F;polipo&#x2F;configsudo vim &#x2F;etc&#x2F;polipo&#x2F;config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>修改</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">proxyAddress &#x3D; &quot;0.0.0.0&quot;allowedClients &#x3D; 127.0.0.1socksParentProxy &#x3D; &quot;127.0.0.1:1080&quot;socksProxyType &#x3D; socks5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>重启服务，这时候就会在8123端口开一个代理</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo systemctl restart polipo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>编辑 <code>~/.bashrc</code>或者<code>~/.zshrc</code>，设置全局代理变量，重启窗口</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">alias proxyon&#x3D;&#39;export http_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:8123 https_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:8123&#39;alias proxyoff&#x3D;&#39;unset http_proxy https_proxy&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>终端输入proxyon 就开启了，输入proxyoff 就关闭了</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/img/image-20210109231914693.png"></p><ol start="6"><li>设置开机自启动</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo systemctl enable polipo.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h4><p>安装zsh，现在最新版本的manjaro已经自带zsh了</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yay -Sy zsh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我喜欢用zsh，因为它功能更强大，所以我设置zsh为默认终端shell</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cat &#x2F;etc&#x2F;shells # 查看终端有多少种shellchsh -s &#x2F;bin&#x2F;zsh # 设置zsh为默认  重启生效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>安装oh-my-zsh</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 需要一点手段，才能下载（科学上网）sh -c &quot;$(proxychains curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;master&#x2F;tools&#x2F;install.sh)&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> xxxxx安装主题</p><p>参考别的博客</p><h4 id="filezilla-强大的FTP工具"><a href="#filezilla-强大的FTP工具" class="headerlink" title="filezilla 强大的FTP工具"></a>filezilla 强大的FTP工具</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yay -Sy filezilla<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="obs"><a href="#obs" class="headerlink" title="obs"></a>obs</h4><blockquote><p>直播，录屏软件</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo pacman -Sy obs-studio<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="freerdp"><a href="#freerdp" class="headerlink" title="freerdp"></a>freerdp</h3><blockquote><p>linux连接windows服务器的一款好用的软件</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yay -Sy freerdp#安装完成以后，在本地创建一个目录cd ~mkdir shared<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后输入这条指令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">xfreerdp &#x2F;f &#x2F;v:服务器ip &#x2F;u:服务器用户名 &#x2F;p:服务器密码 &#x2F;workarea &#x2F;sound &#x2F;drive:shared,&#x2F;home&#x2F;你的用户&#x2F;shared<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="开发软件安装"><a href="#开发软件安装" class="headerlink" title="开发软件安装"></a>开发软件安装</h2><h3 id="git配置代理"><a href="#git配置代理" class="headerlink" title="git配置代理"></a>git配置代理</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config --global https.proxy socks5:127.0.0.1:1080git config --global http.proxy socks5:127.0.0.1:1080vim ~&#x2F;.gitconfig可以看见<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="jdk"><a href="#jdk" class="headerlink" title="jdk"></a>jdk</h3><blockquote><p>其他版本的参考即可，详情查找aur库</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yay -Sy jdk8-openjdk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yay -Sy maven<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>剩下的操作就跟windows下的一样了</p><h3 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yay -Sy nodejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>安装npm</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yay -Sy npm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>安装yarn</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install yarn -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置npm和yarn源</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org --globalnpm config set disturl https:&#x2F;&#x2F;npm.taobao.org&#x2F;dist --globalyarn config set registry https:&#x2F;&#x2F;registry.npm.taobao.org --globalyarn config set disturl https:&#x2F;&#x2F;npm.taobao.org&#x2F;dist --global<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>redis 作为缓存，在开发中很常见</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yay -Sy redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="redis-desktop-manager"><a href="#redis-desktop-manager" class="headerlink" title="redis-desktop-manager"></a>redis-desktop-manager</h3><p>linux下的一款redis可视化管理工具</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yay -Sy redis-desktop-manager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><p>mysql 在官方包中有</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo pacman -Sy mysql     Y4&gt;%hyP?%AGs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>初始化mysql</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo mysqld --initialize --user&#x3D;mysql --basedir&#x3D;&#x2F;usr --datadir&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>可能会报错</p><p>mysqld: error while loading shared libraries: <strong>libicuuc.so.68</strong>: cannot open shared object file: No such file or directory</p></blockquote><p>这里要感谢博主提供的思路：<a href="https://www.jianshu.com/p/a7f1f2f5c1c5">https://www.jianshu.com/p/a7f1f2f5c1c5</a></p><p><strong>解决思路</strong>：</p><p>去<a href="http://site.icu-project.org/home">官网</a>下载libicuuc.so.68的包，执行</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd source .&#x2F;configure --prefix&#x3D;&#x2F;usr          make<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译完成之后，进入<code>source/lib</code>目录中</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cp libicuuc.so.68*  &#x2F;usr&#x2F;libcp libicui18n.so.68* &#x2F;usr&#x2F;libcp libicudata.so.68* &#x2F;usr&#x2F;lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：只需要拷贝前缀是这几个的就行了，如果版本不一样，修改数字就行比如说： <code>**cp libicuuc.so.64* /usr/lib</code></p><p>全部做完之后，再次执行初始化操作，</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/img/20210113115255.png"></p><p><strong>开启mysql服务</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo systemctl start mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>访问并修改密码</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql -u root -palter user &#39;root&#39;@&#39;localhost&#39; identified with mysql_native_password by &#39;密码&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><p><strong>mysql 关闭大小写敏感</strong></p><ol><li>停止MySQL</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo systemctl stop mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>删除 MySQL的数据（如果以前有数据记得先备份）</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo rm -rf &#x2F;var&#x2F;lib&#x2F;mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>修改 配置文件</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo vim &#x2F;etc&#x2F;mysql&#x2F;my.cnf最后面添加 lower_case_table_names &#x3D; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li>重新初始化密码和数据库（确保/var/lib/mysql不存在）</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo mysqld --initialize --user&#x3D;mysql --basedir&#x3D;&#x2F;usr --datadir&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>启动服务</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo systemctl start mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h3><p>yay下载，不能自主更新，官网下载，能自主更新，但是要自己创建快捷方式</p><p>这里讲一下官网下载和安装的方法：</p><p>去idea官网，下载idea for linux，是tar.gz格式的，解压就能用</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/img/20210113122751.png"></p><p>解压之后，在/bin/目录中，有个<code>idea.sh</code>，是启动文件，idea.png是图片，</p><p><strong>这种方式不会自动创建快捷方式，所以我们要自己创建</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd &#x2F;usr&#x2F;share&#x2F;applications   #这里面全是快捷方式# 我们随便复制一个快捷方式，作为给idea的，因为这些快捷方式格式都一样，所以哪一个都行sudo cp xdman.desktop idea.desktop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/img/20210113123408.png"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo vim idea.desktop #编辑这个快捷方式#格式如下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/img/20210113123834.png"></p><p>修改完保存即可。</p><p>现在我们就可以在alt+space中看到快捷方式了！！！</p><h3 id="Webstorm"><a href="#Webstorm" class="headerlink" title="Webstorm"></a>Webstorm</h3><p>步骤同IDEA</p><h3 id="navicat"><a href="#navicat" class="headerlink" title="navicat"></a>navicat</h3><p>安装破解参考：<a href="https://rlds.tk/">https://rlds.tk/</a></p><h2 id="N卡驱动"><a href="#N卡驱动" class="headerlink" title="N卡驱动"></a>N卡驱动</h2><p>参考：<a href="https://blog.csdn.net/u011250429/article/details/84857676#t3">https://blog.csdn.net/u011250429/article/details/84857676#t3</a></p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><p>待补充。。。</p>]]></content>
      
      
      <categories>
          
          <category> manjaro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> manjaro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ消息队列</title>
      <link href="2020/11/26/rabbitmq-xiao-xi-dui-lie/"/>
      <url>2020/11/26/rabbitmq-xiao-xi-dui-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="RabbitMQ-实战教程"><a href="#RabbitMQ-实战教程" class="headerlink" title="RabbitMQ 实战教程"></a>RabbitMQ 实战教程</h1><h2 id="不同MQ的特点"><a href="#不同MQ的特点" class="headerlink" title="不同MQ的特点"></a>不同MQ的特点</h2><blockquote><p><strong>ActiveMQ</strong></p><p>API丰富，但是性能要差，吞吐量低，在中小型企业中受欢迎</p><p><strong>Kafka</strong></p><p>高吞吐，在<strong>大数据领域</strong>做日志传输，对事务的优化不是很好，可能会丢失一些数据、</p><p><strong>RocketMQ</strong></p><p>安全，可靠，事务性有了优化，但是开源版对分布式事务没有开源，，开源的功能少</p><p><strong>RabbitMQ</strong></p><p>在Spring框架中无缝整合，安全可靠，对数据的一致性有很高的要求，性能和吞吐量在其次</p></blockquote><h2 id="RabbitMQ-引言"><a href="#RabbitMQ-引言" class="headerlink" title="RabbitMQ 引言"></a>RabbitMQ 引言</h2><p>详情可看-&gt;<a href="https://www.rabbitmq.com/">官网</a></p><blockquote><p>基于AMQP协议，erlang语言开发，是部署最广泛的开源消息中间件，与spring框架可以无缝整合，不会丢失任何数据</p></blockquote><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201217103155143.png" alt="image-20201217103155143"></p><p>rabbitMQ会把消息先发送给exchange交换机，而之前我学的activemq是直接发送给队列的</p><h2 id="服务安装和启动"><a href="#服务安装和启动" class="headerlink" title="服务安装和启动"></a>服务安装和启动</h2><p>manjaro系统安装：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 使用 pacmansudo pacman -S rabbitmq rabbitmqadmin# 使用 yarourtyay -S rabbitmq rabbitmqadmin#############启动# 开启管理模块sudo rabbitmq-plugins enable rabbitmq_management# 启动sudo rabbitmq-serversudo systemctl status rabbitmq # 查看mq状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>docker 安装：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 安装docker pull rabbitmq:3.7-management# 启动docker run -d --hostname localhost --name myrabbit -p 15672:15672 -p 5672:5672 rabbitmq:3.6.15-management<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="web管理界面"><a href="#web管理界面" class="headerlink" title="web管理界面"></a>web管理界面</h3><p>登录 ip:15672 用户名密码是guest</p><p>登录成功页面：</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201217143331220.png" alt="image-20201217143331220"></p><h2 id="管理界面"><a href="#管理界面" class="headerlink" title="管理界面"></a>管理界面</h2><p>交换机：</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201217144506358.png" alt="image-20201217144506358"></p><p>监听端口:</p><table><thead><tr><th align="left">Protocol</th><th align="left">Bound to</th><th align="left">Port</th></tr></thead><tbody><tr><td align="left">amqp（我们java操作的端口）</td><td align="left">0.0.0.0</td><td align="left">5672</td></tr><tr><td align="left">clustering（集群通讯端口）</td><td align="left">::</td><td align="left">25672</td></tr><tr><td align="left">http（web管理页面）</td><td align="left">::</td><td align="left">15672</td></tr></tbody></table><h2 id="HelloWorld模型"><a href="#HelloWorld模型" class="headerlink" title="HelloWorld模型"></a>HelloWorld模型</h2><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201217150041005.png" alt="image-20201217150041005"></p><p><img src="https://www.rabbitmq.com/img/tutorials/python-one.png" alt="最基本的"></p><h3 id="封装工具类"><a href="#封装工具类" class="headerlink" title="封装工具类"></a>封装工具类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">helloworld</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Channel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">ConnectionFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeoutException</span><span class="token punctuation">;</span><span class="token comment">/** * TODO: * * @author Zhang Hao yu * @date 2020/12/17 16:13 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQUtil</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ConnectionFactory</span> connectionFactory<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置连接主机</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"192.168.217.128"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置端口号</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置虚拟主机</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置用户名密码</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">TimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closeAll</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token class-name">Connection</span> connection<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">TimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种基本模式的生产者消费者与其他mq的模式相同</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取连接对象</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">RabbitMQUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 通过连接获取通道对象</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 通道绑定对应的消息队列</span>        <span class="token comment">/*         * 参数1：队列名称         * 参数2：是否持久化  把队列进行持久化         * 参数3：是否独占队列  只有当前连接能用         * 参数4：是否在消费者消费完成后自动删除队列  这一点要注意的是！消费者要完全断开连接才可以删除掉         * 参数5：额外参数         */</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        参数1：交换机名称        参数2：队列名称        参数3：传递消息的额外设置   MessageProperties.PERSISTENT_TEXT_PLAIN 把消息进行持久化        参数4：消息的具体内容         */</span>        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">.</span>PERSISTENT_TEXT_PLAIN<span class="token punctuation">,</span><span class="token string">"hello rabbit"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">RabbitMQUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*参数1：队列名称参数2：开启消息自动确认机制参数3：消费时的回调接口 */</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">/**     * TODO:     *     *     * @author ZhangHaoyu     * @param consumerTag     * @param envelope     * @param properties     * @param body 消息队列中取出的消息     * @return void     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="工作模型work-queue"><a href="#工作模型work-queue" class="headerlink" title="工作模型work queue"></a>工作模型work queue</h2><p><img src="https://www.rabbitmq.com/img/tutorials/python-two.png" alt="工作模型，允许有多个消费者"></p><blockquote><p>工作模型，允许多个消费者，每个消费者都处理不同的消息，以此来提高执行的效率</p></blockquote><p> 生产者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">RabbitMQUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 生产消息</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"work"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">" hello work queue"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">RabbitMQUtil</span><span class="token punctuation">.</span><span class="token function">closeAll</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>消费者（两个，这里只显示一个）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">RabbitMQUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者1   "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201217164431498.png" alt="image-20201217164431498"></p><p>默认消费者的消费方式是<strong>轮询</strong>，平均分配</p><p><strong>这种模式很容易因为某一个消费者消费的慢，所以导致消息堆积</strong>！！！！！！</p><hr><p>消息确认机制：</p><p>rabbit官方推荐我们消息确认为手动确认，开启方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">RabbitMQUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 每一次只能消费一个消息</span>        channel<span class="token punctuation">.</span><span class="token function">basicQos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者1   "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 参数1：确认队列中消息的标志，参数2：是否多个</span>                channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>channel设置qos，设置为一次消费n个消息</p><p>hannel.basicAck(envelope.getDeliveryTag(),false)</p><p>第一个参数是为了确定队列中的消息的标志</p><p>第二个参数是 是否开启多个</p><p>== 在业务繁重的情况下，可能某一个消费者处理能力强，另一个消费者处理能力弱，我们提倡能者多劳，当我们开启手动消息确认后，不仅可以加快业务处理的能力，还可以有效的保证一个消费者在处理业务的时候宕机，不会带来更大的损失。</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201217170523829.png" alt="image-20201217170523829"></p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201217170533715.png" alt="image-20201217170533715"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql基础补充与高级</title>
      <link href="2020/11/23/mysql-ji-chu-bu-chong-yu-gao-ji/"/>
      <url>2020/11/23/mysql-ji-chu-bu-chong-yu-gao-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><h2 id="mysql基础补充"><a href="#mysql基础补充" class="headerlink" title="mysql基础补充"></a>mysql基础补充</h2><h3 id="mysql中的-号"><a href="#mysql中的-号" class="headerlink" title="mysql中的+号"></a>mysql中的+号</h3><blockquote><p>仅仅有一个运算符功能</p></blockquote><p>select 100+90； 两个操作数都为数值型，做加法运算</p><p>select ‘123’+90；其中一方为字符型，试图<strong>将字符型数值转换成数值型</strong>，如果转换成功，则继续做加法运算，如果转换失败，则<strong>将字符型数值转换为0</strong></p><p>select null+90；只要其中一方为null，则结果必为null</p><h3 id="concat函数"><a href="#concat函数" class="headerlink" title="concat函数"></a>concat函数</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 可以拼接多个SELECT CONCAT(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;) ....   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="安全等于"><a href="#安全等于" class="headerlink" title="安全等于"></a>安全等于</h3><p><code>&lt;=&gt;</code>安全等于，不仅可以判断null值，也能判断普通的值</p><ul><li>可读性差</li></ul><h3 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h3><h4 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h4><blockquote><p>lpad 用指定字符实现左填充指定长度</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> lpad<span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>rpad 用指定字符实现右填充指定长度</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> rpad<span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h4 id="数字函数"><a href="#数字函数" class="headerlink" title="数字函数"></a>数字函数</h4><blockquote><p>round 四舍五入</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.55</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.555554</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>ceil 向上取整，返回&gt;=该参数的最小整数</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> ceil<span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>floor 向下取整</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> floor<span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>truncate</strong> 截断</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">truncate</span> <span class="token punctuation">(</span><span class="token number">1.688888888</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>mod 取余</p></blockquote><hr><h4 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h4><p><code>now()</code>返回当前系统 时间+日期</p><hr><p><code>str_to_date</code>将日期格式的字符转换成指定格式的日期</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">STR_TO_DATE<span class="token punctuation">(</span><span class="token string">'9-13-1999'</span><span class="token punctuation">,</span><span class="token string">'%m-%d-%Y'</span><span class="token punctuation">)</span>  <span class="token number">1999</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">13</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p><code>date_format</code>将日期转换成字符</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">DATE_FORMAT<span class="token punctuation">(</span><span class="token string">'2020/1/1'</span><span class="token punctuation">,</span><span class="token string">'%Y年%m月%d日'</span><span class="token punctuation">)</span>     <span class="token number">2020</span>年<span class="token number">01</span>月<span class="token number">01</span>日<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h4 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h4><ul><li><p>if( 10&gt;5 ,’大’,’小’)</p></li><li><p>case  </p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201123183709225.png" alt="image-20201123183709225"></p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201123183949234.png" alt="image-20201123183949234"></p></li></ul><h4 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h4><blockquote><p>统计函数，聚合函数，组函数，用于统计</p></blockquote><ul><li><p>sum</p></li><li><p>avg</p></li><li><p>max</p></li><li><p>min</p></li><li><p>count</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201123185833144.png" alt="image-20201123185833144"></p></li></ul><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201123202044853.png" alt="image-20201123202044853"></p><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><ul><li>limit (page-1)*size,size<ul><li>page 当前页</li><li>size要显示的条目个数</li></ul></li></ul><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><blockquote><p>视图保存的是sql逻辑，不是实际的数据！！！</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create view  v1 as xxxxxxxxxxxxxxxxxxxselect * from  v1# 修改视图create or replace view v1 xxxxxx# 或alter view v1 xxxxxxx# 删除视图drop view 视图名，视图名......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="mysql高级"><a href="#mysql高级" class="headerlink" title="mysql高级"></a>mysql高级</h2><h3 id="mysql逻辑架构介绍"><a href="#mysql逻辑架构介绍" class="headerlink" title="mysql逻辑架构介绍"></a>mysql逻辑架构介绍</h3><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201123204238277.png" alt="image-20201123204238277"></p><ul><li><p>连接层</p></li><li><p>服务层</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201124131854893.png" alt="image-20201124131854893"></p></li><li><p>引擎层</p><p>存储引擎层真正的负责了mysql中数据的存储和提取，服务器通过API与存储引擎进行通信，不同的存储引擎具有的功能不同。</p></li><li><p>存储层</p><p>数据存储主要是将数据存储在运行于裸设备的文件系统之上，完成与存储引擎的交互</p></li></ul><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><h4 id="MyISAM和InnoDB"><a href="#MyISAM和InnoDB" class="headerlink" title="MyISAM和InnoDB"></a>MyISAM和InnoDB</h4><table><thead><tr><th align="center">对比项</th><th align="center">MyISAM</th><th align="center">InnoDB</th></tr></thead><tbody><tr><td align="center">主外键</td><td align="center">不支持</td><td align="center">支持</td></tr><tr><td align="center">事务</td><td align="center">不支持</td><td align="center">支持</td></tr><tr><td align="center">行锁表</td><td align="center"><strong>表锁</strong>，即使操作一条记录也会锁住整个表，不适合高并发的操作</td><td align="center"><strong>行锁</strong>，操作时只锁某一行，不对其他行有影响，<strong>适合高并发场景</strong></td></tr><tr><td align="center">缓存</td><td align="center">只缓存索引，不缓存真实的数据</td><td align="center">不仅缓存索引还要缓存真实数据，对内存要求比较高，而且内存大小对性能有决定性影响</td></tr><tr><td align="center">表空间</td><td align="center">小</td><td align="center">大</td></tr><tr><td align="center">关注点</td><td align="center">性能</td><td align="center">事务</td></tr><tr><td align="center">默认安装</td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center">支持外键</td><td align="center">N</td><td align="center">Y</td></tr></tbody></table><p>mysql5以后默认的是InnoDB引擎</p><hr><h4 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h4><ul><li>InnoDB：<strong>对事务的完整性有较高的要求</strong>，<strong>在并发条件下要求数据的一致性</strong>，需要外键，可以用这个</li><li>MyISAM：如果应用是<strong>以读操作和插入操作为主，只有很少的更新和删除操作</strong>，并且<strong>对事务的完整性、并发性要求不是很高</strong>，那么选择这个存储引擎是非常合适的</li><li>MEMORY：将所有数据保存在RAM中，在需要快速定位记录和其他类似数据环境下，提供块访问。通常用于更新不太频繁的小表，用以快速得到访问结果</li><li>MERGE：将一系列等同的MyISAM表以逻辑方式组合在一起，并作为一个对象引用他们。</li></ul><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><blockquote><p>索引是帮助mysql <strong>高效获取数据</strong>的一种<strong>数据结构</strong>（有序）</p></blockquote><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201124134758959.png" alt="image-20201124134758959"></p><p>==&gt; 没有建立索引，查找就是遍历全表，然后匹配对应的字段是否满足条件。</p><p><strong>对表结构中的字段建立索引</strong></p><p>维护一个二叉数，第一个元素是根节点，之后每一个进来的元素都要跟一些节点进行比较，小的放走遍，大的放右边。<strong>每一个节点都要指向对应数据记录物理地址的指针</strong></p><hr><h4 id="索引的优势劣势"><a href="#索引的优势劣势" class="headerlink" title="索引的优势劣势"></a>索引的优势劣势</h4><p><strong>优势</strong></p><ul><li>提高了数据检索的效率，降低数据库IO的成本</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li></ul><p><strong>劣势</strong></p><ul><li>实际上索引也是一张表，该表中保存了主键与索引字段，并指向实体类的记录，索引索引列也是要占用空间的</li><li>虽然索引大大提高了查询效率，同时却也降低更新表的速度，如对表进行INSERT、UPDATE、DELETE。因为<strong>更新表时，MySQL不仅要保存数据，还要保存索引文件</strong>，每次更新了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息</li></ul><hr><h4 id="索引的结构"><a href="#索引的结构" class="headerlink" title="索引的结构"></a>索引的结构</h4><blockquote><p>索引是在mysql的存储引擎层中实现的，而不是在服务器层实现的，所以每种存储引擎的索引都不一定完全相同，也不是所有的存储引擎都支持所有的索引类型，目前有4中索引，分别是：</p><ul><li>Btree索引：最常见的索引，大部分索引都支持B树索引</li><li>Hash索引：只有Memory引擎支持</li><li>R-tree索引：空间索引 是MyISAM引擎中的一个特殊索引类型，主要用于地理空间数据类型</li><li>Full-text：全文索引 也是MyISAM中的一个特殊索引，主要用于全文索引</li></ul></blockquote><table><thead><tr><th align="center">索引</th><th align="center">InnoDB</th><th align="center">MyISAM</th><th align="center">Memory</th></tr></thead><tbody><tr><td align="center">BTREE</td><td align="center"><strong>Y</strong></td><td align="center"><strong>Y</strong></td><td align="center"><strong>Y</strong></td></tr><tr><td align="center">HASH</td><td align="center">N</td><td align="center">N</td><td align="center"><strong>Y</strong></td></tr><tr><td align="center">R-tree</td><td align="center">N</td><td align="center"><strong>Y</strong></td><td align="center">N</td></tr><tr><td align="center">Full-text</td><td align="center">5.6以后支持</td><td align="center">N</td><td align="center">N</td></tr></tbody></table><p>我们平常所说的索引，默认指的是B+树（多路搜索树，不一定是二叉的）结构组织的索引。其中 <strong>聚集索引、复合索引、前缀索引、唯一索引</strong>默认都是使用B+tree树索引</p><hr><h4 id="BTREE结构"><a href="#BTREE结构" class="headerlink" title="BTREE结构"></a>BTREE结构</h4><p>一个m叉的BTree特性如下：</p><ul><li>树中每个节点最多包含m个孩子</li><li>除根节点与叶子节点外，每个节点至少有【cell(m/2)】个孩子</li><li>若根节点不是叶子节点，则至少有两个孩子</li><li>所有的叶子节点都在同一层</li><li>每个非叶子节点由n个key与n+1个指针组成，其中[ceil(m/2)-1]&lt;=n&lt;=m-1</li></ul><p>演变过程：</p><p>参考👉<a href="http://yueyueniao-gif.gitee.io/yueyueniao-gif/2020/11/17/shu-ju-jie-gou/">博客</a> </p><hr><h4 id="B-TREE结构"><a href="#B-TREE结构" class="headerlink" title="B+TREE结构"></a>B+TREE结构</h4><p>与BTree的区别:</p><ul><li>n叉B+Tree最多含有n个key，而BTree最多含有n-1个key</li><li>B+Tree的叶子节点保存所有的key信息，依key大小顺序排列</li><li>所有的非叶子节点都可以看作是key的索引部分</li></ul><p><strong>mysql中的B+Tree</strong>  </p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201124164552862.png" alt="image-20201124164552862"></p><p>mysql索引数据结构对经典的B+树进行了优化，在原B+树的基础上增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的B+树，提高区间访问的性能</p><hr><h4 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h4><ul><li><strong>单值索引</strong>：一个索引只包含单个列，一个表可以由多个单列索引</li><li><strong>唯一索引</strong>：索引列的值必须唯一，但允许有空值</li><li><strong>复合索引</strong>：即一个索引包含多个列</li></ul><hr><h4 id="索引的设计原则"><a href="#索引的设计原则" class="headerlink" title="索引的设计原则"></a>索引的设计原则</h4><ul><li><p>查询频率高，数据量比较大</p></li><li><p>需要针对于where条件中的字段建立索引</p></li><li><p>使用<strong>唯一索引</strong>，区分度越高，使用索引的效率越高</p></li><li><p>对于更新等的操作，索引过多，会导致维护的时间越来越高，降低效率</p></li><li><p>使用短索引</p></li><li><p>利用最左前缀，针对于组合索引</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201124175811560.png" alt="image-20201124175811560"></p></li></ul><hr><h3 id="视图-1"><a href="#视图-1" class="headerlink" title="视图"></a>视图</h3><p>相对于普通的表：</p><ul><li><strong>简单</strong>：使用视图的用户完全不需要关心后面对应的表的结构、关联条件和筛选条件</li><li><strong>安全</strong>：限制某些用户能看到的东西</li><li><strong>数据独立</strong>：一旦视图的结构确定了，可以屏蔽表结构变化对用户的影响</li></ul><hr><h3 id="优化SQL的步骤"><a href="#优化SQL的步骤" class="headerlink" title="优化SQL的步骤"></a>优化SQL的步骤</h3><h4 id="查询sql执行频率"><a href="#查询sql执行频率" class="headerlink" title="查询sql执行频率"></a>查询sql执行频率</h4><ul><li><code>show status like &quot;Com_______&quot;; </code> 显示当前session中所有统计参数的值</li></ul><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201125132325204.png" alt="image-20201125132325204"></p><ul><li><p><code>show GLOBAL status like &quot;Com_______&quot;;</code> 显示全局的（自数据库上次启动至今）统计结果</p></li><li><p><code>show global status like &quot;Innodb_rows_%&quot;;</code> 显示使用了innodb存储引擎的相关信息，包括执行了insert的行数，select的行数等等</p></li></ul><h4 id="定位低效率的SQL"><a href="#定位低效率的SQL" class="headerlink" title="定位低效率的SQL"></a>定位低效率的SQL</h4><p>通过两种方式来定位：</p><ul><li><strong>慢查询日志</strong>：用<code>--log-slow-queries[=file_name]</code>选项启动时，mysqld写一个包含所有执行时间超过long_query_time秒的SQL语句日志文件。</li><li><strong>show processlist</strong>：慢查询日志在查询结束以后才纪录，所有在应用反映执行效率出现问题的时候查询这个日志并不能定位问题，可以通过<code>show processlist</code>命令查看当前MySQL在进行的线程，<strong>包括线程的状态、是否锁表等，可以实时地查看SQL的执行情况，同时对一些缩表操作进行优化</strong></li></ul><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201125134444647.png" alt="image-20201125134444647"></p><pre class="line-numbers language-none"><code class="language-none">id列，用户登录mysql时，系统分配的connection_id，可以使用函数connection_id()查看user列，显示当前用户。如果不是root，这个命令就只显示用户权限范围的sql语句host列，显示这个语句是从哪个ip的哪个端口上发的db列，连接的数据库command列，显示当前连接执行的命令，一般为sleep，query，connect 等time列，显示这个状态持续的时间，单位sstate列，显示使用当前连接的sql语句的状态，很重要！！！info列，显示这个sql语句，是判断问题语句的一个重要依据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="explain分析执行计划"><a href="#explain分析执行计划" class="headerlink" title="explain分析执行计划"></a>explain分析执行计划</h4><blockquote><p>通过上面步走查询到效率低的sql后，可以用过explain或者desc命令获取mysql如何执行select语句的信息，包括select语句执行过程中表如何连接和连接顺序</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">explain select * from sys_user where id &#x3D; &quot;e9ca23d68d884d4ebb19d07889727dae&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201125140528226.png" alt="image-20201125140528226"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">explain select * from sys_user where username &#x3D; &quot;admin&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201125140621333.png" alt="image-20201125140621333"></p><table><thead><tr><th align="center">字段</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">select查询的序列号，是一组数字，表示的是查询中执行select子句或者是操作表的顺序。</td></tr><tr><td align="center">select_type</td><td align="center">表示 SELECT 的类型</td></tr><tr><td align="center">table</td><td align="center">输出结果集的表</td></tr><tr><td align="center">type</td><td align="center">表示表的连接类型</td></tr><tr><td align="center">possible_keys</td><td align="center">表示查询时，可能使用的索引</td></tr><tr><td align="center">key</td><td align="center">表示实际使用的索引</td></tr><tr><td align="center">key_len</td><td align="center">索引字段的长度</td></tr><tr><td align="center">rows</td><td align="center">扫描行的数量</td></tr><tr><td align="center">extra</td><td align="center">执行情况的说明和描述</td></tr></tbody></table><p><strong>explain —— id</strong></p><blockquote><p>id 字段是 select查询的序列号，是一组数字，表示的是查询中执行select子句或者是操作表的顺序</p></blockquote><ol><li>id 相同表示加载表的顺序是从上到下。</li><li> id 不同id值越大，优先级越高，越先被执行。</li><li> id 有相同，也有不同，同时存在。<strong>id相同的可以认为是一组</strong>，从上往下顺序执行；在所有的组中，id的值越大，优先级越高，越先执行。</li></ol><p><strong>explain 之 select_type</strong></p><table><thead><tr><th>select_type</th><th>含义</th></tr></thead><tbody><tr><td>SIMPLE</td><td>简单的select查询，查询中不包含子查询或者UNION</td></tr><tr><td>PRIMARY</td><td>查询中若包含任何复杂的子查询，最外层查询标记为该标识</td></tr><tr><td>SUBQUERY</td><td>在SELECT 或 WHERE 列表中包含了子查询</td></tr><tr><td>DERIVED</td><td>在FROM 列表中包含的子查询，被标记为 DERIVED（衍生） MYSQL会递归执行这些子查 询，把结果放在临时表中</td></tr><tr><td>UNION</td><td>若第二个SELECT出现在UNION之后，则标记为UNION ； 若UNION包含在FROM子句的子 查询中，外层SELECT将被标记为 ： DERIVED</td></tr><tr><td>UNION RESULT</td><td>从UNION表获取结果的SELECT</td></tr></tbody></table><p><strong>explain 之 type</strong></p><blockquote><p>type 显示的是访问类型，是较为重要的一个指标，可取值为：</p></blockquote><table><thead><tr><th>type</th><th>含义</th></tr></thead><tbody><tr><td>NULL</td><td>MySQL不访问任何表，索引，直接返回结果</td></tr><tr><td>system</td><td>表只有一行记录(等于系统表)，这是const类型的特例，一般不会出现</td></tr><tr><td>const</td><td>表示通过索引一次就找到了，const 用于比较primary key 或者 unique 索引。因为只匹配一行数 据，所以很快。如将主键置于where列表中，MySQL 就能将该查询转换为一个常亮。const于将 “主键” 或 “唯一” 索引的所有部分与常量值进行比较</td></tr><tr><td>eq_ref</td><td>类似ref，区别在于使用的是唯一索引，使用主键的关联查询，关联查询出的记录只有一条。常见 于主键或唯一索引扫描</td></tr><tr><td>ref</td><td>非唯一性索引扫描，返回匹配某个单独值的所有行。本质上也是一种索引访问，返回所有匹配某 个单独值的所有行（多个）</td></tr><tr><td>range</td><td>只检索给定返回的行，使用一个索引来选择行。 where 之后出现 between ， &lt; , &gt; , in 等操作。</td></tr><tr><td>index</td><td>index 与 ALL的区别为 index 类型只是遍历了索引树， 通常比ALL 快， ALL 是遍历数据文件。</td></tr><tr><td>all</td><td>将遍历全表以找到匹配的行</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">结果值从最好到最坏以此是:NULL &gt; system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt;unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALLsystem &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般来说， 我们需要保证查询至少达到 <strong>range</strong> 级别， 最好达到<strong>ref</strong> 。</p><p><strong>explain 之 key</strong></p><pre class="line-numbers language-none"><code class="language-none">possible_keys : 显示可能应用在这张表的索引， 一个或多个。key ： 实际使用的索引， 如果为NULL， 则没有使用索引。key_len : 表示索引中使用的字节数， 该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下， 长度越短越好 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>explain 之 extra</strong></p><blockquote><p>其他的额外的执行计划信息，在该列展示 。</p></blockquote><table><thead><tr><th>extra</th><th>含义</th></tr></thead><tbody><tr><td>using filesort</td><td>说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取， 称为 “<strong>文件排序</strong>”, 效率低。</td></tr><tr><td>using temporary</td><td>使用了临时表保存中间结果，MySQL在对查询结果排序时使用临时表。常见于 order by 和 group by； 效率低</td></tr><tr><td>using index</td><td>表示相应的select操作使用了覆盖索引， 避免访问表的数据行， 效率不错</td></tr></tbody></table><h4 id="show-profile分析SQL"><a href="#show-profile分析SQL" class="headerlink" title="show profile分析SQL"></a>show profile分析SQL</h4><h3 id="索引的使用"><a href="#索引的使用" class="headerlink" title="索引的使用"></a>索引的使用</h3><p>准备条件:</p><blockquote><p><code>create index idx_seller_name_sta_addr on tb_seller(name,status,address);</code></p></blockquote><h4 id="避免索引失效"><a href="#避免索引失效" class="headerlink" title="避免索引失效"></a>避免索引失效</h4><ul><li><p><strong>全值匹配</strong> ，对索引中所有列都指定具体值，该情况下索引生效，执行效率高</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">explain select * from tb_seller where name&#x3D;&#39;小米科技&#39; and status&#x3D;&#39;1&#39; and address&#x3D;&#39;北京市&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201126200538720.png" alt="image-20201126200538720"></p></li><li><p><strong>最左前缀法则</strong>(指的是查询要从索引的最左前列开始，并且不跳过索引中的列)</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201126200821090.png" alt="image-20201126200821090"></p><p>违法最左前缀法则 ， 索引失效：</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201126201028628.png" alt="image-20201126201028628"></p><p>如果符合最左法则，但是出现跳跃某一列，只有最左列索引生效：</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201126201047543.png" alt="image-20201126201047543"></p></li><li><p><strong>范围查询右边的列，不能使用索引</strong> </p><blockquote><p>根据前面的两个字段name ， status 查询是走索引的， 但是最后一个条件address 没有用到索引。</p></blockquote><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201126201157253.png" alt="image-20201126201157253"></p></li><li><p><strong>不要在索引列上进行运算操作， 索引将失效</strong></p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201126201223070.png" alt="image-20201126201223070"></p></li><li><p><strong>字符串不加单引号</strong>，造成索引失效。</p><blockquote><p>由于在查询的时候没有对字符串加单引号，MySQL的查询优化器，会自动的进行类型转换，造成索引失效。</p></blockquote><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201126201250213.png" alt="image-20201126201250213"></p></li><li><p>尽量使用覆盖索引(<strong>只访问索引的查询（索引列完全包含查询列）</strong>)，避免<code>select *</code></p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201126201411070.png" alt="image-20201126201411070"></p><p>如果查询列，超出索引列，也会降低性能</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201126201437408.png" alt="image-20201126201437408"></p><pre class="line-numbers language-none"><code class="language-none">TIP :    using index ：使用覆盖索引的时候就会出现        using where：在查找使用索引的情况下，需要回表去查询所需的数据        using index condition：查找使用了索引，但是需要回表查询数据        using index ; using where：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>用or分割开的条件， 如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。</strong></p><blockquote><p>示例，name字段是索引列 ， 而createtime不是索引列，中间是or进行连接是不走索引的 ：</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">explain select * from tb_seller where name&#x3D;&#39;黑马程序员&#39; or createtime &#x3D; &#39;2088-01-01 12:00:00&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201126202050643.png" alt="image-20201126202050643"></p></li><li><p><strong>以%开头的Like模糊查询，索引失效</strong></p><blockquote><p>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。</p></blockquote><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201126202146578.png" alt="image-20201126202146578"></p><p><strong>这种情况我们可以通过覆盖索引来解决</strong></p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201126202214001.png" alt="image-20201126202214001"></p></li><li><p>如果MySQL评估使用索引比全表更慢，则不使用索引。</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201126202345972.png" alt="image-20201126202345972"></p></li><li><p><code>is NULL</code> ， <code>is NOT NULL</code> 有时索引失效。</p><p>isNULL的时候，null多的时候会失效，少的时候走索引</p><p>isNotNULL的时候 null少的时候会失效，多的时候走索引</p></li><li><p> <code>in 走索引</code>， <code>not in</code> 索引失效。</p></li><li><p><strong>尽量使用 复合索引，少使用单列索引</strong>！</p><ul><li><p>创建复合索引就相当于创建了三个索引</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create index idx_name_sta_address on tb_seller(name, status, address);就相当于创建了三个索引 ：    name    name + status    name + status + address    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据库会选择一个最优的索引（辨识度最高索引）来使用，并不会使用全部索引 。</p></li></ul></li></ul><h4 id="查看索引使用情况"><a href="#查看索引使用情况" class="headerlink" title="查看索引使用情况"></a>查看索引使用情况</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show status like &#39;Handler_read%&#39;;show global status like &#39;Handler_read%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201127132314991.png" alt="image-20201127132314991"></p><h3 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h3><p><strong>环境准备</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE &#96;tb_user_2&#96; (&#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,&#96;username&#96; varchar(45) NOT NULL,&#96;password&#96; varchar(96) NOT NULL,&#96;name&#96; varchar(45) NOT NULL,&#96;birthday&#96; datetime DEFAULT NULL,&#96;sex&#96; char(1) DEFAULT NULL,&#96;email&#96; varchar(45) DEFAULT NULL,&#96;phone&#96; varchar(45) DEFAULT NULL,&#96;qq&#96; varchar(32) DEFAULT NULL,&#96;status&#96; varchar(32) NOT NULL COMMENT &#39;用户状态&#39;,&#96;create_time&#96; datetime NOT NULL,&#96;update_time&#96; datetime DEFAULT NULL,PRIMARY KEY (&#96;id&#96;),UNIQUE KEY &#96;unique_user_username&#96; (&#96;username&#96;)) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 ; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="优化导入数据效率"><a href="#优化导入数据效率" class="headerlink" title="优化导入数据效率"></a>优化导入数据效率</h4><blockquote><p>当使用load 命令导入数据的时候，<strong>适当的设置可以提高导入的效率</strong>。</p></blockquote><ul><li><p>主键顺序插入</p><blockquote><p>sql1.log —-&gt; 主键有序 </p><p>sql2.log —-&gt; 主键无序</p></blockquote><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201127135432056.png" alt="image-20201127135432056"></p></li><li><p>关闭唯一性校验</p><blockquote><p>在导入数据前执行 set unique_checks = 0，关闭唯一性校验，在导入结束后执行 set unique_checks = 1，恢复唯一性校验，可以提高效率</p></blockquote></li><li><p>手动提交事务</p><blockquote><p>如果应用使用自动提交的方式，建议在导入前执行set autocommit = 0，关闭自动提交，导入结束后再执行 set autocommit = 1，打开自动提交，也可以提高导入的效率</p></blockquote></li></ul><h4 id="优化insert语句"><a href="#优化insert语句" class="headerlink" title="优化insert语句"></a>优化insert语句</h4><blockquote><p>如果需要<strong>同时对一张表插入很多行数据</strong>时，应该<strong>尽量使用多个值表的insert语句</strong>，这种方式将<strong>大大的缩减客户端与数据库之间的连接、关闭等消耗</strong>。使得效率比分开执行的单个insert语句快。</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">原始的方式：    insert into tb_test values(1,&#39;Tom&#39;);    insert into tb_test values(2,&#39;Cat&#39;);    insert into tb_test values(3,&#39;Jerry&#39;);优化的方式：insert into tb_test values(1,&#39;Tom&#39;),(2,&#39;Cat&#39;)，(3,&#39;Jerry&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在事务中进行数据插入</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">start transaction;    insert into tb_test values(1,&#39;Tom&#39;);    insert into tb_test values(2,&#39;Cat&#39;);    insert into tb_test values(3,&#39;Jerry&#39;);commit;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>数据有序插入</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">优化前：    insert into tb_test values(4,&#39;Tim&#39;);    insert into tb_test values(1,&#39;Tom&#39;);    insert into tb_test values(3,&#39;Jerry&#39;);    insert into tb_test values(5,&#39;Rose&#39;);    insert into tb_test values(2,&#39;Cat&#39;);优化后：insert into tb_test values(1,&#39;Tom&#39;);insert into tb_test values(2,&#39;Cat&#39;);insert into tb_test values(3,&#39;Jerry&#39;);insert into tb_test values(4,&#39;Tim&#39;);insert into tb_test values(5,&#39;Rose&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="优化order-by语句"><a href="#优化order-by语句" class="headerlink" title="优化order by语句"></a>优化order by语句</h4><p>两种排序方式：</p><ul><li><p><strong>filesort排序</strong>，通过对返回数据进行排序，所有不是通过索引直接返回排序结果的排序都叫FileSort排序</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201128192710911.png" alt="image-20201128192710911"></p></li><li><p><strong>using index</strong>，通过有序索引–顺序扫描–直接返回有序数据，，不需要额外的排序，效率高</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201128192642322.png" alt="image-20201128192642322"></p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201128193523272.png" alt="image-20201128193523272"></p></li></ul><blockquote><p>了解了MySQL的排序方式，优化目标就清晰了：尽量<strong>减少额外的排序</strong>，<strong>通过索引直接返回有序数据</strong>。where 条件和Order by 使用相同的索引，并且<strong>Order By 的顺序和索引顺序相同</strong>， 并且Order  by 的字段都是升序，或者都是降序。否则肯定需要额外的操作，这样就会出现FileSort。</p></blockquote><hr><h5 id="filesort的优化"><a href="#filesort的优化" class="headerlink" title="filesort的优化"></a>filesort的优化</h5><blockquote><p>通过创建合适的索引，能够减少 Filesort 的出现，但是在某些情况下，条件限制不能让Filesort消失，那就需要加快 Filesort的排序操作。对于Filesort ， MySQL 有两种排序算法：</p><p>1） 两次扫描算法 ：MySQL4.1 之前，使用该方式排序。首先根据条件取出排序字段和行指针信息，然后在排序区 sort buffer 中排序，如果sort buffer不够，则在<strong>临时表</strong> temporary table 中存储排序结果。完成排序之后，再根据行指针回表读取记录，该操作可能会导致大量随机I/O操作。</p><p>2）一次扫描算法：一次性取出满足条件的所有字段，然后在排序区 sort  buffer 中排序后直接输出结果集。排序时内存开销较大，但是排序效率比两次扫描算法要高。</p></blockquote><hr><h4 id="优化group-by"><a href="#优化group-by" class="headerlink" title="优化group by"></a>优化group by</h4><blockquote><p>group by实际上也会进行排序操作，于order by 相比，group by主要知识多了排序之后的分组操作</p></blockquote><p>如果查询包含 group by 但是用户想要避免排序结果的消耗， <strong>则可以执行order by null 禁止排序</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">drop index idx_emp_age_salary on emp;explain select age,count(*) from emp group by age;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>优化后是：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">explain select age,count(*) from emp group by age order by null;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h4 id="优化嵌套查询"><a href="#优化嵌套查询" class="headerlink" title="优化嵌套查询"></a>优化嵌套查询</h4><p>有些情况下，子查询是可以被更高效的连接（JOIN）替代。</p><p>连接(Join)查询之所以更有效率一些 ，是因为MySQL不需要<strong>在内存中创建临时表</strong>来完成这个逻辑上需要两个步骤的查询工作。</p><hr><h4 id="优化or条件"><a href="#优化or条件" class="headerlink" title="优化or条件"></a>优化or条件</h4><blockquote><p>对于包含OR的查询子句，如果要利用索引，则OR之间的每个条件列都必须用到索引 ， 而且不能使用到复合索引； 如果没有索引，则应该考虑增加索引。</p></blockquote><p>建议使用 union 替换 or ：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from emp where id &#x3D; 1 or age &#x3D; 30;应该替换为：select * from emp where id &#x3D; 1 union select * from emp where  age &#x3D; 30;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="优化分页查询"><a href="#优化分页查询" class="headerlink" title="优化分页查询"></a>优化分页查询</h4><blockquote><p>一般分页查询时，通过创建覆盖索引能够比较好地提高性能。一个<strong>常见又非常头疼的问题</strong>就是 limit 2000000,10  ，此时需要MySQL排序前2000010 记录，仅仅返回2000000 - 2000010 的记录，其他记录丢弃，查询排序的代价非常大 。</p></blockquote><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201128201314111.png" alt="image-20201128201314111"></p><h5 id="优化思路1"><a href="#优化思路1" class="headerlink" title="优化思路1"></a>优化思路1</h5><blockquote><p>在索引上完成排序分页工作，最后根据主键关联回原表查询所需要的其他列内容</p></blockquote><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201128201648073.png" alt="image-20201128201648073"></p><h5 id="优化思路二"><a href="#优化思路二" class="headerlink" title="优化思路二"></a>优化思路二</h5><blockquote><p>该方案适用于<strong>主键自增</strong>的表，<strong>并且主键自增不能出现断层</strong>，可以把Limit 查询转换成某个位置的查询 。</p></blockquote><p>例如：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from table where id &gt; 200000 limit 10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h4 id="使用SQL提示"><a href="#使用SQL提示" class="headerlink" title="使用SQL提示"></a>使用SQL提示</h4><blockquote><p>SQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</p></blockquote><ul><li><p>use index</p><p>告诉mysql用哪个索引，，不是强制的，只是建议</p></li><li><p>ignore index</p></li><li><p>force index</p></li></ul><hr><h3 id="应用优化"><a href="#应用优化" class="headerlink" title="应用优化"></a>应用优化</h3><h4 id="使用数据库连接池"><a href="#使用数据库连接池" class="headerlink" title="使用数据库连接池"></a>使用数据库连接池</h4><blockquote><p>对于访问数据库来说，建立连接的代价很大，如果频繁的开启关闭连接，很耗资源，我们有必要建立数据库连接池</p></blockquote><p>c3p0</p><p>druid</p><hr><h4 id="减少对mysql的访问"><a href="#减少对mysql的访问" class="headerlink" title="减少对mysql的访问"></a>减少对mysql的访问</h4><ul><li><p>避免对数据进行重复检索</p></li><li><p>增加缓存层</p></li><li><p>负载均衡</p><ul><li>主从复制</li><li>读写分离</li><li>分布式数据库架构</li></ul></li></ul><hr><h4 id="MySQL查询缓存优化（8以废弃）"><a href="#MySQL查询缓存优化（8以废弃）" class="headerlink" title="MySQL查询缓存优化（8以废弃）"></a>MySQL查询缓存优化（8以废弃）</h4><blockquote><p>开启mysql的查询缓存，完全相同的sql语句会从缓存中读取</p></blockquote><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201128210435548.png" alt="image-20201128210435548"></p><p>详情查看网上的信息</p><hr><h4 id="mysql内存管理及优化"><a href="#mysql内存管理及优化" class="headerlink" title="mysql内存管理及优化"></a>mysql内存管理及优化</h4><h5 id="内存优化原则"><a href="#内存优化原则" class="headerlink" title="内存优化原则"></a>内存优化原则</h5><ul><li>将尽量多的内存分配给mysql做缓存，给操作系统和其他程序预留足够内存</li><li>MyISAM存储引擎的数据文件读取依赖于操作系统自身的IO缓存，因此，如果有MyISAM表，就要预留更多的内存给操作系统做IO缓存</li><li>排序区、连接区等缓存时分配给每个数据库session专用的，其默认值的设置要根据最大连接数合理分配，如果设置太大，不但浪费资源，而且在并发连接较高时会导致物理内存耗尽</li></ul><hr><h5 id="MyISAM内存优化"><a href="#MyISAM内存优化" class="headerlink" title="MyISAM内存优化"></a>MyISAM内存优化</h5><blockquote><p>myisam存储引擎使用 key_buffer缓存索引块，加速myisam索引的读写速度。对于myisam表的数据库，mysql没有特别的缓存机制，完全依赖于操作系统的IO缓存</p></blockquote><h5 id="key-buffer-size"><a href="#key-buffer-size" class="headerlink" title="key_buffer_size"></a>key_buffer_size</h5><p>key_buffer_size决定MyISAM索引块缓存区的大小，直接影响到MyISAM表的存取效率。可以在MySQL参数文件中设置key_buffer_size的值，对于一般MyISAM数据库，建议至少将1/4可用内存分配给key_buffer_size。</p><p>在/usr/my.cnf 中做如下配置：</p><pre class="line-numbers language-none"><code class="language-none">key_buffer_size&#x3D;512M<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="read-buffer-size"><a href="#read-buffer-size" class="headerlink" title="read_buffer_size"></a>read_buffer_size</h5><p>如果需要经常顺序扫描myisam表，可以通过增大read_buffer_size的值来改善性能。但需要注意的是read_buffer_size是每个session独占的，如果默认值设置太大，就会造成内存浪费。</p><h5 id="read-rnd-buffer-size"><a href="#read-rnd-buffer-size" class="headerlink" title="read_rnd_buffer_size"></a>read_rnd_buffer_size</h5><p>对于需要做排序的myisam表的查询，如带有order by子句的sql，适当增加 read_rnd_buffer_size 的值，可以改善此类的sql性能。但需要注意的是 read_rnd_buffer_size 是每个session独占的，如果默认值设置太大，就会造成内存浪费。</p><hr><h5 id="innoDB内存优化"><a href="#innoDB内存优化" class="headerlink" title="innoDB内存优化"></a>innoDB内存优化</h5><p>innodb用一块内存区做IO缓存池，该缓存池不仅用来缓存innodb的索引块，而且也用来缓存innodb的数据块。</p><h5 id="innodb-buffer-pool-size"><a href="#innodb-buffer-pool-size" class="headerlink" title="innodb_buffer_pool_size"></a>innodb_buffer_pool_size</h5><p>该变量决定了 innodb 存储引擎表数据和索引数据的最大缓存区大小。在保证操作系统及其他程序有足够内存可用的情况下，innodb_buffer_pool_size 的值越大，缓存命中率越高，访问InnoDB表需要的磁盘I/O 就越少，性能也就越高。</p><pre class="line-numbers language-none"><code class="language-none">innodb_buffer_pool_size&#x3D;512M<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="innodb-log-buffer-size"><a href="#innodb-log-buffer-size" class="headerlink" title="innodb_log_buffer_size"></a>innodb_log_buffer_size</h5><p>决定了innodb重做日志缓存的大小，对于可能产生大量更新记录的大事务，增加innodb_log_buffer_size的大小，可以避免innodb在事务提交前就执行不必要的日志写入磁盘操作。</p><pre class="line-numbers language-none"><code class="language-none">innodb_log_buffer_size&#x3D;10M<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="Mysql并发参数调整"><a href="#Mysql并发参数调整" class="headerlink" title="Mysql并发参数调整"></a>Mysql并发参数调整</h3><p>从实现上来说，MySQL Server 是多线程结构，包括后台线程和客户服务线程。多线程可以有效利用服务器资源，提高数据库的并发性能。在Mysql中，控制并发连接和线程的主要参数包括 max_connections、back_log、thread_cache_size、table_open_cahce。</p><h4 id="4-1-max-connections"><a href="#4-1-max-connections" class="headerlink" title="4.1 max_connections"></a>4.1 max_connections</h4><p>采用max_connections 控制允许连接到MySQL数据库的最大数量，默认值是 151。如果状态变量 connection_errors_max_connections 不为零，并且一直增长，则说明不断有连接请求因数据库连接数已达到允许最大值而失败，这是可以考虑增大max_connections 的值。</p><p>Mysql 最大可支持的连接数，取决于很多因素，包括给定操作系统平台的线程库的质量、内存大小、每个连接的负荷、CPU的处理速度，期望的响应时间等。在Linux 平台下，性能好的服务器，支持 500-1000 个连接不是难事，需要根据服务器性能进行评估设定。</p><h4 id="4-2-back-log"><a href="#4-2-back-log" class="headerlink" title="4.2 back_log"></a>4.2 back_log</h4><p>back_log 参数控制MySQL监听TCP端口时设置的积压请求栈大小。如果MySql的连接数达到max_connections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源，将会报错。5.6.6 版本之前默认值为 50 ， 之后的版本默认为 50 + （max_connections / 5）， 但最大不超过900。</p><p>如果需要数据库在较短的时间内处理大量连接请求， 可以考虑适当增大back_log 的值。</p><h4 id="4-3-table-open-cache"><a href="#4-3-table-open-cache" class="headerlink" title="4.3 table_open_cache"></a>4.3 table_open_cache</h4><p>该参数用来控制所有SQL语句执行线程可打开表缓存的数量， 而在执行SQL语句时，每一个SQL执行线程至少要打开 1 个表缓存。该参数的值应该根据设置的最大连接数 max_connections 以及每个连接执行关联查询中涉及的表的最大数量来设定 ：</p><p>​    max_connections x N ；</p><h4 id="4-4-thread-cache-size"><a href="#4-4-thread-cache-size" class="headerlink" title="4.4 thread_cache_size"></a>4.4 thread_cache_size</h4><p>为了加快连接数据库的速度，MySQL 会缓存一定数量的客户服务线程以备重用，通过参数 thread_cache_size 可控制 MySQL 缓存客户服务线程的数量。</p><h4 id="4-5-innodb-lock-wait-timeout"><a href="#4-5-innodb-lock-wait-timeout" class="headerlink" title="4.5 innodb_lock_wait_timeout"></a>4.5 innodb_lock_wait_timeout</h4><p>该参数是用来设置InnoDB 事务等待行锁的时间，默认值是50ms ， 可以根据需要进行动态设置。对于需要快速反馈的业务系统来说，可以将行锁的等待时间调小，以避免事务长时间挂起； 对于后台运行的批量处理程序来说， 可以将行锁的等待时间调大， 以避免发生大的回滚操作。</p><hr><h3 id="mysql锁"><a href="#mysql锁" class="headerlink" title="mysql锁"></a>mysql锁</h3><p><strong>锁分类</strong></p><p>从对数据操作的粒度分 ： </p><p>1） 表锁：操作时，会锁定整个表。</p><p>2） 行锁：操作时，会锁定当前操作行。</p><p>从对数据操作的类型分：</p><p>1） 读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响。</p><p>2） 写锁（排它锁）：当前操作没有完成之前，它会阻断其他写锁和读锁。</p><hr><p><strong>锁特性</strong></p><p>相对其他数据库而言，MySQL的锁机制比较简单，其最显著的特点是不同的存储引擎支持不同的锁机制。下表中罗列出了各存储引擎对锁的支持情况：</p><table><thead><tr><th>存储引擎</th><th>表级锁</th><th>行级锁</th><th>页面锁</th></tr></thead><tbody><tr><td>MyISAM</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>InnoDB</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>MEMORY</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>BDB</td><td>支持</td><td>不支持</td><td>支持</td></tr></tbody></table><p>MySQL这3种锁的特性可大致归纳如下 ：</p><table><thead><tr><th>锁类型</th><th>特点</th></tr></thead><tbody><tr><td>表级锁</td><td>偏向MyISAM 存储引擎，开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。</td></tr><tr><td>行级锁</td><td>偏向InnoDB 存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。</td></tr><tr><td>页面锁</td><td>开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</td></tr></tbody></table><p>从上述特点可见，很难笼统地说哪种锁更好，只能就具体应用的特点来说哪种锁更合适！仅从锁的角度来说：表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用，如Web 应用；而行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有并查询的应用，如一些在线事务处理（OLTP）系统。</p><h4 id="MyISAM表锁"><a href="#MyISAM表锁" class="headerlink" title="MyISAM表锁"></a>MyISAM表锁</h4><blockquote><p>MyISAM只支持表锁</p></blockquote><p>MyISAM 在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT 等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此，用户一般不需要直接用 LOCK TABLE 命令给 MyISAM 表显式加锁。</p><p>显示加表锁语法:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">加读锁 ： lock table table_name read;加写锁 ： lock table table_name write；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>特点</strong>：</p><ul><li>对MyISAM 表的<strong>读操作</strong>，不会阻塞其他用户对同一表的<strong>读请求</strong>，但会阻塞对同一表的<strong>写请求</strong></li><li>对MyISAM 表的<strong>写操作</strong>，则会阻塞其他用户对同一表的<strong>读和写操作</strong></li></ul><p>读锁会阻塞写，写锁会阻塞读和写</p><hr><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>事务具有以下4个特性，简称为事务ACID属性。</p><table><thead><tr><th>ACID属性</th><th>含义</th></tr></thead><tbody><tr><td>原子性（Atomicity）</td><td>事务是一个原子操作单元，其对数据的修改，要么全部成功，要么全部失败。</td></tr><tr><td>一致性（Consistent）</td><td>在事务开始和完成时，数据都必须保持一致状态。</td></tr><tr><td>隔离性（Isolation）</td><td>数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的 “独立” 环境下运行。</td></tr><tr><td>持久性（Durable）</td><td>事务完成之后，对于数据的修改是永久的。</td></tr></tbody></table><p><strong>并发事务处理带来的问题</strong></p><table><thead><tr><th>问题</th><th>含义</th></tr></thead><tbody><tr><td>丢失更新（Lost Update）</td><td>当两个或多个事务选择同一行，最初的事务修改的值，会被后面的事务修改的值覆盖。</td></tr><tr><td>脏读（Dirty Reads）</td><td>当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。</td></tr><tr><td>不可重复读（Non-Repeatable Reads）</td><td>一个事务在读取某些数据后的某个时间，再次读取以前读过的数据，却发现和以前读出的数据不一致。</td></tr><tr><td>幻读（Phantom Reads）</td><td>一个事务按照相同的查询条件重新读取以前查询过的数据，却发现其他事务插入了满足其查询条件的新数据。</td></tr></tbody></table><p><strong>事务隔离级别</strong></p><p>为了解决上述提到的事务并发问题，数据库提供一定的事务隔离机制来解决这个问题。数据库的事务隔离越严格，并发副作用越小，但付出的代价也就越大，因为事务隔离实质上就是使用事务在一定程度上“串行化” 进行，这显然与“并发” 是矛盾的。 </p><p>数据库的隔离级别有4个，由低到高依次为Read uncommitted、Read committed、Repeatable read、Serializable，这四个级别可以逐个解决脏写、脏读、不可重复读、幻读这几类问题。</p><table><thead><tr><th>隔离级别</th><th>丢失更新</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>×</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable read（默认）</td><td>×</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><p>备注 ： √  代表可能出现 ， × 代表不会出现 。</p><hr><h4 id="InnoDB-行锁"><a href="#InnoDB-行锁" class="headerlink" title="InnoDB 行锁"></a>InnoDB 行锁</h4><p><strong>行锁特点</strong> ：偏向InnoDB 存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。</p><p>InnoDB 与 MyISAM 的最大不同有两点：<strong>一是支持事务</strong>；<strong>二是 采用了行级锁</strong>。</p><p>InnoDB  实现了以下两种类型的行锁。</p><ul><li>共享锁（S）：又称为读锁，简称S锁，共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数据，但是只能读不能修改。</li><li>排他锁（X）：又称为写锁，简称X锁，排他锁就是不能与其他锁并存，如一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁，但是获取排他锁的事务是可以对数据就行读取和修改。</li></ul><p>对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及数据集加排他锁（X)；</p><p>对于普通SELECT语句，InnoDB不会加任何锁；</p><ul><li>如果是根据索引进行检索数据修改，那么是行锁</li></ul><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201129143820635.png" alt="行锁"></p><ul><li>如果不通过索引条件检索数据，那么InnoDB将<strong>对表中的所有记录加锁</strong>，相当于表锁</li></ul><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201129144352146.png" alt="image-20201129144352146"></p><hr><h4 id="间隙锁危害"><a href="#间隙锁危害" class="headerlink" title="间隙锁危害"></a>间隙锁危害</h4><p>当我们用范围条件，而不是使用相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据进行加锁； 对于键值在条件范围内但并不存在的记录，叫做 “间隙（GAP）” ， InnoDB也会对这个 “间隙” 加锁，这种锁机制就是所谓的 间隙锁（Next-Key锁）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update emp set age &#x3D; 1221  where id &#x3D; 1update emp set age &#x3D; 111  where id &lt;3  此时会阻塞A表commit后  B表阻塞消失<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201129144907344.png" alt="image-20201129144907344"></p><hr><h4 id="InnoDB-行锁争用情况"><a href="#InnoDB-行锁争用情况" class="headerlink" title="InnoDB 行锁争用情况"></a>InnoDB 行锁争用情况</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span>  <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'innodb_row_lock%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![1556455943670](E:/学习框架/MySQL 高级 - day-03/文档/assets/1556455943670.png)</p><pre class="line-numbers language-none"><code class="language-none">Innodb_row_lock_current_waits: 当前正在等待锁定的数量Innodb_row_lock_time: 从系统启动到现在锁定总时间长度Innodb_row_lock_time_avg:每次等待所花平均时长Innodb_row_lock_time_max:从系统启动到现在等待最长的一次所花的时间Innodb_row_lock_waits: 系统启动后到现在总共等待的次数当等待的次数很高，而且每次等待的时长也不小的时候，我们就需要分析系统中为什么会有如此多的等待，然后根据分析结果着手制定优化计划。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><p>优化建议：</p></blockquote><ul><li>尽可能让所有数据检索都能通过索引来完成，<strong>避免无索引行锁升级为表锁</strong>。</li><li>合理设计索引，尽量缩小锁的范围</li><li>尽可能减少索引条件，及索引范围，<strong>避免间隙锁</strong></li><li>尽量控制事务大小，<strong>减少锁定资源量和时间长度</strong></li><li>尽可<strong>使用低级别事务隔离</strong>（但是需要业务层面满足需求）</li></ul><hr><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>tail -f 日志名称</p><p>实时的更新</p><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201130135049541.png" alt="image-20201130135049541"></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java并发编程从0到n</title>
      <link href="2020/10/29/java-bing-fa-bian-cheng-cong-0-dao-n/"/>
      <url>2020/10/29/java-bing-fa-bian-cheng-cong-0-dao-n/</url>
      
        <content type="html"><![CDATA[<h1 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h1><h2 id="1-进程与线程"><a href="#1-进程与线程" class="headerlink" title="1. 进程与线程"></a>1. 进程与线程</h2><h3 id="1-1-进程"><a href="#1-1-进程" class="headerlink" title="1.1 进程"></a>1.1 进程</h3><ul><li>进程可以视为程序的一个实例，大部分程序可以同时运行多个实例进程，也有程序只能启动一个实例进程</li><li>程序由指令和数据组成，这些指令要运行，数据要读写，就必须将指令加载至cpu，数据加载至内存，在指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理io的。</li><li>进程被运行的时候，从磁盘加载这个程序的代码到内存，这时候就开启了一个进程。</li></ul><hr><h3 id="1-2-线程"><a href="#1-2-线程" class="headerlink" title="1.2 线程"></a>1.2 线程</h3><ul><li>一个进程之间可以分为1到多个线程</li><li>一个线程是一个指令流，将指令流中的一条条指令以一定的顺序交给cpu执行</li><li>java中，线程作为最小调度单位，进程作为资源分配的最小单位。在Windows中进程是不活动的，只是作为线程的容器。</li></ul><hr><h3 id="1-3-二者对比"><a href="#1-3-二者对比" class="headerlink" title="1.3 二者对比"></a>1.3 二者对比</h3><ul><li>进程之间相互独立，线程存在于进程内</li><li>进程拥有共享的资源，如内存空间，供其内部的线程共享</li><li>进程间通信较为复杂<ul><li>同一台计算机的进程通信叫做IPC（inter process communication）</li><li>不同计算机之间的进程通信，需要通过网络，并遵守共同的协议</li></ul></li><li>线程通信相对简单，他们共享进程的内存，就好比多个线程访问同一个变量</li><li>线程更轻量，线程上下文切换成本一般要比进程上下文切换低</li></ul><hr><h3 id="1-4-并行与并发"><a href="#1-4-并行与并发" class="headerlink" title="1.4 并行与并发"></a>1.4 并行与并发</h3><h4 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h4><blockquote><p>同一时间应对多件事情的能力</p></blockquote><p>一个cpu，单核心在同一之间段内在线程中来回调度，叫做并发</p><h4 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h4><blockquote><p>同一时间动手做多件事情的能力</p></blockquote><p>多个cpu或者多个核心，在同一时刻内同时工作两个以上的线程</p><p><img src="https://s1.ax1x.com/2020/10/29/BGZFQU.png" alt="BGZFQU.png"></p><hr><h3 id="1-5-应用"><a href="#1-5-应用" class="headerlink" title="1.5 应用"></a>1.5 应用</h3><p><strong>异步调用</strong></p><blockquote><p>多线程可以让方法执行变为异步的，比如说读取磁盘文件时，假设读取操作花费了5s，如果没有线程调度机制，这5s调用者啥也做不了，其他代码还得暂停</p></blockquote><p>结论：</p><ul><li>在项目中，视频文件需要转换格式等操作比较费时，这时可以开一个新的线程处理视频切换，避免阻塞主线程</li><li>ui程序中，开线程进行其他操作，避免ui线程阻塞</li></ul><hr><p><strong>提高效率</strong></p><ul><li><p>单核cpu下多线程不能实际提高程序运行效率，只是为了能够在不同的任务之间切换，不同线程轮流使用cpu，不至于一个线程总占用cpu，别的线程啥也不干</p></li><li><p>多核cpu可以并行跑多个线程，有的任务经过精心设计，拆分后可以并行执行，提高效率，但有的任务就没必要拆分。</p></li><li><p>IO操作不占用cpu，只是我们一般copy文件使用的是【阻塞IO】，这时相当于线程虽然不用cpu，但需要一直等待IO操作，没能充分利用线程。</p></li></ul><hr><h2 id="2-Java线程"><a href="#2-Java线程" class="headerlink" title="2. Java线程"></a>2. Java线程</h2><h3 id="2-1-创建和运行线程"><a href="#2-1-创建和运行线程" class="headerlink" title="2.1 创建和运行线程"></a>2.1 创建和运行线程</h3><h4 id="方法一：直接使用Thread"><a href="#方法一：直接使用Thread" class="headerlink" title="方法一：直接使用Thread"></a>方法一：直接使用Thread</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法二：使用Runnable配合Thread"><a href="#方法二：使用Runnable配合Thread" class="headerlink" title="方法二：使用Runnable配合Thread"></a>方法二：使用Runnable配合Thread</h4><blockquote><p>把【线程】和【任务】分开</p><ul><li>Thread代表线程</li><li>Runnable重写run方法，做可运行的任务</li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"run方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"main方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Lambda表达式可以简化代码</strong></p><h4 id="方法三：FutureTask创建"><a href="#方法三：FutureTask创建" class="headerlink" title="方法三：FutureTask创建"></a>方法三：FutureTask创建</h4><blockquote><p>Futuretask间接的继承了Runnable接口，与Runnable不同的是，他有返回值</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"running========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span>            futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="2-2-线程运行原理"><a href="#2-2-线程运行原理" class="headerlink" title="2.2 线程运行原理"></a>2.2 线程运行原理</h3><h4 id="栈与栈帧"><a href="#栈与栈帧" class="headerlink" title="栈与栈帧"></a>栈与栈帧</h4><p><img src="https://s1.ax1x.com/2020/10/29/BGW1mt.png"></p><ul><li>每个线程只能有一个活动栈帧，对应着当前的那个方法</li></ul><blockquote><p>栈帧的相关内容参考JVM</p></blockquote><h4 id="线程的上下文切换"><a href="#线程的上下文切换" class="headerlink" title="线程的上下文切换"></a>线程的上下文切换</h4><blockquote><p>以下会导致线程上下文切换的原因：</p></blockquote><ul><li>线程的cpu时间片用完</li><li>垃圾回收</li><li>有更高优先级的线程运行</li><li>线程自己调用了 sleep yield  wait  join  park  synchronized  lock 等方法</li></ul><p>当Context Switch发生时，需要由操作系统保存当前线程的状态，并恢复另一个线程的状态，Java中对应的概念就是程序计数器，</p><ul><li>状态包括，程序计数器，虚拟机栈中的每个栈帧的信息</li><li>Context Switch频繁操作可能会影响性能</li></ul><h3 id="2-3-常见方法"><a href="#2-3-常见方法" class="headerlink" title="2.3 常见方法"></a>2.3 常见方法</h3><blockquote><p>参考jdk api 文档</p></blockquote><h4 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h4><ul><li><p>调用sleep会使得当前线程从running状态变成time waiting状态</p></li><li><p>其他线程可以使用interrupt方法打断正在睡眠的线程，此时sleep方法会抛出InterruptedException</p></li><li><p>睡眠结束后的线程未必比会立刻得到执行</p></li><li><p>建议使用TimeUnit的sleep代替Thread的sleep来获得更好的可读性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">在JUC包中，<span class="token class-name">TimeUnit</span>里边包装了一定的时间，可读性更好<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><h4 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h4><ul><li><p>调用yield会让当前线程从Running进入Runnable状态，然后调度执行其他同优先级的线程，<strong>如果这时没有同优先级的线程，那么不能保证让当前线程暂停的效果</strong></p></li><li><p>具体的是西安依赖于操作系统的任务调度器</p></li></ul><hr><h4 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h4><ul><li>线程优先级会提示调度器优先调度该线程，但它仅仅是一个提示，调度器可以忽略它</li><li>如果CPU比较忙，那么优先级高的线程会获得更多的时间片，但CPU闲时，优先级几乎没作用</li></ul><hr><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><blockquote><p>谁调用join，就等待谁结束</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s1.ax1x.com/2020/10/29/BJPAFf.png"></p><h4 id="interrupt方法详解"><a href="#interrupt方法详解" class="headerlink" title="interrupt方法详解"></a>interrupt方法详解</h4><h5 id="打断sleep、wait、join的线程"><a href="#打断sleep、wait、join的线程" class="headerlink" title="打断sleep、wait、join的线程"></a>打断sleep、wait、join的线程</h5><p>打断sleep的线程，会清空打断状态，以sleep为例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span> <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t1<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">" 打断状态: &#123;&#125;"</span><span class="token punctuation">,</span> t1<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="打断正常运行的线程"><a href="#打断正常运行的线程" class="headerlink" title="打断正常运行的线程"></a>打断正常运行的线程</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span> <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> current<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>interrupted<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">" 打断状态: &#123;&#125;"</span><span class="token punctuation">,</span> interrupted<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t2<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="打断-park-线程"><a href="#打断-park-线程" class="headerlink" title="打断 park 线程"></a>打断 park 线程</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span> <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"park..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"unpark..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"打断状态：&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t1<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果打断标记已经是true，则park会失效</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"park----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"unpark---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"打断状态：&#123;&#125;"</span><span class="token punctuation">,</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/////////这里会立即停止</span>    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"unpark---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="两阶段终止模式"><a href="#两阶段终止模式" class="headerlink" title="两阶段终止模式"></a>两阶段终止模式</h4><blockquote><p>在线程T1中如何“优雅”终止线程T2？这里的【优雅】指的是给T2一个料理后事的机会？</p></blockquote><p><img src="https://s1.ax1x.com/2020/10/29/BJI44x.png"></p><h3 id="2-4-主线程与守护线程"><a href="#2-4-主线程与守护线程" class="headerlink" title="2.4 主线程与守护线程"></a>2.4 主线程与守护线程</h3><blockquote><p>守护线程，<strong>只要其它非守护线程运行结束了，即使守护线程的代码没有执行完，也会强制结束</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果守护线程正常结束，才会执行</span>    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"main结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>垃圾回收器线程是一种守护线程</li><li>Tomcat中的Acceptor和Poller线程都是守护线程，所以Tomcat接收到shutdown命令后，不会等待他们处理完当前请求</li></ul><h3 id="2-5-线程状态"><a href="#2-5-线程状态" class="headerlink" title="2.5 线程状态"></a>2.5 线程状态</h3><blockquote><p>在操作系统层面</p></blockquote><p><img src="https://s1.ax1x.com/2020/10/30/BYNFC6.png"></p><ul><li>【初始状态】仅仅是在语言层面创建了线程对象，还未与操作系统线程关联</li><li>【可运行状态】（就绪状态）指该线程已被创建，可以由cpu调度执行</li><li>【运行状态】指获取了CPU时间片运行中的状态<ul><li>当CPU时间片用完，会从【运行状态】转换至【可运行状态】，会导致线程的上下文切换</li></ul></li><li>【阻塞状态】<ul><li>如果调用了阻塞API，如BIO读写文件，这时该线程实际上不会用到CPU，会导致线程上下文切换，进入【阻塞状态】</li><li>等BIO操作完毕，会由操作系统唤醒阻塞的线程，转换至【可运行状态】</li></ul></li><li>【终止状态】表示线程以及执行完毕，生命周期已经结束，不会再转换为其他状态</li></ul><blockquote><p>在java层面</p></blockquote><p><img src="https://s1.ax1x.com/2020/10/30/BYUUyD.png"></p><h3 id="2-6-小结"><a href="#2-6-小结" class="headerlink" title="2.6 小结"></a>2.6 小结</h3><ul><li><p>线程的创建</p></li><li><p>线程的重要api</p></li><li><p>线程的状态</p></li><li><p><strong>应用方面</strong></p><ul><li>异步调用：主线程执行期间，其他线程异步执行耗时操作</li><li>提高效率：并行计算，缩短运行时间</li><li>同步等待：join</li><li>统筹规划：合理使用线程，得到最优结果</li></ul></li><li><p><strong>原理方面</strong></p><ul><li>线程运行流程：栈、栈帧、上下文切换、程序计数器</li><li>Thread两种创建方式的源码</li></ul></li><li><p><strong>模式方面</strong></p><ul><li>两阶段终止模式</li></ul></li></ul><h2 id="3-共享模型之管程"><a href="#3-共享模型之管程" class="headerlink" title="3. 共享模型之管程"></a>3. 共享模型之管程</h2><h3 id="3-1-共享带来的问题"><a href="#3-1-共享带来的问题" class="headerlink" title="3.1 共享带来的问题"></a>3.1 共享带来的问题</h3><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201031134251.png"></p><h4 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h4><ul><li>一个程序运行多个ianc本身是没有问题的</li><li>问题出现在多个线程访问<strong>共享资源</strong>，在多个线程对<strong>共享资源</strong>的读写操作发生了指令交错，就会出现问题</li><li>一段代码内如果存在对<strong>共享资源</strong>的多线程读写操作，称这块代码为 <strong>临界区</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 临界区</span>    counter<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 临界区</span>    counter<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="竞态条件-Race-Condition"><a href="#竞态条件-Race-Condition" class="headerlink" title="竞态条件 Race Condition"></a>竞态条件 Race Condition</h4><h3 id="3-2-synchronized解决方案"><a href="#3-2-synchronized解决方案" class="headerlink" title="3.2 synchronized解决方案"></a>3.2 synchronized解决方案</h3><blockquote><p>俗称“对象锁”，采用互斥的方式让同一时刻只有一个线程能够持有【对象锁】，其他线程再想获取这个【对象锁】就会阻塞。不用担心上下文切换</p></blockquote><p><strong>注意</strong></p><p>虽然java中，互斥和同步都能采用synchronized关键字完成，但是他们有本质区别：</p><ul><li>互斥是保证临界区的竞态条件发生，同一时刻只能有一个线程执行临界区代码</li><li>同步是由于线程执行的先后、顺序不同、需要一个线程等待其他线程运行到某个点</li></ul><h4 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h4><p><strong>语法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>对象<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 临界区</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>思考</strong></p><p>synchronized实际是用<strong>对象锁</strong>保证了 <strong>临界区内代码的原子性</strong>，临界区内的代码对外是不可分割的，不会被线程切换所打断。</p><p><strong>问题</strong></p><blockquote><p>如果把synchronized(obj)放在for循环的外面，如何理解？</p></blockquote><p>原子性</p><blockquote><p>如果t1 synchronized(obj1) 而 t2 synchronized(obj2) 会怎样运作？</p></blockquote><p>锁对象要一致，不然没用</p><blockquote><p>如果t1 synchronized(obj)而t2没有加会怎么样？如何理解？</p></blockquote><p>t2没有加，当执行它的代码片的时候，它并不会去获取锁对象，而是直接执行代码</p><h4 id="方法上的synchronized"><a href="#方法上的synchronized" class="headerlink" title="方法上的synchronized"></a>方法上的synchronized</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 临界区</span>    counter<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里看似加在方法上，其实锁住的是调用它的对象</p></blockquote><h4 id="线程八锁"><a href="#线程八锁" class="headerlink" title="线程八锁"></a>线程八锁</h4><p>情况1：<u>立刻出现1和2，或者立刻出现2和1</u></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Number</span> n1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            n1<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            n1<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Slf4j</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">"c.Number"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Number</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>情况2：<u>1s后出现1 2或者2 1s后出现1</u></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Number</span> n1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            n1<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            n1<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Slf4j</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">"c.Number"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Number</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadUtil</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">///让线程1睡眠1s</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>情况3：<u>3 2 1s后1，3 1s后 1 2 ，2 3 1s后1</u></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Number</span> n1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            n1<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            n1<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            n1<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Slf4j</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">"c.Number"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Number</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadUtil</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>情况4：<u>1 2，2 1</u></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">"c.Number"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Number</span><span class="token punctuation">&#123;</span> <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">Number</span> n1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Number</span> n2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span> n1<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span> n2<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>情况5：2 1s 后 1</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">"c.Number"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Number</span><span class="token punctuation">&#123;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>北京市昌平区建材城西路金燕龙办公楼一层 电话：<span class="token number">400</span><span class="token operator">-</span><span class="token number">618</span><span class="token operator">-</span><span class="token number">9090</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">Number</span> n1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span> n1<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span> n1<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>情况6：1s 后12， 或 2 1s后 1</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">"c.Number"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Number</span><span class="token punctuation">&#123;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">Number</span> n1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span> n1<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span> n1<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>情况7：2 1s 后 1</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">"c.Number"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Number</span><span class="token punctuation">&#123;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">Number</span> n1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Number</span> n2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span> n1<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span> n2<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>情况8：1s 后12， 或 2 1s后 1</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">"c.Number"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Number</span><span class="token punctuation">&#123;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">Number</span> n1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Number</span> n2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span> n1<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span> n2<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-变量的线程安全分析"><a href="#3-3-变量的线程安全分析" class="headerlink" title="3.3 变量的线程安全分析"></a>3.3 变量的线程安全分析</h3><blockquote><p><strong>成员变量和静态变量是否线程安全？</strong></p></blockquote><ul><li>如果他们没有共享，则线程安全</li><li>如果他们被共享了，根据他们的状态是否能够改变，又分为：<ul><li>如果是只读操作，则线程安全</li><li>如果是读写操作，则这段代码是临界区，需要考虑线程安全问题</li></ul></li></ul><blockquote><p><strong>局部变量是否线程安全？</strong></p></blockquote><ul><li>局部变量是线程安全的</li><li>局部变量引用的对象未必是安全的：<ul><li>如果该对象没有逃离方法的作用访问，它是线程安全的</li><li>如果该对象逃离方法的作用范围，则需要考虑线程安全</li></ul></li></ul><h3 id="3-4-常见的线程安全类"><a href="#3-4-常见的线程安全类" class="headerlink" title="3.4 常见的线程安全类"></a>3.4 常见的线程安全类</h3><ul><li>String</li><li>Integer</li><li>StringBuffer</li><li>Random</li><li>Vector</li><li>HashTable</li><li>JUC包下的类</li></ul><blockquote><p>这里说他们的线程安全是指，多个线程调用他们<strong>同一个实例的某个方法时</strong>，是线程安全的</p></blockquote><h3 id="3-5Monitor-监视器"><a href="#3-5Monitor-监视器" class="headerlink" title="3.5Monitor 监视器"></a>3.5Monitor 监视器</h3><blockquote><p><strong>对象头</strong></p></blockquote><p>普通对象</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201031193830.png"></p><p>数组对象</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201031193901.png"></p><p>Mark Word的结构为</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201031193942.png"></p><p>64位虚拟机Mark Word</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201031194046.png"></p><h4 id="Monitor原理"><a href="#Monitor原理" class="headerlink" title="Monitor原理"></a>Monitor原理</h4><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201103174042.png" alt="监视器工作原理"></p><ul><li>刚开始Monitor中的Owner为null</li><li>当Thread-2执行synchronized(obj)就会将Monitor的所有者Owner置为Thread-2，Monitor中只能有一个Owner</li><li>当Thread-2上锁的过程中，如果Thread-3，Thread-4，Thread-5也来执行synchronized(obj)，就会进入EntryList中，进入阻塞状态</li><li>当Thread-2执行完同步代码块中的内容，然后唤醒EntryList中的等待线程来竞争锁，<strong>竞争锁的过程是非公平的</strong></li><li>WAITING中的线程是：之前获得过锁，但条件又不满足进入WAITING状态的线程</li></ul><hr><h3 id="3-6-轻量级锁"><a href="#3-6-轻量级锁" class="headerlink" title="3.6 轻量级锁"></a>3.6 轻量级锁</h3><blockquote><p>如果一个对象虽然有多个线程访问，但多线程访问的时间是错开的（<strong>没有竞争</strong>），那么可以使用轻量级锁来优化</p><p>轻量级锁对使用者是透明的，语法仍然是synchronized</p></blockquote><p>假设有两个方法同步代码块， 利用同一个对象加锁</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span>  <span class="token keyword">final</span> <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 同步块A</span>        <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 同步块B</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>创建锁记录对象，每个线程的栈帧中都会包含一个锁记录的结构，内存可以存储锁定对象的Mark Word</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201103213042.png"></p></li><li><p>让锁记录中Object reference指向锁对象，并尝试用CAS替换Object的Mark Word，将Mark Word的值存入锁记录中</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201103213844.png"></p></li><li><p>如果CAS替换成功，<strong>对象头中存储了所记录地址和状态00</strong>，表示由该线程给对象加锁，这时如下图示：</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201103214200.png"></p></li><li><p>如果CAS失败：</p><ul><li><p>如果是其他线程已经持有了该对象的轻量级锁，这是表明有竞争，进入锁膨胀过程</p></li><li><p>如果是自己执行了synchronized锁重入，那么再添加一条Lock Record作为重入的计数</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201103214743.png" alt="synchronized 锁重入！存入null"></p></li><li><p>当退出synchronized代码块，进行解锁，如果有取值为null的锁记录，表示有重入，这时充值锁记录，表示重入计数减一</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201103214200.png"></p></li><li><p>当推出synchronized代码块，进行解锁，如果锁记录的值不为null，这时用cas将Mark Word的值恢复给对象头</p><ul><li>成功：解锁成功</li><li>失败：说明轻量级锁进行了锁膨胀或者已经升级为重量级锁，进入重量级锁解锁流程</li></ul></li></ul></li></ul><hr><h3 id="3-7-锁膨胀"><a href="#3-7-锁膨胀" class="headerlink" title="3.7 锁膨胀"></a>3.7 锁膨胀</h3><blockquote><p>如果再尝试加轻量级锁的过程中，CAS操作无法成功，这时一种情况就是有其他线程为此对象加上了轻量级锁（有竞争），这时就需要进行锁膨胀，将轻量级锁变为重量级锁。</p></blockquote><ul><li><p>当Thread-1进行轻量级加锁时，Thread-0已经对该对象加了轻量级锁</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201103220659.png"></p></li><li><p>这时Thread-1加轻量级锁失败，进入锁膨胀流程</p><ul><li>即为Object对象申请Monitor锁，让Object指向重量级锁地址</li><li>然后自己进入Monitor的EntryList BLOCKED</li></ul><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201104104249.png"></p></li><li><p>当Thread-0退出同步块解锁时，使用cas将Mark Word的值恢复给对象头，失败。这时会进入重量级解锁流程，即按照Monitor地址找到Monitor对象，设置Owner为null，唤醒EntryList中的BLOCKED线程</p></li></ul><hr><h3 id="3-8-自旋"><a href="#3-8-自旋" class="headerlink" title="3.8 自旋"></a>3.8 自旋</h3><blockquote><p>对于自旋有好多不同的版本，有的说是在轻量级锁的时候自旋，有的说是在重量级锁的时候自旋？？？？？</p></blockquote><p><strong>重量级锁竞争的时候</strong>，使用自旋来进行优化，如果当前线程自旋成功（这时候持锁线程已经推出了同步块，释放了锁），这时当前线程就可以避免阻塞。</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201104144726.png" alt="自旋成功"></p><p>自旋失败会进入entryList中，进入BLOCKED状态</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201104144859.png" alt="自旋失败"></p><p><strong>补充</strong></p><ul><li>java6以后自旋锁是自适应的，比如对象杠杆的一次自旋操作成功过，那么认为这次自旋成功的可能性会高，就多自旋几次；反之就少自旋甚至不自旋，智能控制。</li><li>自旋会占用cpu时间，多核cpu才能发挥优势</li><li>java7之后不能控制是否开启自旋功能</li></ul><h3 id="3-9-偏向锁"><a href="#3-9-偏向锁" class="headerlink" title="3.9 偏向锁"></a>3.9 偏向锁</h3><blockquote><p>当轻量级锁在没有竞争的时候，每次重入仍然需要进行一次CAS，相当浪费啊</p><p>所以java6中引入了偏向锁来进行进一步优化：只有第一次CAS<strong>将线程ID设置到对象头的Mark Word中</strong>，之后发现这个线程ID是自己的就表示没有竞争，不用重新CAS。以后只要不发生竞争，这个对象就归该线程所有。</p></blockquote><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201104162409.png"></p><h4 id="偏向状态"><a href="#偏向状态" class="headerlink" title="偏向状态"></a>偏向状态</h4><p>一个对象创建时：</p><ul><li>如果开启了偏向锁（默认开启），那么对象创建后，Mark Word值为0x05即最后3位为101，这时它的thread、epoch、age都为0</li><li>偏向锁是默认是延迟的，不会在程序启动立即生效，如果想避免延迟，可以加VM参数 <code>-XX:BiasedLockingStrartupDelay=0</code>来禁用延迟</li><li>如果没有开启偏向锁，那么对象创建后，Mark Word值为0x01 即最后3位为001，这时它的hash code、age都为0，第一次用到hash code时才会赋值 <strong>并且，算出hash code以后，偏向锁就会失效，因为放不下了,当一个对象当前正处于偏向锁状态，并且需要计算其identity hash code的话，则它的偏向锁会被撤销，并且锁会膨胀为重量级锁</strong></li></ul><h4 id="撤销-调用对象hashCode"><a href="#撤销-调用对象hashCode" class="headerlink" title="撤销-调用对象hashCode"></a>撤销-调用对象hashCode</h4><blockquote><p>调用了对象的hashCode，但偏向锁的对象Mark Word中存储的时线程id，如果调用hash Code会导致偏向锁被撤销</p></blockquote><ul><li>轻量级锁会在锁记录中记录hash Code</li><li>重量级锁会在Monitor中记录hash Code</li></ul><p>调用hash Code后使用偏向锁，记得去掉 <code>-XX:-UserBiasedLocking</code></p><h4 id="撤销-其他线程使用对象"><a href="#撤销-其他线程使用对象" class="headerlink" title="撤销-其他线程使用对象"></a>撤销-其他线程使用对象</h4><blockquote><p>当有其他线程使用偏向锁的时候，会升级为轻量级锁</p></blockquote><h4 id="撤销-调用wait-notify"><a href="#撤销-调用wait-notify" class="headerlink" title="撤销-调用wait/notify"></a>撤销-调用wait/notify</h4><h4 id="批量重偏向"><a href="#批量重偏向" class="headerlink" title="批量重偏向"></a>批量重偏向</h4><blockquote><p>如果对象虽然被多个线程访问，但没有竞争，这时偏向了线程T1的对象仍有机会重新偏向T2，重偏向会重置对象的Thread ID</p><p>当撤销偏向锁阈值超过20次后，JVM会给这些对象加锁时重新偏向至加锁线程</p></blockquote><h4 id="批量撤销"><a href="#批量撤销" class="headerlink" title="批量撤销"></a>批量撤销</h4><blockquote><p>当撤销偏向锁阈值超过40次，jvm会把整个类的所有对象都变为不可偏向的，新创建的对象也是不可偏向的。</p></blockquote><h3 id="3-10-锁消除"><a href="#3-10-锁消除" class="headerlink" title="3.10 锁消除"></a>3.10 锁消除</h3><p>xxx</p><h3 id="3-11-锁粗化"><a href="#3-11-锁粗化" class="headerlink" title="3.11 锁粗化"></a>3.11 锁粗化</h3><h2 id="4-wait-notify"><a href="#4-wait-notify" class="headerlink" title="4. wait notify"></a>4. wait notify</h2><blockquote><p>原理</p></blockquote><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201104212224.png"></p><ul><li>Owner线程发现条件不满足，调用wait方法，即可进入WaitSet变为WAITING状态</li><li>BLOCKED和WAITING的线程都处于阻塞状态，不占用CPU时间片段</li><li>BLOCKED线程会在OWner线程释放锁时唤醒</li><li>WAITING线程追在Owner线程调用notify或notifyAll时唤醒，但唤醒后并不意味着立刻获得锁，仍需进入EntryList重新竞争</li></ul><h3 id="API介绍"><a href="#API介绍" class="headerlink" title="API介绍"></a>API介绍</h3><ul><li>obj.wait()让进入object近十期的线程到waitSet等待</li><li>obj.notify()在object上正在waitSet等待的线程中挑一个唤醒</li><li>obj.notifyAll()让object上正在waitSet等待的线程全部唤醒</li></ul><p><strong>调用这些方法必须获取这个对象的锁才能调用</strong> </p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><blockquote><p><strong>sleep(long n)**和</strong>wait(long n)**的区别</p></blockquote><p>1）sleep是Thread方法，wait是Object方法</p><p>2）sleep不需要强制和synchronized配合使用，但wait需要和synchronized一起使用</p><p>3）<strong>sleep在睡眠的同时，不会释放对象锁的</strong>，但<strong>wait在等待的时候会释放对象锁</strong></p><p>4）他们的状态都是WAITING</p><p><strong>规范写法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 等待</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>对象<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>条件不成立<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// do other things</span><span class="token punctuation">&#125;</span><span class="token comment">// 唤醒</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>对象<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    lock<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模式——保护性暂停"><a href="#模式——保护性暂停" class="headerlink" title="模式——保护性暂停"></a>模式——保护性暂停</h3><blockquote><p>用于一个线程等待另一个线程的执行结果</p></blockquote><p>要点：</p><ul><li>有一个结果需要从一个线程传递到另一个线程，让他们关联同一个GuardedObject</li><li>如果有结果不断从一个线程到另一个线程，那么可以使用<strong>消息队列</strong></li><li>jdk中，join实现、Future的实现，采用的就是此模式</li><li>因为要等待另一方的结果，因此归类到<strong>同步模式</strong></li></ul><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201105190354.png"></p><h3 id="模式——生产者消费者模式"><a href="#模式——生产者消费者模式" class="headerlink" title="模式——生产者消费者模式"></a>模式——生产者消费者模式</h3><blockquote><p>生产者负责产生结果数据，不关心数据如何处理</p><p>消费者专心处理结果数据</p><p>消息队列是由容量限制的，满时不会再加入数据，空时不会再消耗数据</p><p>jdk中各种阻塞队列，采用的就是这种模式</p></blockquote><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201105202048.png"></p><p><strong>参考代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>study<span class="token punctuation">.</span>n8</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span><span class="token punctuation">;</span><span class="token comment">/** * @author: Zhang Haoyu * @date: 2020/11/5 20:28 * @description: */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MessageQueue</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageQueue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> id <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>                queue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token string">"值"</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"生产者"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Message</span> take <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"消费消息"</span><span class="token operator">+</span>take<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"消费者"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Message</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Message&#123;"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", value='"</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">class</span> <span class="token class-name">MessageQueue</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> capcity<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MessageQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capcity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capcity <span class="token operator">=</span> capcity<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 取出消息</span>    <span class="token keyword">public</span> <span class="token class-name">Message</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"队列为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 从队列头部取</span>            <span class="token class-name">Message</span> message <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"已经消费消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> message<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 存入消息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>capcity<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"队列已满"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            list<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 唤醒</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"已经生产消息"</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>20:46:56.977 [生产者1] DEBUG com.study.n8.MessageQueue - 已经生产消息Message{id=1, value=’值1’}<br>20:46:56.979 [生产者0] DEBUG com.study.n8.MessageQueue - 已经生产消息Message{id=0, value=’值0’}<br>20:46:56.979 [生产者2] DEBUG com.study.n8.MessageQueue - 队列已满<br>20:46:57.976 [消费者] DEBUG com.study.n8.MessageQueue - 已经消费消息<br>20:46:57.976 [消费者] DEBUG com.study.n8.Test - 消费消息Message{id=1, value=’值1’}<br>20:46:57.976 [生产者2] DEBUG com.study.n8.MessageQueue - 已经生产消息Message{id=2, value=’值2’}<br>20:46:58.976 [消费者] DEBUG com.study.n8.MessageQueue - 已经消费消息<br>20:46:58.976 [消费者] DEBUG com.study.n8.Test - 消费消息Message{id=0, value=’值0’}<br>20:46:59.977 [消费者] DEBUG com.study.n8.MessageQueue - 已经消费消息<br>20:46:59.977 [消费者] DEBUG com.study.n8.Test - 消费消息Message{id=2, value=’值2’}<br>20:47:00.977 [消费者] DEBUG com.study.n8.MessageQueue - 队列为空</p></blockquote><h2 id="5-Park和Unpark"><a href="#5-Park和Unpark" class="headerlink" title="5.Park和Unpark"></a>5.Park和Unpark</h2><p><strong>基本使用</strong></p><blockquote><p>是属于LockSupport类中的方法</p></blockquote><p>暂停当前线程：<code>LockSupport.park()</code></p><p>恢复某个线程的运行：<code>LockSupport.unpark(暂停线程对象)</code></p><p><strong>特点比较</strong></p><ul><li>wait和notifyAll必须配合Object Monitor一起使用，而unpark不必</li><li>park&amp;unpark是以线程为单位来阻塞和唤醒线程的，相对于wait和notifyAll，这个更加精确</li><li>park&amp;unpark可以先unpark，而wait&amp;notify不能先notify</li></ul><p><strong>原理</strong></p><blockquote><p>每个线程都有一个Parker对象，由三部分组成：<strong>mutex</strong>、<strong>cond</strong>、<strong>counter</strong></p></blockquote><h2 id="线程状态转换"><a href="#线程状态转换" class="headerlink" title="线程状态转换"></a>线程状态转换</h2><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201105210741.png"></p><ol><li><p>NEW—RUNNABLE</p><p><code>start()</code></p></li><li><p>RUNNABLE—WAITING</p><blockquote><ul><li>线程使用synchronized获取对象锁后，<ul><li>调用wait()方法进入WAITING状态</li><li>调用notify()或者notifyAll()或者interrupt()方法时<ul><li>竞争锁成功，进入RUNNABLE状态</li><li>竞争锁失败，进入BLOCKED状态</li></ul></li></ul></li></ul></blockquote></li><li><p>RUNNABLE—WAITING</p><blockquote><p>当前线程调用<code>t.join()</code>，当前线程从RUNNABLE—&gt;WAITING</p><ul><li>当前线程在t线程对象的监视器上等待</li><li>t线程运行结束，或调用了当前线程的interrupt()时，当前线程从WAITING—&gt;RUNNABLE</li></ul></blockquote></li><li><p>RUNNABLE—WAITING</p><blockquote><ul><li>当前线程调用 LockSupport.park() 方法会让当前线程从RUNNABLE–&gt;WAITING</li><li>调用LockSupport.unpark(目标线程)或者调用了interrupt()，会让目标线程从WAITING—&gt;RUNNABLE</li></ul></blockquote></li><li><p>RUNNABLE—TIMED_WAITING</p><blockquote><p>线程使用synchronized获取对象锁后</p><ul><li>调用 <code>t.wait(long n)</code>。t线程从RUNNABLE–&gt;TIMED_WAITING</li><li>t线程等待时间超过了n毫秒，或者调用了notify()，notifyAll()，interrupt()时<ul><li>竞争锁成功，t线程从TIMED_WAITING —&gt;RUNNABLE</li><li>竞争锁失败，t线程从TIMED_WAITING —&gt;BLOCKED</li></ul></li></ul></blockquote></li><li><p>RUNNABLE—TIMED_WAITING</p><blockquote><ul><li>当前线程调用了t.join(n)方法，当前线程会进入TIMED_WAITING状态<ul><li>注意是 <strong>当前线程</strong>在<strong>t线程对象的监视器</strong>上的等待</li></ul></li><li><strong>当前线程</strong>等待时间超过n毫秒，或者t线程运行结束，或者调用了当前线程的interrupt()时，<strong>当前线程</strong>会从TIMED_WAITING —&gt;RUNNABLE</li></ul></blockquote></li><li><p>RUNNABLE—TIMED_WAITING</p><blockquote><ul><li>当前线程调用Thread.sleep(long n)，当前线程会进入TIMED_WAITING状态</li><li>当前线程等待时间超过了n毫秒，当前线程从TIMED_WAITING —&gt;RUNNABLE</li></ul></blockquote></li><li><p>RUNNABLE — TIMED_WAITING</p><blockquote><p>当前线程调用了 LockSupport.parkNanos(long nanos)或者LockSupport.parkUntil(long millis)时，当前线程从RUNNABLE　—&gt;TIMED_WAITING</p><p> 调用LockSupport.unpark(目标线程)或者调用了线程的interrupt()，或者等待超时，会让目标线程从TIMED_WAITING状态进入RUNNABLE状态</p></blockquote></li><li><p>RUNNABLE — BLOCKED</p><blockquote><ul><li><strong>线程</strong>用synchronized获取对象锁如果竞争失败，会进入entryList中，进入BLOCKED状态</li><li>持有obj锁线程的同步代码块执行完毕，会唤醒该对象上所有BLOCKED的线程重新竞争，如果其中t线程竞争成功，会从BLOCKED状态变为RUNNABLE，其他失败的仍然会是BLOCKED状态</li></ul></blockquote></li><li><p>RUNNABLE — TERMINATED</p><blockquote><p>当线程的所有代码运行完毕，会进入TERMINATED状态</p></blockquote></li></ol><h2 id="6-ReentrantLock"><a href="#6-ReentrantLock" class="headerlink" title="6. ReentrantLock"></a>6. ReentrantLock</h2><blockquote><p>相对于synchronized它具备的特点是:</p><ul><li>可中断</li><li>可以设置超时时间</li><li>可以设置为公平锁</li><li>支持多个条件变量</li></ul><p>与synchronized一样支持可重入</p></blockquote><p>基本语法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ReentrantLock</span> reentrantLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 加锁</span>reentrantLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 临界区</span><span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 释放锁</span>    reentrantLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可重入"><a href="#可重入" class="headerlink" title="可重入"></a>可重入</h3><blockquote><p>可重入是指同一个线程如果首次获得了这把锁，那么因为它是这把锁的拥有者，因此有权利再次获取这把锁，如果是不可重入锁，那么第二次获得锁时，自己也会被锁挡住</p></blockquote><h3 id="可打断"><a href="#可打断" class="headerlink" title="可打断"></a>可打断</h3><blockquote><p>在等待锁的过程中，其他线程可以使用interrupt()来打断，<strong>使用<code>lock.inteeruptibly()</code>为可打断，，原先的<code>lock.lock()</code>为不可打断</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"启动..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">try</span> <span class="token punctuation">&#123;</span> lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//尝试获得锁</span> <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 如果被打断会抛异常，进而退出</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"等锁的过程中被打断"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">try</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"获得了锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span> lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//先用主线程获得锁</span>log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"获得了锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 启动t1线程，这时候t1获得不了所</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t1<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 主线程中打断t1线程</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"执行打断"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span> lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="锁超时"><a href="#锁超时" class="headerlink" title="锁超时"></a>锁超时</h3><blockquote><p>使用 <code>tryLock()</code> 方法来尝试获得锁</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"启动..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"获取立刻失败，返回"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">try</span> <span class="token punctuation">&#123;</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"获得了锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span> lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"获得了锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"尝试获取锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 定义等待最多1秒，如果还是获取不到，就结束，，该方法可以被打断</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"获取不到锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 其他线程调用interrupt方法打断</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"获取到锁了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h3><blockquote><p>默认是不公平的锁，通过构造方法可以控制</p></blockquote><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201107155721.png"></p><p>更容易先进先得，但是没必要，<strong>会降低并发度</strong></p><h3 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h3><blockquote><p>synchronized中也有条件变量，就是当 条件不满足的时候，会进入waitSet等待</p><p>ReentrantLock的条件变量强大之处在于<strong>它支持多个条件变量</strong></p></blockquote><p><strong>使用流程</strong></p><ul><li>await 前需要获得锁</li><li>await执行后，会释放锁，进入conditionObject等待</li><li>await的线程被唤醒（或打断，或超时）去重新竞争lock锁</li><li>竞争lock锁成功后，从await后继续执行</li></ul><h3 id="模式——顺序控制"><a href="#模式——顺序控制" class="headerlink" title="模式——顺序控制"></a>模式——顺序控制</h3><p><strong>固定运行顺序</strong></p><p>synchronized+wait+notify（notifyAll）</p><p>ReentrantLock+condition+await+signal（signalAll）</p><p>LockSupport+park+unpark</p><h2 id="7-共享模型之内存"><a href="#7-共享模型之内存" class="headerlink" title="7. 共享模型之内存"></a>7. 共享模型之内存</h2><blockquote><p>共享变量在多线程间的【可见性】问题与多条指令执行时的【有序性】问题</p></blockquote><h3 id="java内存模型"><a href="#java内存模型" class="headerlink" title="java内存模型"></a>java内存模型</h3><blockquote><p>JMM即（java memory model），它定义了主存，工作内存抽象概念，底层对应着CPU寄存器，缓存，硬件内存，CPU指令优化等</p></blockquote><p>JMM体现在以下几个方面</p><ul><li>原子性==保证指令不会受到线程上下文切换的影响</li><li>可见性==保证指令不会受CPU缓存的影响</li><li>有序性==保证指令不会受CPU指令并行优化的影响</li></ul><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p><strong>退不出去的循环</strong></p><p>先来看一个现象，main 线程对 run 变量的修改对于 t 线程不可见，导致了 t 线程无法停止：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">boolean</span> run <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span> <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// ....</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> run <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 线程t不会如预想的停下来</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>初始状态下，t线程刚开始从主内存中读取了run的值到工作内存</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201107204134.png"></p></li><li><p>因为 t 线程要频繁从主内存中读取 run 的值，<strong>JIT 编译器会将 run 的值缓存至自己工作内存中的高速缓存中，减少对主存中 run 的访问，提高效率</strong></p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201107204229.png"></p></li><li><p>1 秒之后，main 线程修改了 run 的值，并同步至主存，<strong>而 t 是从自己工作内存中的高速缓存中读取这个变量</strong></p><p><strong>的值</strong>，结果永远是旧值</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201107204324.png"></p></li></ul><p><strong>解决办法：volatile关键字</strong></p><blockquote><p>它可以用来修饰成员变量和静态成员变量，他可以<strong>避免线程从自己的工作缓存中查找变量的值，必须到主存中获取它的值</strong>，线程操作 volatile 变量都是直接操作主存</p></blockquote><hr><h3 id="可见性-vs-原子性"><a href="#可见性-vs-原子性" class="headerlink" title="可见性 vs 原子性"></a>可见性 vs 原子性</h3><blockquote><p>一个线程对volatile变量的修改对另一个线程可见，但是不能保证原子性，<strong>仅用在一个写线程，多个读线程的情况下</strong></p></blockquote><p>所以用volatile去处理原子性问题是不正确的！！！！</p><p><strong>注意的一点：</strong></p><p>synchronized 既可以保证原子性，又可以保证可见性，但是缺点是synchronized属于重量级操作，性能相对更低。</p><hr><h3 id="模式——两阶段终止模式"><a href="#模式——两阶段终止模式" class="headerlink" title="模式——两阶段终止模式"></a>模式——两阶段终止模式</h3><blockquote><p>用volatile 重写这个模式</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * TODO: 更改两阶段终止模式===volatile *           * @author Zhang Hao yu * @date 2020/11/8 14:32 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">"c.TwoPhaseTermination"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TwoPhaseTermination</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**监控线程*/</span>    <span class="token keyword">private</span> <span class="token class-name">Thread</span> monitorThread<span class="token punctuation">;</span>    <span class="token comment">/**用于控制线程继续工作*/</span>    <span class="token keyword">volatile</span> <span class="token keyword">private</span> <span class="token keyword">boolean</span> stop <span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">/** TODO: 停止监控线程     * @author ZhangHaoyu     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 设置停止标记为真</span>        stop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        monitorThread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** TODO: 启动监控线程     * @author ZhangHaoyu     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        monitorThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stop<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"执行关闭资源等操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"执行监控记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"打断线程执行的操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"monitor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        monitorThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>缺点</strong></p><p>当多个线程或本线程同时做了start操作的时候，会创建多个线程，这很浪费，我们只需要一个就够了。</p><hr><h3 id="模式——Balking（犹豫）"><a href="#模式——Balking（犹豫）" class="headerlink" title="模式——Balking（犹豫）"></a>模式——Balking（犹豫）</h3><blockquote><p>犹豫模式在一个线程发现另一个线程或本地线程做了某一件相同的事情，那么本地线程就无需再做了，直接结束返回</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>study<span class="token punctuation">.</span>n9</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token comment">/** * TODO: 更改两阶段终止模式===volatile * * @author Zhang Hao yu * @date 2020/11/8 14:32 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">"c.TwoPhaseTermination"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TwoPhaseTermination</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**监控线程*/</span>    <span class="token keyword">private</span> <span class="token class-name">Thread</span> monitorThread<span class="token punctuation">;</span>    <span class="token comment">/**用于控制线程继续工作*/</span>    <span class="token keyword">volatile</span> <span class="token keyword">private</span> <span class="token keyword">boolean</span> stop <span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">/**犹豫模式：判断是否执行过start方法，如果执行过，就不让他再次执行了*/</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> starting <span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">/** TODO: 停止监控线程     * @author ZhangHaoyu     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 设置停止标记为真</span>        stop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        monitorThread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** TODO: 启动监控线程     * @author ZhangHaoyu     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">/*         这里用双重if来减少线程获取锁的频率         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>starting<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>starting<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 设置启动标记为正在执行</span>            starting <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        monitorThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stop<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"执行关闭资源等操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    starting <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"执行监控记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"打断线程执行的操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"monitor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        monitorThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里我们通过犹豫模式，可以解决这类问题。</p><hr><p><strong>应用场景</strong></p><p>一般我们把这个模式运用在web环境下，当前端发过来多个请求，tomcat就需要去线程池中使用线程去处理，我们就需要考虑到synchronized的问题了。当前端页面多次点击按钮调用 start 时，应该判断监控线程是否已经启动。</p><p>它还经常用来实现线程安全的单例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> INSTANCE <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>INSTANCE <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>      INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>对比保护性暂停模式</strong>：保护性暂停模式用在一个线程等待另一个线程的执行结果，当条件不满足时线程等待。</p><hr><h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><blockquote><p>JVM会在不影响正确性的前提下，调整语句的执行顺序</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>j <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>可以是先给 i 赋值，再给 j 赋值    也可以是先给 j 赋值，再给 i 赋值；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>i和j的赋值操作顺序，对于单线程来说，对最终的结果是不会产生影响的，这种特性就叫做【<strong>指令重排</strong>】</p><blockquote><p>为何要这么做？指令重排的优化</p></blockquote><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201108155042.png" alt="参考黑马的例子"></p><p><strong>优化</strong></p><p>事实上，现代处理器会设计为一个时钟周期完成一条执行时间最长的 CPU 指令。为什么这么做呢？可以想到指令还可以再划分成一个个更小的阶段，例如，每条指令都可以分为： <strong>取指令</strong> - <strong>指令译码</strong> - <strong>执行指令</strong> - <strong>内存访问</strong> - <strong>数据写回</strong> 这 5 个阶段</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201108155248.png"></p><blockquote><p><strong>术语参考：</strong></p><ul><li>instruction fetch (IF)</li><li>instruction decode (ID)</li><li>execute (EX)</li><li>memory access (MEM)</li><li>register write back (WB)</li></ul></blockquote><p>在不改变程序结果的前提下，这些指令的各个阶段可以通过<strong>重排序</strong>和<strong>组合</strong>来实现<strong>指令级并行</strong>，这一技术在 80年代中叶到 90年代中叶占据了计算架构的重要地位。</p><blockquote><p>提示：</p><p>分阶段，分工是提升效率的关键！</p></blockquote><p>指令重排的前提就是<strong>重排的指令不影响结果</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 可以重排的例子</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 指令1</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// 指令2</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> a <span class="token operator">+</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不能重排的例子</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 指令1</span><span class="token keyword">int</span> b <span class="token operator">=</span> a <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 指令2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="一种情况"><a href="#一种情况" class="headerlink" title="一种情况"></a>一种情况</h4><p><strong>诡异的结果</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> ready <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">// 线程1 执行此方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actor1</span><span class="token punctuation">(</span><span class="token class-name">I_Result</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ready<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> r<span class="token punctuation">.</span>r1 <span class="token operator">=</span> num <span class="token operator">+</span> num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> r<span class="token punctuation">.</span>r1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 线程2 执行此方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actor2</span><span class="token punctuation">(</span><span class="token class-name">I_Result</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> ready <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>I_Result 是一个对象，有一个属性 r1 用来保存结果，问，可能的结果有几种？</p><p>有同学这么分析</p><p>情况1：线程1 先执行，这时 ready = false，所以进入 else 分支结果为 1</p><p>情况2：线程2 先执行 num = 2，但没来得及执行 ready = true，线程1 执行，还是进入 else 分支，结果为1</p><p>情况3：线程2 执行到 ready = true，线程1 执行，这回进入 if 分支，结果为 4（因为 num 已经执行过了）</p><p><strong>情况4</strong>：结果还有可能是 0 ！！！！！！！！</p><p>这种情况下是：线程2 执行 ready = true，切换到线程1，进入 if 分支，相加为 0，再切回线程2 执行 num = 2</p><p><strong>这种现象就叫做指令重排</strong>，是 JIT 编译器在运行时的一些优化，这个现象需要通过大量测试才能复现。</p><blockquote><p>解决办法：</p><p>在ready变量前加上volatile关键字</p><p><strong>因为volatile 可以防止在他之前的代码被指令重排！</strong></p></blockquote><hr><h3 id="volatile-原理"><a href="#volatile-原理" class="headerlink" title="volatile 原理"></a>volatile 原理</h3><p>volatile的底层实现原理是内存屏障，Memory Barrier（Memory Fence）</p><ul><li>对volatile变量的写指令后会加入<strong>写屏障</strong></li><li>对volatile变量的读指令前会加入<strong>读屏障</strong></li></ul><h4 id="如何保证可见性？"><a href="#如何保证可见性？" class="headerlink" title="如何保证可见性？"></a>如何保证可见性？</h4><ul><li><p>写屏障【sfence】保证<strong>在该屏障之前的，对共享变量的改动，都同步到主存当中</strong></p></li><li><pre><code class="java">public void actor2(I_Result r) &#123; num = 2; ready = true; // ready 是 volatile 赋值带写屏障 // 写屏障&#125;<pre class="line-numbers language-none"><code class="language-none">- 读屏障【lfence】保证**在该屏障之后，对共享变量的读取，加载的是主存中最新数据**- &#96;&#96;&#96;java  public void actor1(I_Result r) &#123;   &#x2F;&#x2F; 读屏障   &#x2F;&#x2F; ready 是 volatile 读取值带读屏障   if(ready) &#123;   r.r1 &#x3D; num + num;   &#125; else &#123;   r.r1 &#x3D; 1;   &#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>![](https://gitee.com/zhang_hao_yu123/images/raw/master/20201108162528.png)</code></pre></li></ul><hr><h4 id="如何保证有序性？"><a href="#如何保证有序性？" class="headerlink" title="如何保证有序性？"></a>如何保证有序性？</h4><ul><li>写屏障会确保指令重排序时，不会将写屏障之前的代码排在写屏障之后</li><li>读屏障会确保指令重排序时，不会将读屏障之后的代码排在读屏障之前</li></ul><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201108165137.png"></p><blockquote><p>不能解决指令的交错，<strong>即不能保证原子性</strong></p></blockquote><ul><li>写屏障仅仅保证之后的读操作能够读到最新的结果，但不能保证读操作在写屏障之前</li><li>有序性的保证也只是保证了本线程内相关代码不被重排序</li></ul><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201108165342.png"></p><p>t2线程读取操作发生在t1线程写入主存之前，这样就证明了不能保证原子性</p><hr><h4 id="dcl问题（double-checked-locking）"><a href="#dcl问题（double-checked-locking）" class="headerlink" title="dcl问题（double-checked locking）"></a>dcl问题（double-checked locking）</h4><p>以著名的 double-checked locking 单例模式为例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> INSTANCE <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// t2</span>         <span class="token comment">// 首次访问会同步，而之后的使用没有 synchronized</span>                 <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                     <span class="token keyword">if</span> <span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// t1</span>                     INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>特点：</p><ul><li>懒惰实例化</li><li>首次使用getInstance()才使用synchronized加锁，后续使用时无需加锁</li><li>有隐含的，但很关键的一点：第一个if使用了INSTANCE变量，但是在同步代码块之外，并且synchronized可以保证可见性，却不能解决指令重排</li></ul><p>getInstance的字节码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">0</span><span class="token operator">:</span> getstatic #<span class="token number">2</span> <span class="token comment">// Field INSTANCE:Lcn/itcast/n5/Singleton;</span><span class="token number">3</span><span class="token operator">:</span> ifnonnull <span class="token number">37</span><span class="token number">6</span><span class="token operator">:</span> ldc #<span class="token number">3</span> <span class="token comment">// class cn/itcast/n5/Singleton</span><span class="token number">8</span><span class="token operator">:</span> dup<span class="token number">9</span><span class="token operator">:</span> astore_0<span class="token number">10</span><span class="token operator">:</span> monitorenter<span class="token number">11</span><span class="token operator">:</span> getstatic #<span class="token number">2</span> <span class="token comment">// Field INSTANCE:Lcn/itcast/n5/Singleton;</span><span class="token number">14</span><span class="token operator">:</span> ifnonnull <span class="token number">27</span><span class="token number">17</span><span class="token operator">:</span> <span class="token keyword">new</span> #<span class="token number">3</span> <span class="token comment">// class cn/itcast/n5/Singleton</span><span class="token number">20</span><span class="token operator">:</span> dup<span class="token number">21</span><span class="token operator">:</span> invokespecial #<span class="token number">4</span> <span class="token comment">// Method "&lt;init>":()V</span><span class="token number">24</span><span class="token operator">:</span> putstatic #<span class="token number">2</span> <span class="token comment">// Field INSTANCE:Lcn/itcast/n5/Singleton;</span><span class="token number">27</span><span class="token operator">:</span> aload_0<span class="token number">28</span><span class="token operator">:</span> monitorexit<span class="token number">29</span><span class="token operator">:</span> <span class="token keyword">goto</span> <span class="token number">37</span><span class="token number">32</span><span class="token operator">:</span> astore_1<span class="token number">33</span><span class="token operator">:</span> aload_0<span class="token number">34</span><span class="token operator">:</span> monitorexit<span class="token number">35</span><span class="token operator">:</span> aload_1<span class="token number">36</span><span class="token operator">:</span> athrow<span class="token number">37</span><span class="token operator">:</span> getstatic #<span class="token number">2</span> <span class="token comment">// Field INSTANCE:Lcn/itcast/n5/Singleton;</span><span class="token number">40</span><span class="token operator">:</span> areturn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中：</p><ul><li>17 表示创建对象，将对象引用入栈   // new Singleton</li><li>20 表示复制一份对象引用   // 引用地址</li><li>21 表示利用一个对象引用，调用构造方法</li><li>24 表示利用一个对象引用，赋值给static INSTANCE</li></ul><p><strong>也许JVM会优化为，先执行24，再执行21</strong></p><p>在多线程的情况下：因为外面也有一个if调用了INSTANCE，所以可能会发生危险！！</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201108174038.png"></p><p>关键在于0：getStatic这行代码在synchronized之外，可以越过monitor读取INSTANCE变量的值</p><p>这时t1还未完全将构造方法执行完毕，如果在构造方法中要执行很多初始化操作，那么t2拿到的将会是一个未初始化完毕的实例</p><p>对INSTANCE使用volatile修饰即可，可以禁用指令重排，但要注意jdk5以上才会有效</p><hr><h4 id="dcl问题解决"><a href="#dcl问题解决" class="headerlink" title="dcl问题解决"></a>dcl问题解决</h4><blockquote><p>在INSTANCE前加上volatile</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// -------------------------------------> 加入对 INSTANCE 变量的读屏障</span><span class="token number">0</span><span class="token operator">:</span> getstatic #<span class="token number">2</span> <span class="token comment">// Field INSTANCE:Lcn/itcast/n5/Singleton;</span><span class="token number">3</span><span class="token operator">:</span> ifnonnull <span class="token number">37</span><span class="token number">6</span><span class="token operator">:</span> ldc #<span class="token number">3</span> <span class="token comment">// class cn/itcast/n5/Singleton</span><span class="token number">8</span><span class="token operator">:</span> dup<span class="token number">9</span><span class="token operator">:</span> astore_0<span class="token number">10</span><span class="token operator">:</span> monitorenter <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-></span> 保证原子性、可见性<span class="token number">11</span><span class="token operator">:</span> getstatic #<span class="token number">2</span> <span class="token comment">// Field INSTANCE:Lcn/itcast/n5/Singleton;</span><span class="token number">14</span><span class="token operator">:</span> ifnonnull <span class="token number">27</span><span class="token number">17</span><span class="token operator">:</span> <span class="token keyword">new</span> #<span class="token number">3</span> <span class="token comment">// class cn/itcast/n5/Singleton</span><span class="token number">20</span><span class="token operator">:</span> dup<span class="token number">21</span><span class="token operator">:</span> invokespecial #<span class="token number">4</span> <span class="token comment">// Method "&lt;init>":()V</span><span class="token number">24</span><span class="token operator">:</span> putstatic #<span class="token number">2</span> <span class="token comment">// Field INSTANCE:Lcn/itcast/n5/Singleton;</span><span class="token comment">// -------------------------------------> 加入对 INSTANCE 变量的写屏障</span><span class="token number">27</span><span class="token operator">:</span> aload_0<span class="token number">28</span><span class="token operator">:</span> monitorexit <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span> 保证原子性、可见性<span class="token number">29</span><span class="token operator">:</span> <span class="token keyword">goto</span> <span class="token number">37</span><span class="token number">32</span><span class="token operator">:</span> astore_1<span class="token number">33</span><span class="token operator">:</span> aload_0<span class="token number">34</span><span class="token operator">:</span> monitorexit<span class="token number">35</span><span class="token operator">:</span> aload_1<span class="token number">36</span><span class="token operator">:</span> athrow<span class="token number">37</span><span class="token operator">:</span> getstatic #<span class="token number">2</span> <span class="token comment">// Field INSTANCE:Lcn/itcast/n5/Singleton;</span><span class="token number">40</span><span class="token operator">:</span> areturn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>读写volatile变量的时候会加读写屏障，保证下面两点：</p><ul><li>可见性<ul><li>写屏障（sfence）保证在该屏障之前的t1对共享变量的改动，都同步到主存当中</li><li>而读屏障（lfence）保证在该屏障之后t2对共享变量的读取，加载的是主存中最新数据</li></ul></li><li>有序性<ul><li>写屏障会确保指令重排序时，不会将写屏障之前的代码排在写屏障之后</li><li>读屏障会确保指令重排序时，不会将读屏障之后的代码排在读屏障之前</li></ul></li><li>更底层是，读写变量时使用lock指令来控制多核cpu之间的可见性与有序性</li></ul><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201108180237.png"></p><hr><h3 id="happens-before规则"><a href="#happens-before规则" class="headerlink" title="happens-before规则"></a>happens-before规则</h3><p> 规定了 <strong>对共享变量的写操作对其他线程的读操作可见</strong>，它是可见性与有序性的一套规则总结。</p><ul><li><p>线程m 解锁之前对变量的写，对于接下来获取m锁的其他线程来说应该是读可见</p></li><li><p>线程对volatile变量的写，对接下来其他线程对该变量的读可见</p></li><li><p>线程在start之前，对变量的写，对该线程开始后对该变量的读可见</p></li><li><p>线程结束前对变量的写，对其他线程得知它结束后的读可见（比如其他线程调用 isAlive()或 join()）</p></li><li><p>线程A打断线程B前，对变量的写，对于其他线程得知B被打断后，对变量的读可见</p></li><li><p>对变量默认值（0，null，false）的写入，对于其他线程读可见</p></li><li><p>具有传递性，如果 x hb-&gt;y  y hb-&gt;z 那么 x hb-&gt;z，配合volatile的防指令重排，可以如下图所示</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201109105927.png"></p></li></ul><h3 id="单例模式线程安全问题"><a href="#单例模式线程安全问题" class="headerlink" title="单例模式线程安全问题"></a>单例模式线程安全问题</h3><p>实现1：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 问题1：为什么加 final</span><span class="token comment">// 问题2：如果实现了序列化接口, 还要做什么来防止反序列化破坏单例</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 问题3：为什么设置为私有? 是否能防止反射创建新的实例?</span>     <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>     <span class="token comment">// 问题4：这样初始化是否能保证单例对象创建时的线程安全?</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 问题5：为什么提供静态方法而不是直接将 INSTANCE 设置为 public, 说出你知道的理由</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">readResolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现2：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 问题1：枚举单例是如何限制实例个数的</span><span class="token comment">// 问题2：枚举单例在创建时是否有并发问题</span><span class="token comment">// 问题3：枚举单例能否被反射破坏单例</span><span class="token comment">// 问题4：枚举单例能否被反序列化破坏单例</span><span class="token comment">// 问题5：枚举单例属于懒汉式还是饿汉式</span><span class="token comment">// 问题6：枚举单例如果希望加入一些单例创建时的初始化逻辑该如何做</span><span class="token keyword">enum</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>  INSTANCE<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现3：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span> <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> INSTANCE <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token comment">// 分析这里的线程安全, 并说明有什么缺点</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span> INSTANCE <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>      INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现4：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span> <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 问题1：解释为什么要加 volatile ?</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> INSTANCE <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// 问题2：对比实现3, 说出这样做的意义 </span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>INSTANCE <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 问题3：为什么还要在这里加为空判断, 之前不是判断过了吗</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>INSTANCE <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// t2 </span>         <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现5：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>     <span class="token comment">// 问题1：属于懒汉式还是饿汉式</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LazyHolder</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token comment">// 问题2：在创建时是否有并发问题</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token class-name">LazyHolder</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-共享模型之无锁"><a href="#8-共享模型之无锁" class="headerlink" title="8. 共享模型之无锁"></a>8. 共享模型之无锁</h2><h3 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> amount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// 需要不断尝试，直到成功为止</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token comment">// 比如拿到了旧值 1000</span>                 <span class="token keyword">int</span> prev <span class="token operator">=</span> balance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// 在这个基础上 1000-10 = 990</span>                 <span class="token keyword">int</span> next <span class="token operator">=</span> prev <span class="token operator">-</span> amount<span class="token punctuation">;</span>                 <span class="token comment">/*                 compareAndSet 正是做这个检查，在 set 前，先比较 prev 与当前值                 - 不一致了，next 作废，返回 false 表示失败                 比如，别的线程已经做了减法，当前值已经被减成了 990                 那么本线程的这次 990 就作废了，进入 while 下次循环重试                 - 一致，以 next 设置为新值，返回 true 表示成功                 */</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>balance<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中的关键是 compareAndSet，它的简称就是 CAS （也有 Compare And Swap 的说法），它必须是原子操作。</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201113205128.png"></p><blockquote><p><strong>注意</strong>  </p><ul><li><p>其实 CAS 的底层是 lock cmpxchg 指令（X86 架构），在单核 CPU 和多核 CPU 下都能够保证【比较-交换】的原子性。</p></li><li><p>在多核状态下，某个核执行到带 lock 的指令时，CPU 会让总线锁住，当这个核把此指令执行完毕，再开启总线。这个过程中不会被线程的调度机制所打断，保证了多个线程对内存操作的准确性，是原子的。****</p></li></ul></blockquote><hr><p><strong>volatile</strong></p><p>获取共享变量时，为了保证该变量的可见性，需要使用 volatile 修饰</p><p>它可以用来修饰成员变量和静态成员变量，他可以避免线程从自己的工作缓存中查找变量的值，必须到主存中获取它的值，线程操作 volatile 变量都是直接操作主存。即一个线程对 volatile 变量的修改，对另一个线程可见。</p><blockquote><p><strong>注意</strong></p><p>volatile 仅仅保证了共享变量的可见性，让其它线程能够看到最新值，但不能解决指令交错问题（不能保证原子性）</p></blockquote><p>CAS 必须借助 volatile 才能读取到共享变量的最新值来实现【比较并交换】的效果</p><p><strong>为什么无锁效率高</strong></p><ul><li><p>无锁情况下，即使重试失败，线程始终在高速运行，没有停歇，而 synchronized 会让线程在没有获得锁的时候，发生上下文切换，进入阻塞。打个比喻</p></li><li><p>线程就好像高速跑道上的赛车，高速运行时，速度超快，一旦发生上下文切换，就好比赛车要减速、熄火，等被唤醒又得重新打火、启动、加速… 恢复到高速运行，代价比较大</p></li><li><p>但无锁情况下，因为线程要保持运行，需要额外 CPU 的支持，CPU 在这里就好比高速跑道，没有额外的跑道，线程想高速运行也无从谈起，虽然不会进入阻塞，但由于没有分到时间片，仍然会进入可运行状态，还是会导致上下文切换。</p></li></ul><p><strong>CAS</strong> <strong>的特点</strong></p><p>结合 CAS 和 volatile 可以实现无锁并发，适用于线程数少、多核 CPU 的场景下。</p><ul><li><p>CAS 是基于乐观锁的思想：最乐观的估计，不怕别的线程来修改共享变量，就算改了也没关系，我吃亏点再重试呗。</p></li><li><p>synchronized 是基于悲观锁的思想：最悲观的估计，得防着其它线程来修改共享变量，我上了锁你们都别想改，我改完了解开锁，你们才有机会。</p></li><li><p>CAS 体现的是无锁并发、无阻塞并发，请仔细体会这两句话的意思</p><ul><li>因为没有使用 synchronized，所以线程不会陷入阻塞，这是效率提升的因素之一</li><li>但如果竞争激烈，可以想到重试必然频繁发生，反而效率会受影响</li></ul></li></ul><hr><p><strong>原子整数</strong></p><p>J.U.C 并发包提供了：</p><ul><li>AtomicBoolean</li><li>AtomicInteger</li><li>AtomicLong</li></ul><hr><p><strong>原子引用</strong></p><ul><li>AtomicReference</li><li>AtomicMarkableReference</li><li>AtomicStampedReference</li></ul><hr><p><strong>ABA问题及解决</strong></p><blockquote><p>主线程仅能判断出共享变量的值与最初值 A 是否相同，不能感知到这种从 A 改为 B 又 改回 A 的情况，如果主线程希望：</p><p>只要有其它线程【动过了】共享变量，那么自己的 cas 就算失败，这时，仅比较值是不够的，需要再加一个版本号</p></blockquote><p><em>AtomicStampedReference</em></p><p> 可以给原子引用加上版本号，追踪原子引用整个的变化过程，如： A -&gt; B -&gt; A -&gt; C ，通过<strong>AtomicStampedReference</strong>，我们可以知道，引用变量中途被更改了几次。但是有时候，并不关心引用变量更改了几次，只是单纯的关心<strong>是否更改过</strong>，所以就有了<strong>AtomicMarkableReference</strong></p><hr><p><strong>原子数组</strong></p><ul><li><p>AtomicIntegerArray</p></li><li><p>AtomicLongArray</p></li><li><p>AtomicReferenceArray</p></li></ul><hr><p><strong>字段更新器</strong></p><ul><li><p>AtomicReferenceFieldUpdater // 域 字段</p></li><li><p>AtomicIntegerFieldUpdater</p></li><li><p>AtomicLongFieldUpdater</p></li></ul><h3 id="unsafe"><a href="#unsafe" class="headerlink" title="unsafe"></a>unsafe</h3><blockquote><p>Unsafe 对象提供了非常底层的，操作内存、线程的方法，Unsafe对象不能直接调用，只能通过反射获得</p></blockquote><h2 id="共享模型之不可变"><a href="#共享模型之不可变" class="headerlink" title="共享模型之不可变"></a>共享模型之不可变</h2><p><strong>不可变性</strong></p><blockquote><p>保护性copy机制，参考String</p></blockquote><p><strong>final</strong></p><ul><li><p>设置final变量的原理</p><blockquote><p>在赋值操作(putfield)后加入了写屏障，</p><p>写屏障保证了在此之前的变化都同步到主存中，并且在此之前的代码不会重排序到写屏障后面</p><p>这样就能保证其他线程读取到它的值时不会出现0的情况</p></blockquote></li><li><p>获取final变量的原理</p><blockquote><p>BIPUSH 读取其他类中的final变量，会直接复制一份放到当前的栈中，相当于在栈中访问</p><p>GETSTATIC 会去别的类中读取他们的final变量，相当于在堆中访问</p></blockquote></li></ul><p><strong>享元</strong></p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><h3 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h3><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201116171518.png"></p><h3 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h3><p><strong>线程池状态</strong></p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201116165735.png"></p><p>这些信息存储在一个原子变量ctl中，目的是将线程池状态和线程个数合二为一，这样就可以用一次cas操作进行赋值</p><h3 id="创建多少线程合适"><a href="#创建多少线程合适" class="headerlink" title="创建多少线程合适"></a>创建多少线程合适</h3><ul><li><p>cpu密集型运算</p><blockquote><p>cpu核数+1，+1保证当前线程由于页缺失故障（操作系统）或其他原因导致暂停时，额外的这个线程就能顶上去，保证cpu周期不被浪费</p></blockquote></li><li><p>I/O密集型运算</p><blockquote><p>线程数 = 核数 * 期望CPU利用率 * 总时间（CPU计算时间+等待时间）/CPU计算时间</p></blockquote></li></ul><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201116214358.png"></p><h2 id="Tomcat线程池"><a href="#Tomcat线程池" class="headerlink" title="Tomcat线程池"></a>Tomcat线程池</h2><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201117201639.png"></p><h2 id="fork-join"><a href="#fork-join" class="headerlink" title="fork/join"></a>fork/join</h2><blockquote><p>分治思想，对任务进行拆分的cpu密集型运算，</p></blockquote><h2 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h2><h3 id="AQS原理"><a href="#AQS原理" class="headerlink" title="AQS原理"></a>AQS原理</h3><blockquote><p>AbstractQueueSynchronizer，是一个阻塞式锁和相关的同步器工具的框架</p></blockquote><p>特点：</p><ul><li><p>用state属性来表示资源的状态（独占式和共享模式），子类需要定义如何维护这个状态，控制如何获取锁和释放锁</p><ul><li><p><code>getState</code>  获取state装填</p></li><li><p><code>setState</code>  设置state状态</p></li><li><p><code>compareAndSetState</code>  乐观锁机制设置state状态</p></li><li><p>独占模式是只有一个线程能够访问资源，而共享模式可以允许多个线程访问资源</p></li></ul></li><li><p>提供了基于FIFO的等待队列，类似于Monitor的EntryList</p></li><li><p>条件变量来实现的等待、唤醒机制、支持多个条件变量，类似于Monitor的WaitSet</p></li></ul><p>子类主要实现的方法：</p><ul><li><code>tryAcquire</code></li><li><code>tryRelease</code></li><li><code>tryAcquireShared</code></li><li><code>tryReleaseShared</code></li><li><code>isHeldExclusively</code></li></ul><p><strong>目标</strong></p><p>AQS要实现的功能目标</p><ul><li>阻塞版本获取锁acquire和非阻塞的版本尝试获取锁tryAcquire</li><li>获取锁超时机制</li><li>通过打断取消机制</li><li>独占机制及共享机制</li><li>条件不满足时的等待机制</li></ul><p><strong>设计</strong></p><p>AQS的基本思想很简单</p><blockquote><p>获取锁的逻辑</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>state 状态不允许获取<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>队列中还没有此线程<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        入队并阻塞    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>当前线程出队<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>释放锁的逻辑</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>state 状态允许了<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    恢复阻塞的线程<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>要点</strong></p><ul><li><p><strong>state设计</strong></p><ul><li>state使用volatile配合cas保证其修改时的原子性</li><li>state使用了32bit int来维护同步状态，因为当时使用long在很多平台下测试结果并不理想</li></ul></li><li><p><strong>阻塞恢复设计</strong></p><ul><li>使用park&amp;unpark来实现线程的暂停和恢复</li><li>park &amp;unpark是针对线程的，而不是针对同步器的，因此控制粒度更为精细</li><li>park线程还可以用interrupt实现</li></ul></li><li><p><strong>队列设计</strong></p><ul><li>使用FIFO先入先出队列，并不支持优先级队列</li><li>设计时借鉴了CLH队列，它是一种单项无锁队列</li></ul><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201119113019.png"></p><p>队列中有 head 和 tail 两个指针节点，都用 volatile 修饰配合 cas 使用，每个节点有 state 维护节点状态</p><blockquote><p>入队伪代码，只需要考虑 tail 赋值的原子性</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">do</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 原来的tail</span>    <span class="token class-name">Node</span> prev <span class="token operator">=</span> tail<span class="token punctuation">;</span>    <span class="token comment">// 用cas在原来的tail的基础上改为node</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>tail<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>出队伪代码</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// prev是上一个节点</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Node</span> prev <span class="token operator">=</span> node<span class="token punctuation">.</span>prev<span class="token punctuation">)</span><span class="token punctuation">.</span>state <span class="token operator">!=</span> 唤醒状态<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 设置头节点</span>head <span class="token operator">=</span> node<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CLH 好处：</p><ul><li><strong>无锁，使用自旋</strong></li><li><strong>快速，无阻塞</strong></li></ul></li></ul><h3 id="ReentrantLock原理"><a href="#ReentrantLock原理" class="headerlink" title="ReentrantLock原理"></a>ReentrantLock原理</h3><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201117211318.png"></p><h4 id="非公平锁实现原理"><a href="#非公平锁实现原理" class="headerlink" title="非公平锁实现原理"></a>非公平锁实现原理</h4><h5 id="加锁解锁流程"><a href="#加锁解锁流程" class="headerlink" title="加锁解锁流程"></a>加锁解锁流程</h5><p>构造器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 默认是非公平锁，NofairSync继承自AQS</span> sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>没有竞争时</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201119151112.png"></p><p>第一个竞争者出现时</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201119151130.png"></p><p>Thread-1执行了以下：</p><ol><li>CAS尝试把state由0改为1，失败</li><li>进入tryAcquire逻辑，此时state已经是1，结果任然是失败</li><li>接下来进入addWaiter逻辑，构造Node队列<ol><li>每一个node都维护一个waitStatus状态，其中0为默认正常状态</li><li>Node的创建是懒惰的</li><li>其中第一个Node被称为哑元或者哨兵，用来占位，不关联线程</li></ol></li></ol><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201119151652850.png" alt="image-20201119151652850"></p><p>当线程进入acquireQueued逻辑</p><ol><li>acquireQueued会在一个死循环中不断尝试获得锁，失败后进入park阻塞</li><li>如果自己是老二（紧挨着head），那么再次tryAcquire尝试获取锁，当然这时state仍为1，失败</li><li>进入shouldParkAfterFailedAcquire逻辑，将前驱node，即head的waitStatus改为-1，<strong>意为这个节点有责任唤醒后面的一个节点</strong>，这次返回false</li></ol><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201119152344.png"></p><ol start="4"><li>shouldParkAfterFailedAcquire执行完毕回到acquireQueued，再次tryAcquire尝试获取锁，  此时state还是1，失败</li><li>当再次进入shouldParkAfterFailedAcquire时，因为它的前驱node的waitStatus已经是-1，这次返回true</li><li>当进入parkAndCheckInterrupt，Thread-1 被park了</li></ol><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201119152619.png"></p><p>再次有多个线程经历上述过程竞争失败，变成这个样子</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201119152636.png"></p><p>Thread-0 释放锁，进入 tryRelease 流程，如果成功</p><ul><li>设置exclusiveOwnerThread为Null</li><li>state=0</li></ul><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201119152736.png"></p><p>当前队列不为 null，并且 head 的 waitStatus = -1，进入 unparkSuccessor 流程</p><p>找到队列中离 head 最近的一个 Node（没取消的），unpark 恢复其运行，本例中即为 Thread-1</p><p>回到 Thread-1 的 acquireQueued 流程</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201119153103.png"></p><p>如果加锁成功（没有竞争），会设置</p><ul><li>exclusiveOwnerThread为Thread-1，state=1</li><li>head指向刚刚Thread-1所在的node，该node清空Thread</li><li>原本的head因为从链表断开，<strong>可以被垃圾回收</strong></li></ul><p>这时候如果由其他线程竞争，（非公平的情况）</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201119153259.png"></p><p>如果被thread-4抢先</p><ul><li>thread被设置为exclusiveOwnerThread，state=1</li><li>Thread-1再次进入acquireQueued流程，获取锁失败，重新进入park阻塞</li></ul><hr><h5 id="加锁源码"><a href="#加锁源码" class="headerlink" title="加锁源码"></a>加锁源码</h5><h5 id="解锁源码"><a href="#解锁源码" class="headerlink" title="解锁源码"></a>解锁源码</h5><h4 id="可重入原理"><a href="#可重入原理" class="headerlink" title="可重入原理"></a>可重入原理</h4><h4 id="可打断原理"><a href="#可打断原理" class="headerlink" title="可打断原理"></a>可打断原理</h4><h5 id="不可打断模式"><a href="#不可打断模式" class="headerlink" title="不可打断模式"></a>不可打断模式</h5><h5 id="可打断模式"><a href="#可打断模式" class="headerlink" title="可打断模式"></a>可打断模式</h5><h4 id="公平锁实现原理"><a href="#公平锁实现原理" class="headerlink" title="公平锁实现原理"></a>公平锁实现原理</h4><h4 id="条件变量实现原理"><a href="#条件变量实现原理" class="headerlink" title="条件变量实现原理"></a>条件变量实现原理</h4><blockquote><p>每个条件变量其实就对应着一个等待队列，其实现类是 ConditionObject</p></blockquote><h5 id="await流程"><a href="#await流程" class="headerlink" title="await流程"></a>await流程</h5><p>开始 Thread-0 持有锁，调用 await，进入 ConditionObject 的 addConditionWaiter 流程</p><p>创建新的 Node 状态为 -2（Node.CONDITION），关联 Thread-0，加入等待队列尾部</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201119154940.png"></p><p>接下来进入 AQS 的 fullyRelease 流程，释放同步器上的锁</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201119155013.png"></p><p>unpark AQS 队列中的下一个节点，竞争锁，假设没有其他竞争线程，那么 Thread-1 竞争成功</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201119155032735.png"></p><p>park 阻塞 Thread-0</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201119155043919.png"></p><h5 id="signal流程"><a href="#signal流程" class="headerlink" title="signal流程"></a>signal流程</h5><p>假设 Thread-1 要来唤醒 Thread-0</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201119155129.png"></p><p>进入 ConditionObject 的 doSignal 流程，取得等待队列中第一个 Node，即 Thread-0 所在 Node</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/20201119164221.png"></p><p>执行 transferForSignal 流程，将该 Node 加入 AQS 队列尾部，将 Thread-0 的 waitStatus 改为 0，Thread-3 的</p><p>waitStatus 改为 -1</p><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201119164420461.png"></p><p>Thread-1 释放锁，进入 unlock 流程</p><h4 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h4><p><strong>ReentrantReadWriteLock</strong></p><p>当读操作远远高于写操作时，这时候使用<code>读写锁</code> 让<code>读</code>可以并发，提高性能。 类似于数据库中的 <code>select ...from ... lock in share mode</code></p><p>提供一个<code>数据容器类</code>内部分别使用读锁保护数据的<code>read()</code>方法，写锁保护数据的<code>write()</code>方法</p><ul><li>读锁和读锁之间不会阻塞</li><li>读锁和写锁之间会阻塞</li><li>写锁和写锁之间会阻塞</li></ul><h5 id="读写锁原理"><a href="#读写锁原理" class="headerlink" title="读写锁原理"></a>读写锁原理</h5><h5 id="StampedLock"><a href="#StampedLock" class="headerlink" title="StampedLock"></a>StampedLock</h5><h5 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h5><blockquote><p>限制同时访问共享资源的线程上限，信号量 </p></blockquote><h5 id="countdownLatch"><a href="#countdownLatch" class="headerlink" title="countdownLatch"></a>countdownLatch</h5><blockquote><p>用来进行线程同步写作，等待所有线程完成倒计时</p><p>其中构造函数用来初始化等待计数值，await()用来等待计数归零，countDown()用来让计数减一</p></blockquote><h4 id="线程安全的集合类"><a href="#线程安全的集合类" class="headerlink" title="线程安全的集合类"></a>线程安全的集合类</h4><p><img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201123111413273.png" alt="image-20201123111413273"></p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><blockquote><p>处理器如何实现原子操作？</p></blockquote><ol><li><p>使用<strong>总线锁</strong>保证原子性</p><p>在多个处理器处理同一块共享变量的时候，使用处理器提供的一个<strong>LOCK#信号</strong>，当一个处理器在总线上输出此信号，<strong>其他处理器的请求将被阻塞住</strong>，那么该处理器可以<strong>独享</strong>该共享内存</p></li><li><p>使用<strong>缓存锁定</strong>保证原子性</p><p>频繁使用内存会缓存在处理器中的L1、L2、L3的高速缓存中，那么原子操作可以直接在处理器内部缓存中执行，不用再声明总线锁。</p><p>所谓的“缓存锁定”：<img src="https://gitee.com/zhang_hao_yu123/images/raw/master/image-20201123152344569.png" alt="image-20201123152344569"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jvm面试题</title>
      <link href="2020/10/25/jvm-mian-shi-ti/"/>
      <url>2020/10/25/jvm-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM相关面试题"><a href="#JVM相关面试题" class="headerlink" title="JVM相关面试题"></a>JVM相关面试题</h1><h2 id="jvm的内存模型以及分区情况和作用"><a href="#jvm的内存模型以及分区情况和作用" class="headerlink" title="jvm的内存模型以及分区情况和作用"></a>jvm的内存模型以及分区情况和作用</h2><blockquote><p>jvm内存模型</p></blockquote><p>jvm内存模型分为5个部分，虚拟机栈，本地方法栈，程序计数器，堆，方法区。其中虚拟机栈，本地方法栈，程序计数器是线程私有的；堆和方法区是线程共享的。</p><p>首先是程序计数器，是用来记录执行引擎下一条执行的字节码地址的，因为仅仅存一个地址，所以不存在OOM和GC的情况，它的生命周期是贯穿整个虚拟机的一生。当他执行本地方法的时候，记录的值是undifined，否则他就是记录着下一条执行的字节码地址。防止线程在被再次调度后不知道上次执行到哪里了。</p><p>第二是虚拟机栈，虚拟机栈是线程私有的，当要执行某个方法的时候，就会把这个方法压入栈中，成为一个栈帧，栈帧中包括 局部变量表、操作数栈、动态链接、方法返回地址、其他的一些附加信息等。</p><p>局部变量表xxxxxxxxxx</p><p>第三个是本地方法栈，本地方法栈是为native方法执行服务，作用与虚拟机栈差不多相同</p><p>第四个是方法区</p><p>第五个是堆</p><blockquote><p>分区情况</p></blockquote><hr><h2 id="Java中常见的内存泄漏例子"><a href="#Java中常见的内存泄漏例子" class="headerlink" title="Java中常见的内存泄漏例子"></a>Java中常见的内存泄漏例子</h2><blockquote><p>在java中我们不能用 引用计数法的那个例子来说</p><p>对于可达性分析法：<strong>不再会被使用的对象的内存不能被回收，就是内存泄露。</strong></p></blockquote><p><strong>如果长生命周期的对象持有短生命周期的引用，那么就可能出现内存泄漏</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Simple</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> object<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//...其他代码</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的Object实例，在方法中new的时候，我们想让他的生命周期就在方法中，但是我们却发现，方法结束后被弹出栈后，object还保留着原来的引用，这个new的对象不能被及时的释放掉，这就是一种<strong>内存泄露</strong>。解决的办法就是把object变成方法中的局部变量，或者最终设置为null（如下）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Simple</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> object<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//...其他代码</span>        object <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种设为NULL的是很有必要的操作。</p><blockquote><p>静态集合</p></blockquote><p>像HashMap、Vector、List等的使用最容易出现内存泄漏，这些静态变量的生命周期和应用程序一致，所有的对象Object也不能被释放</p><blockquote><p>各种连接对象（IO流对象、数据库连接对象、网络连接对象）未关闭</p></blockquote><p>IO流对象、数据库连接对象、网络连接对象属于物理连接，和硬盘或网络连接，不使用的时候一定要关闭</p><blockquote><p>监听器的使用</p></blockquote><p>释放对象时，没有删除对应的监听器</p><hr><h2 id="什么是GC？为什么要GC？"><a href="#什么是GC？为什么要GC？" class="headerlink" title="什么是GC？为什么要GC？"></a>什么是GC？为什么要GC？</h2><blockquote><p>GC是垃圾回收的意思，那些不再使用的对象，或者可达性分析法无法到达的对象就是垃圾，java通过gc功能自动监测对象是否达到了自动回收内存的目的，java中没有显示释放内存的方法。</p></blockquote><hr><h2 id="说说java中的垃圾回收机制"><a href="#说说java中的垃圾回收机制" class="headerlink" title="说说java中的垃圾回收机制"></a>说说java中的垃圾回收机制</h2><p>在jvm中，有一个垃圾回收线程，它是低优先级的，在正常情况下是不会执行的，只有在虚拟机空间或者当前堆内存不足时，才会触发执行，扫描没有被任何引用的对象，把他们添加到要回收的集合中，进行回收。</p><hr><h2 id="如何判断一个对象存活？"><a href="#如何判断一个对象存活？" class="headerlink" title="如何判断一个对象存活？"></a>如何判断一个对象存活？</h2><blockquote><p>引用计数法</p></blockquote><p>每个对象都维护一个引用计数器，当有别的东西引用他的时候，就让引用计数器+1，当GC的时候，如果一个对象的引用计数器为0，可以说明这个对象是没有被引用的，将会被垃圾回收。不过引用计数法在java中有一个很大的问题：<strong>循环引用</strong>，  比如，A作为根节点，A引用了B，B引用了C，C引用了B，当A切断与B的引用的时候，B的引用计数器为1，C的引用计数器为1，他们两个相互引用，使得GC不能够回收他们。</p><blockquote><p>可达性分析法</p></blockquote><p>核心思想是，从一个根节点开始，向下遍历，如果一个对象到根节点没有任何引用链链接，那么就说明该对象不可用。</p><hr><h3 id="可作为GC-root的有？"><a href="#可作为GC-root的有？" class="headerlink" title="可作为GC root的有？"></a>可作为GC root的有？</h3><ul><li>xxxxxxxxxxxxxxxxx</li></ul><hr><h3 id="对象的finalization机制？"><a href="#对象的finalization机制？" class="headerlink" title="对象的finalization机制？"></a>对象的finalization机制？</h3><p>对象被当作垃圾回收的时候，不会立即回收，如果要回收还需要经历<strong>两次标记</strong>，第一次是从根节点没有引用链可以指向它的时候，并且会进行一次筛选，条件是是否有必要执行finalize()方法，当对象没有重写finalize()方法或者已经被调用过一次了，那么就会被认为是没必要的。如果有必要执行，就放到一个F-Queue队列中，jvm会触发一个Finalize线程去执行，这是低优先级的线程。但是如果finalize()执行的过慢或者发生死锁导致F-Queue队列一直处于等待状态，导致内存回收系统的崩溃。GC就会堆F-Queue中的对象进行第二次标记，这时候，对象会被移除F-Queue，等待回收。</p><hr><h2 id="串行收集器和吞吐量收集器的区别是？"><a href="#串行收集器和吞吐量收集器的区别是？" class="headerlink" title="串行收集器和吞吐量收集器的区别是？"></a>串行收集器和吞吐量收集器的区别是？</h2><p>xxx</p><hr><h2 id="java内存分配与回收策略-以及Minor-GC和Major-GC"><a href="#java内存分配与回收策略-以及Minor-GC和Major-GC" class="headerlink" title="java内存分配与回收策略 以及Minor GC和Major GC"></a>java内存分配与回收策略 以及Minor GC和Major GC</h2><blockquote><p>内存分配</p></blockquote><p>对象首先被分配到Eden区，如果是大对象，会直接放入老年代；</p>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM09</title>
      <link href="2020/10/22/jvm09/"/>
      <url>2020/10/22/jvm09/</url>
      
        <content type="html"><![CDATA[<h1 id="垃圾回收器相关"><a href="#垃圾回收器相关" class="headerlink" title="垃圾回收器相关"></a>垃圾回收器相关</h1><h2 id="GC分类与性能指标"><a href="#GC分类与性能指标" class="headerlink" title="GC分类与性能指标"></a>GC分类与性能指标</h2><blockquote><p>分类</p></blockquote><ul><li>线程数  串行和并行</li><li>工作模式   并发式垃圾回收  和  独占式垃圾回收</li><li>碎片处理方式<ul><li>压缩式，分配对象用指针碰撞</li><li>非压缩式，分配对象用空闲列表</li></ul></li><li>工作的内存区间<ul><li>年轻代垃圾收集器</li><li>老年代垃圾收集器</li></ul></li></ul><blockquote><p>性能指标</p></blockquote><ul><li><strong>吞吐量：运行用户代码的时间占总运行时间的比例</strong><ul><li>总运行时间：程序的运行时间+内存回收的时间</li></ul></li><li>垃圾收集开销：吞吐量的补数</li><li><strong><font color = "red">暂停时间：执行GC时，程序的工作线程被暂停的时间</font></strong></li><li>收集频率：相对于应用程序的执行，收集操作发生的频率</li><li><strong>内存占用：java堆区所占的内存大小</strong></li><li>快速：一个对象从诞生到被回收所经历的时间</li></ul><p><img src="https://img01.sogoucdn.com/app/a/100520146/29eadcb517bddc8e7d8bf9665679ed6a"></p><h2 id="不同的垃圾回收器概述-面试会问"><a href="#不同的垃圾回收器概述-面试会问" class="headerlink" title="不同的垃圾回收器概述(面试会问)"></a>不同的垃圾回收器概述(面试会问)</h2><p><img src="https://img03.sogoucdn.com/app/a/100520146/e71ca3bc35fec312db08fc9f227cb00b" alt="UTOOLS1603418671399.png"></p><ul><li>串行回收： Serial、Serial old</li><li>并行回收：ParNew、Parallel、Scavenge、Parallel old</li><li>并发回收：CMS、G1</li></ul><blockquote><p>垃圾回收器的组合关系</p></blockquote><p><img src="https://img03.sogoucdn.com/app/a/100520146/003f4646493bfd2852b7bd4a3842034b" alt="分代垃圾收集器"></p><p><img src="https://img04.sogoucdn.com/app/a/100520146/f27f9f03ee4bc028e9308f08e64d5f4b" alt="垃圾收集器的组合关系"></p><h2 id="Serial回收器：串行回收"><a href="#Serial回收器：串行回收" class="headerlink" title="Serial回收器：串行回收"></a>Serial回收器：串行回收</h2><blockquote><p>最基本最悠久的<strong>单cpu</strong>垃圾收集器</p></blockquote><ul><li><p>采用 <strong>复制算法</strong>、<strong>串行回收</strong>和 <strong>STW机制的方式执行内存回收</strong></p></li><li><p>除了年轻代以外，Serial收集器还提供用于执行老年代垃圾收集的Serial Old收集器。<strong>Serial Old收集器同样也采用了串行回收和STW机制，只不过内存回收算法使用的是标记-压缩算法。</strong></p><ul><li>Serial Old是运行在Client模式下默认的老年代的垃圾回收器</li><li>Serial Old在Server模式下主要有两个用途：①与新生代的Parallel Scavenge配合使用。②作为老年代CMS收集器的后备垃圾收集方案</li></ul></li><li><p><strong>是个单线程垃圾收集器</strong></p></li></ul><blockquote><p>优势：</p></blockquote><ul><li><p><strong>简单而高效</strong>，对于限定单个cpu的环境来说，Serial收集器由于没有线程交互的开销，专心做GC自然可以获得最高的效率</p></li><li><p>在用户的桌面引用场景中可以用串行回收器</p></li><li><p>使用-XX:+UseSerialGC 参数可以指定年轻代和老年代都使用串行收集器</p><ul><li>等价于新生代用 Serial GC 老年代用 Serial Old GC</li></ul></li></ul><h2 id="ParNew回收器：并行回收"><a href="#ParNew回收器：并行回收" class="headerlink" title="ParNew回收器：并行回收"></a>ParNew回收器：并行回收</h2><blockquote><p>ParNew收集器除了采用 <strong>并行回收</strong>的方式执行内存回收外，几乎跟Serial GC没有任何区别。</p><p>ParNew<strong>在年轻代中同样采用复制算法，STW机制</strong></p><p>ParNew是很多JVM运行在Server模式下新生代的默认垃圾回收器</p></blockquote><ul><li>在多cpu的环境下，ParNew可以更快速地完成垃圾收集，提升程序的吞吐量</li><li>除了Serial外还能和CMS进行配合使用</li></ul><h2 id="Parallel回收器：吞吐量优先"><a href="#Parallel回收器：吞吐量优先" class="headerlink" title="Parallel回收器：吞吐量优先"></a>Parallel回收器：吞吐量优先</h2><blockquote><p>hotspot中收集新生代的除了ParNew GC是基于并行回收的之外，Parallel Scavenge GC同样 <strong>采用了复制算法，并行回收和STW机制</strong></p><p>jdk8中默认的垃圾收集器</p></blockquote><ul><li><strong>Parallel的出现是否多此一举？</strong><ul><li>Parallel scavenge GC收集器的目标是<strong>达到一个可控制的吞吐量</strong>，是一个吞吐量优先的垃圾收集器</li><li><strong>自适应调节策略</strong>也是Parallel Scavenge和ParNew不一样的地方</li></ul></li><li>高吞吐量则可以高效率地利用cpu时间，尽快完成程序的运算任务，主要要<strong>适合在后台运算而不需要太多交互的任务。</strong>因此，常见在服务器环境中使用。例如批量处理，订单处理，工资支付，科学计算的应用程序。</li><li>Parallel Old GC用来代替老年代的Serial Old GC</li><li>Parallel Old收集器采用了 <strong>标记-压缩算法</strong>，但同样也是<strong>基于 并行回收和STW机制的</strong></li></ul><blockquote><p>参数设置</p></blockquote><ul><li>-XX:+UseParallelGC  手动指定年轻代 ParallelGC</li><li>-XX:+UseParallelOldGC  手动指定老年代ParallelOldGC</li><li>-XX:+UseSerialGC  表明新生代使用Serial GC，老年代用Serial Old GC</li><li>-XX:+UseParNewGC  表明新生代使用ParNew GC</li><li>-XX:ParallelGCThreads 设置年轻代并行收集器的线程数<ul><li>在默认情况下，当cpu数量小于8个，ParallelGCThreads的值等于CPU数量</li><li>当CPU数量大于8个，ParallelGCThreads的值等于3+[5*CPU_Count]/8</li></ul></li><li><img src="https://img02.sogoucdn.com/app/a/100520146/6736c6f7de5b3279191bf05fd9f6f725" alt="UTOOLS1603443657076.png"></li></ul><h2 id="CMS回收器：低延迟"><a href="#CMS回收器：低延迟" class="headerlink" title="CMS回收器：低延迟"></a>CMS回收器：低延迟</h2><blockquote><p>第一款 <strong>并发收集器</strong>，第一次让垃圾收集线程和用户线程同时工作。</p><p>GC算法采用 <strong>标记-清除算法</strong>，也会STW</p></blockquote><ul><li>只能与ParNew和Parallel二选一配合工作</li><li>jdk14CMS没了</li></ul><blockquote><p>工作原理</p></blockquote><p><img src="https://img04.sogoucdn.com/app/a/100520146/a72dd7841db48c6357f7da617d670ba5"></p><ul><li>初始标记：<strong>仅仅标记出GC Roots能够直接关联到的对象</strong>，这里的执行速度非常快，STW很短暂</li><li>并发标记：从GC Roots的直接关联对象开始遍历整个对像图的过程，这个过程耗时较长，但是<strong>不需要停顿用户线程</strong>，可以与垃圾收集线程一起并发运行</li><li>重新标记： <strong>修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录</strong>，这个阶段的停顿时间通常会比初始标记阶段稍长一些，但也远比并发标记阶段的时间短</li><li>并发清除：此阶段<strong>清理删除掉标记阶段判断的已经死亡的对象，释放内存空间</strong>。不需要移动存活对象，可以与用户线程同时并发执行</li></ul><blockquote><p>特点</p></blockquote><ul><li><p><strong>由于最耗费时间的并发标记与并发清除阶段都不需要暂停工作，所以整体的回收是低停顿的。</strong></p></li><li><p>因为用户线程和GC线程是并行的，所以<strong>CMS回收的时候还应该确保程序用户线程有足够的内存可用</strong>，所以CMS的GC机制是<strong>当堆内存使用率达到了一个阈值，就会开始GC</strong>。</p></li><li><p>如果在GC的时候，用户线程把内存弄不足了，就会启动<strong>Serial Old 收集器来进行老年代</strong>的GC，<strong>停顿时间就会变长</strong></p></li></ul><blockquote><p>采用标记-清除算法，，使用空闲列表</p></blockquote><p>因为用户线程在工作中，所以不能使用指针碰撞和标记压缩算法。。</p><blockquote><p>CMS的优点：</p></blockquote><ol><li>并发收集</li><li>低延迟</li></ol><blockquote><p>CMS的弊端</p></blockquote><ul><li><p>会产生内存碎片</p></li><li><p>CMS收集器对cpu资源非常敏感</p><blockquote><p>在并发阶段，它虽然不会导致用户停顿，但是会因为占用了一部分线程而导致应用程序变慢，总吞吐量降低</p></blockquote></li><li><p>CMS收集器无法处理<strong>浮动垃圾</strong></p><blockquote><p><strong>在并发标记阶段如果产生新的垃圾对象，CMS将无法对这些垃圾对象进行标记，最终会导致这些新产生的垃圾对象没有被及时回收，</strong>从而只能在下一次执行GC时释放这些之前未被回收的内存空间。</p><p>浮动垃圾：重新标记修正的那些</p></blockquote></li></ul><blockquote><p>设置参数</p></blockquote><ul><li>-XX:+UseConcMarkSweepGC 手动指定CMS收集器执行内存回收任务（ParNew收集年轻代 CMS收集老年代，Serial Old作为备用收集老年代）</li><li>。。。。。。</li></ul><blockquote><p>小结</p></blockquote><p>最小化使用内存和最小化并行开销  Serial GC</p><p>最大化应用程序吞吐量  Parallel GC</p><p>最小化GC的中断或停顿时间  CMS GC</p><h2 id="G1回收器：区域化分代式"><a href="#G1回收器：区域化分代式" class="headerlink" title="G1回收器：区域化分代式"></a>G1回收器：区域化分代式</h2><blockquote><p>官方给G1设定的目标是<strong>在延迟可控的情况下获得尽可能高的吞吐量</strong>，也就是变成全能的收集器。</p></blockquote><ol><li>结构：<ul><li>G1是一个并行回收器，它把堆内存分割为很多不相关的区域(Region)<strong>并且是物理上不连续的</strong>。使用不同的Region来表示Eden、幸存者0区、幸存者1区，老年代等。</li><li>G1 GC有计划地规避在整个Java堆中进行全区域的垃圾收集。G1跟踪各个Region里的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，<strong>每次根据允许的收集时间，优先回收价值最大的Region</strong></li><li>由于这种方式的侧重点在于回收垃圾最大量的区间，所以我们给G1一个名字：<strong>垃圾优先</strong></li></ul></li><li><img src="https://img02.sogoucdn.com/app/a/100520146/a5d0da53fa075959d95fe3e97b78c0ec" alt="UTOOLS1603456064907.png"></li></ol><blockquote><p>G1 的特点优势</p></blockquote><ul><li><p>并行与并发</p><ul><li>并行性：G1在回收期间，可以有多个GC线程同时工作，有效利用多核计算能力。用户线程会STW</li><li>并发性：G1拥有与应用程序交替执行的能力，部分工作可以和应用程序同时执行，因此，一般来说，不会再整个回收阶段发生完全阻塞应用程序的情况</li></ul></li><li><p>分代收集</p><ul><li>G1仍然属于分代型垃圾回收器，会区分年轻代和老年代，年轻代依然有Eden和Survivor区。从堆结构上看，他们可以是不连续的，没有固定的大小，没有固定的数量。</li><li>将堆空间分为若干个区域，这些区域中包含了逻辑上的年轻代和老年代</li><li>和之前的各类回收器不同，它同时 <strong>兼顾年轻代和老年代</strong></li></ul></li><li><p>空间整合</p><ul><li>CMS：“标记-清除”算法、内存碎片、若干次GC后进行以此碎片整理</li><li>G1将内存划分为一个个的region。内存的回收是以region作为基本单位的。<strong>Region之间是复制算法</strong>，整体上可以看作是标记-压缩算法，两个算法都能避免内存碎片。<strong>不会因为分配大对象的时候找不到连续内存空间而提前触发下一次GC</strong>。当java堆特别大的时候，G1优势更加明显</li></ul></li><li><p>可预测的停顿时间模型</p><blockquote><p>在追求低停顿的情况下，，还可以<strong>建立一个能够让使用者明确指定一个长度为M毫秒的时间片段内，消耗在GC上的时间不能超过N毫秒</strong></p></blockquote><ul><li>维护一个列表，跟踪各个Region里面的垃圾价值大小，优先回收价值最大的Region提前GC</li></ul></li></ul><blockquote><p>G1的不足</p></blockquote><ul><li><p>G1比传统的垃圾回收器有更高的内存占用，额外负载更多</p></li><li><p>从经验上来说，在小内存应用上CMS的表现大概率会优于G1，而G1在大内存应用上则会发挥其优势。平衡点在6-8GB之间。</p></li></ul><blockquote><p>G1的参数设置</p></blockquote><p><img src="https://img03.sogoucdn.com/app/a/100520146/3685edf0178147da780297b6fbb557f6"></p><blockquote><p>三步走</p></blockquote><ul><li>开启G1垃圾收集器</li><li>设置堆的最大内存</li><li>设置最大停顿时间</li></ul><blockquote><p>使用场景</p></blockquote><ul><li>面向服务端应用，针对具有大内存，多处理器的机器</li><li>最主要的应用是需要低GC延迟，并具有大堆的应用程序提供解决方案</li><li>用来替换掉CMS收集器：<ol><li>超过50%的java堆被活动数据占用</li><li>对象分配频率或年代提升频率变化很大</li><li>GC停顿时间过长（0.5-1s）</li></ol></li><li>Hotspot垃圾收集器里，除了G1外，其他的垃圾收集器使用内置的JVM线程执行GC的多线程操作，而G1 GC可以采用应用程序线程承担后台运行的GC工作，即当JVM的GC线程处理速度慢时，系统会调用应用程序线程帮助加速垃圾回收过程。</li></ul><h3 id="分区Region：化整为零"><a href="#分区Region：化整为零" class="headerlink" title="分区Region：化整为零"></a>分区Region：化整为零</h3><p><img src="https://img04.sogoucdn.com/app/a/100520146/bbf6b356dd99b1bddb7094a66a55f9be"></p><ul><li>一个region有可能属于Eden，Survivor 或者Old/Tenured内存区域。但是一个region只可能属于一个角色。</li><li>G1增加了一种新的内存区域，叫做Humongous内存区域，如图中的H块，<strong>主要用于存储大对象</strong>，如果超过<strong>1.5</strong>个region，就放到H</li></ul><blockquote><p>region的GC</p></blockquote><p>当eden区满了，会执行GC操作，最终eden区会被清空，变成白色，放入一个空闲列表中，就可以用来存放任何类型的数据，拥有自适应的能力。</p><blockquote><p>为什么要设置大对象H区？</p></blockquote><p>对于堆中的大对象，默认会直接被分配到老年代，<strong>但是如果它是一个短期存在的大对象</strong>，就会对垃圾收集器造成负面影响。为了解决这个问题，G1专门划分了一个Humongous区，用来存放大对象。<strong>如果H区装不下，那么G1会寻找连续的H区来储存</strong>。为了能找到连续的H区，有时候不得不启动Full GC。G1的大多数行为都把H区作为老年代的一部分来看待。</p><h3 id="G1回收器垃圾回收过程"><a href="#G1回收器垃圾回收过程" class="headerlink" title="G1回收器垃圾回收过程"></a>G1回收器垃圾回收过程</h3><blockquote><p>G1的垃圾回收过程有三个环节：</p><ul><li>年轻代GC （Young GC）</li><li>老年代并发标记过程（Concurrent Marking）</li><li>混合回收（Mixed GC）</li><li>（如果需要，单线程、独占式、高强度的Full GC还是继续存在的。它针对GC的评估失败提供了一种失败保护机制，即强力回收）具体的跟CMS的差不多</li></ul></blockquote><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201024104256465.png"></p><p>①年轻代的<strong>Eden区用尽</strong>开始年轻代GC：这是一个<strong>并行的独占式</strong>收集器。在年轻代回收器，G1 GC暂停所有应用程序线程，启动多线程执行年轻代回收。然后<strong>从年轻代区间移动存活对象到Survivor区间或者老年代区间，也有可能是两个区间都会涉及</strong>。</p><p>②当堆使用达到阈值（默认45%），开始老年代并发标记过程</p><p>③标记完成马上开始混合回收过程。<font color="red">G1把老年区存活下来的对象移动到空闲区间，这些空闲区间就会变成老年区。G1的老年代回收器不需要整个老年代被回收，一次只需要扫描/回收一小部分老年代的Region就可以了</font>。老年代和年轻代是一起被回收的，所有叫混合回收。</p><h3 id="记忆集和写屏障"><a href="#记忆集和写屏障" class="headerlink" title="记忆集和写屏障"></a>记忆集和写屏障</h3><blockquote><p>解决跨代引用和分区引用的问题。</p></blockquote><p>如果存在跨代引用，或者像G1 ZGC Partial GC等分区收集的，给每个区整一个记忆集，用来存放谁引用了这个里边的对象，可以减少遍历次数。用空间换时间。</p><h3 id="G1垃圾回收详细说明"><a href="#G1垃圾回收详细说明" class="headerlink" title="G1垃圾回收详细说明"></a>G1垃圾回收详细说明</h3><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201024134206676.png"></p><blockquote><p>年轻代</p></blockquote><ul><li><p>扫描根</p><blockquote><p>static变量指向的对象，正在执行的栈帧调用链条上的局部变量等。根引用连同RSet记录的外部引用作为扫描存活对象的入口</p></blockquote></li><li><p>更新RSet</p><blockquote><p>处理dirty card queue中的card，更新RSet</p></blockquote></li><li><p>处理RSet</p><blockquote><p>识别被老年代对象指向的Eden中的对象，这些被指向的Eden中的对象被认为是存活的对象。</p></blockquote></li><li><p>复制对象</p><blockquote><p>Eden区活下来的对象复制到Survivor区中空的内存分段，Survivor区活下来的age没有达到阈值，age++并放到空的内存分段。达到阈值，晋升到Old区空的内存分段。如果Survivor空间不够，Eden区部分数据会直接晋升到Old区空间</p></blockquote></li><li><p>处理引用</p><blockquote><p>处理 Soft，Weak，Phantom，Final，JNI Weak等引用。最终Eden区的数据为空，GC停止工作，而且目标内存中的对象都是连续存储的，没有碎片，所有复制过程可以达到内存整理的效果，减少碎片。</p></blockquote></li></ul><blockquote><p>并发标记过程</p></blockquote><ul><li>初始标记阶段：标记从根节点<strong>直接</strong>可达的对象。这个阶段是STW的，并且会触发一次年轻代 GC</li><li>根区域扫描：G1扫描Survivor区，直接可达的老年代区域对象，并标记被引用的对象。这一过程必须在young gc之前完成</li><li>并发标记：在整个堆中进行并发标记，此过程可能被young gc中断。在并发标记阶段，若发现区域对象中的所有对象都是垃圾，这个区域会被立即回收，同时并发标记阶段会计算每个区域的对象活性。</li><li>再次标记：由于用户线程持续进行，需要修正上一次的标记结果，STW性质，用的SATB算法</li><li>独占清理，计算各个区域的存活对象和GC回收比例，进行排序，识别可能混合回收的区域。为下阶段做铺垫，STW</li><li>并发清理：识别并清理完全空闲的区域</li></ul><blockquote><p>混合回收</p></blockquote><p>除了会回收整个Young Region还会回收一部分Old Region  <strong>是一部分老年代不是全部老年代</strong></p><p><img src="https://img03.sogoucdn.com/app/a/100520146/7f76e8914fd67eaa377965577b5b23a9"></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>年轻代大小</p><p>暂停时间目标不要太严苛</p><h2 id="垃圾回收器总结"><a href="#垃圾回收器总结" class="headerlink" title="垃圾回收器总结"></a>垃圾回收器总结</h2><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201025160544477.png" alt="比较"></p><h2 id="GC日志分析"><a href="#GC日志分析" class="headerlink" title="GC日志分析"></a>GC日志分析</h2><h2 id="垃圾回收器的新发展"><a href="#垃圾回收器的新发展" class="headerlink" title="垃圾回收器的新发展"></a>垃圾回收器的新发展</h2>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM08</title>
      <link href="2020/10/20/jvm08/"/>
      <url>2020/10/20/jvm08/</url>
      
        <content type="html"><![CDATA[<h1 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h1><h2 id="什么是垃圾"><a href="#什么是垃圾" class="headerlink" title="什么是垃圾"></a>什么是垃圾</h2><p><img src="https://s1.ax1x.com/2020/10/20/Bpo82t.png"></p><blockquote><p>垃圾收集的三个经典问题：</p><ul><li>哪些内存需要回收</li><li>什么时候回收</li><li>如何回收</li></ul></blockquote><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><p><img src="https://s1.ax1x.com/2020/10/20/BpTay6.png"></p><p><img src="https://s1.ax1x.com/2020/10/20/BpTsFH.png"></p><blockquote><p>什么是垃圾？</p></blockquote><p><strong>运行程序中没有任何指针指向的对象</strong></p><blockquote><p>为何要gc</p></blockquote><p><img src="https://s1.ax1x.com/2020/10/20/Bp7oDK.png"></p><h2 id="垃圾回收相关算法"><a href="#垃圾回收相关算法" class="headerlink" title="垃圾回收相关算法"></a>垃圾回收相关算法</h2><h3 id="标记阶段：引用计数法"><a href="#标记阶段：引用计数法" class="headerlink" title="标记阶段：引用计数法"></a>标记阶段：引用计数法</h3><blockquote><p><strong>死亡对象：</strong>当一个对象不被任何存活的对象所引用时，<strong>就已经宣判了死亡</strong></p><p><strong>引用计数法：</strong>对每一个对象保存一个整型的引用计数器属性，用于存放对象被引用的情况</p></blockquote><p><strong>优点</strong>：</p><ul><li>实现简单，垃圾对象便于辨识；判定率高，回收没有延迟性</li></ul><p><strong>缺点</strong>：</p><ul><li>它需要单独的字段存储计数器，增加了空间的开销</li><li>每次赋值需要更新计数器，伴随着加减法的操作，增加了时间的开销</li><li>引用计数器不能处理 <strong>循环引用的情况</strong> （a引用了b，，b引用了a，但是二者都不会被使用，所以会造成<strong>内存泄漏</strong>）</li></ul><p><img src="https://s1.ax1x.com/2020/10/21/B9wxp9.png"></p><h3 id="标记阶段：可达性分析法"><a href="#标记阶段：可达性分析法" class="headerlink" title="标记阶段：可达性分析法"></a>标记阶段：可达性分析法</h3><blockquote><p>主要是用来解决在引用计数法中的循环引用的问题，防止内存泄漏的发生。</p></blockquote><p>基本思路：</p><ul><li>可达性分析算法是以根对象集合为起始点，按照从上到下的方式 <strong>搜索被根对象集合所连接的目标对象是否可达</strong>。</li><li>使用可达性分析算法后，内存中的存活对象都会被根对象集合直接或间接链接着，搜索所走过的路径称为 <strong>引用链</strong>。</li><li>如果目标对象没有任何引用链相连，则是不可达的，就意味着该对象已经死亡，可以标记为垃圾对象。</li><li>在可达性分析算法中，只有能够被根对象集合直接或者间接链接的对象才是存活对象。</li></ul><p><img src="https://s1.ax1x.com/2020/10/21/B96mcQ.png"></p><h4 id="面试：在java语言中，谁可以作为GC-Roots"><a href="#面试：在java语言中，谁可以作为GC-Roots" class="headerlink" title="面试：在java语言中，谁可以作为GC Roots??"></a>面试：在java语言中，谁可以作为GC Roots??</h4><blockquote><ul><li>虚拟机栈中引用的对象</li><li>本地方法栈JNI引用的对象</li><li>方法区类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>所有被同步锁synchronized持有的对象</li><li>java虚拟机内部的引用</li><li>反映java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等</li><li>除了这些固定的GC Roots集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象“临时性”加入，共同构建出GC Roots集合。比如：<strong>分代收集和局部回收</strong></li></ul></blockquote><p><strong>小技巧：</strong></p><p>由于Root采用栈方式存放变量和指针，所以如果一个指针，它保存了堆内存里面的对象，但是自己又不在堆中，那么它就是一个root</p><h3 id="对象的finalization机制"><a href="#对象的finalization机制" class="headerlink" title="对象的finalization机制"></a>对象的finalization机制</h3><p><strong>finalize()方法的调用</strong></p><blockquote><p>当垃圾回收的时候，会调用垃圾的这个方法，他是父类Object的方法，我们可以重写它。<strong>用于资源释放，关闭文件，断开数据库链接，关闭套接字等等。。。。。。。。。。。。</strong></p></blockquote><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201021105110443.png" alt="image-20201021105110443"></p><p><strong>三种可能的状态</strong>：</p><ul><li><strong>可触及的</strong>，从根节点可以访问到这个对象</li><li><strong>可复活的</strong>，对象的所有引用都被释放，但是对象可能在finalize()中复活</li><li><strong>不可触及的</strong>，对象的finalize()被调用了，并且没有复活，那么就会触及到不可触及的状态，因为<strong>finalize()只会触发以此</strong></li></ul><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201021110219387.png" alt="image-20201021110219387"></p><h3 id="MAT与JProfiler的GC-root溯源"><a href="#MAT与JProfiler的GC-root溯源" class="headerlink" title="MAT与JProfiler的GC root溯源"></a>MAT与JProfiler的GC root溯源</h3><blockquote><p>略，dump文件和jprofiler的认识</p></blockquote><h3 id="清除阶段：标记清除算法"><a href="#清除阶段：标记清除算法" class="headerlink" title="清除阶段：标记清除算法"></a>清除阶段：标记清除算法</h3><blockquote><p>Mark-Sweep算法</p></blockquote><p><strong>执行过程</strong>：</p><p>当内存中的有效空间被耗尽的时候，就会停止整个程序STW，然后进行两项工作：标记，清除</p><ul><li><strong>标记</strong>：Collerctor从根节点开始遍历，<strong>标记所有被引用的对象</strong>！！！！！！，是非垃圾对象。一般是在对象的Header中记录可达对象。</li><li><strong>清除</strong>：Collector对堆内存从头到尾进行线性的遍历，如果发现某个对象在其Header中没有标记为可达对象，则将其回收。</li></ul><img src="https://img02.sogoucdn.com/app/a/100520146/43f91e8295dd41d570c4cc65d86cbc71" alt="UTOOLS1603263356735.png" title="UTOOLS1603263356735.png" /><p><strong>缺点</strong>：</p><ul><li>效率不算高</li><li>在GC的时候，需要停止整个应用程序，导致用户体验差</li><li>这种方式清理出来的空闲内存是不连续的，会产生内存碎片，需要维护一个<strong>空闲列表</strong></li></ul><p><strong>注意：何为清除？</strong></p><ul><li>这里所谓的清除并不是置空，而是<strong>把需要消除的对象地址保存在空闲的地址列表中</strong>。下次有新对象需要加载时，判断垃圾的位置空间是否够，如果够，就存放。</li></ul><h3 id="清除阶段：复制算法"><a href="#清除阶段：复制算法" class="headerlink" title="清除阶段：复制算法"></a>清除阶段：复制算法</h3><blockquote><p>为了解决标记清除算法在垃圾收集效率方面的缺陷，所以出现</p></blockquote><p><strong>核心思想：</strong></p><p>将活着的内存空间分为两块，每次只是用其中一块，在垃圾回收时将正在使用的内存中的存活对象复制到为使用的内存快中，之后清除正在使用的内存块中的所有对象，交换两个内存的角色，完成垃圾回收。</p><p><img src="https://img04.sogoucdn.com/app/a/100520146/2a65b0db2928d712e3a9c0b2533ce53e" alt="UTOOLS1603264536577.png"></p><p><strong>优点：</strong></p><ul><li>没有标记和清除过程，实现简单，运行高效</li><li>复制过去以后保证空间的连续性，不会出现“碎片”问题</li></ul><p><strong>缺点</strong>：</p><ul><li>此算法使得我们需要两倍的内存空间</li><li>对于G1这种分拆成为大量region的GC，复制而不是移动，意味着GC需要维护region之间对象引用关系，不管是内存占用还是时间开销都不小</li></ul><p><strong>特别的：</strong></p><blockquote><p>如果系统中垃圾对象不是很多，复制算法需要复制的存活对象数量就会很大。</p><p>正是我们想到新生代里通常可以回收70%-99%的内存空间，回收性价比很高，所以新生代用此垃圾回收算法非常合适！！！！</p></blockquote><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201021152950491.png" alt="image-20201021152950491"></p><h3 id="清除阶段：标记-压缩-Mark-Compact-算法"><a href="#清除阶段：标记-压缩-Mark-Compact-算法" class="headerlink" title="清除阶段：标记-压缩(Mark-Compact)算法"></a>清除阶段：标记-压缩(Mark-Compact)算法</h3><blockquote><p>复制算法的高效性是建立在 <strong>存活对象比较少，垃圾对象比较多的情况下</strong>。</p><p>基于<strong>老年代这种存活对象很多，垃圾很少的情况</strong>，我们应该使用其他的算法</p></blockquote><p><strong>执行过程：</strong></p><ul><li><p>第一阶段和标记-清除算法一样，从根节点开始<strong>标记所有被引用对象</strong></p></li><li><p>第二阶段<strong>将所有存活对象压缩到内存的一端</strong>，按顺序排放</p></li><li><p>之后<strong>清理边界外所有的空间</strong></p></li></ul><p><img src="https://img01.sogoucdn.com/app/a/100520146/652a44131a13048a2b40512e3574a3a2" alt="UTOOLS1603266197927.png"></p><p><strong>优点：</strong></p><ul><li>消除了标记-清除算法当中，内存区域分散的缺点，我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可。</li><li>消除了复制算法当中，内存减半的高额代价</li></ul><p><strong>缺点：</strong></p><ul><li>从效率上，比不过复制算法</li><li>移动对象的同时，如果对象被其他对象引用，则还需要调整引用的地址</li><li>移动过程中，需要全程暂停用户应用程序。STW</li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote><p>效率</p></blockquote><p>复制算法是当之无愧的老大，但是却浪费了太多的内存</p><blockquote><p>空间开销</p></blockquote><p>标记清除算法很快，复制算法需要额外的空间来维护存活对象的存放和空闲列表</p><blockquote><p>移动对象</p></blockquote><p>复制算法要比标记压缩算法快</p><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><blockquote><p>基于：不同对象的生命周期是不一样的，<strong>因此不同生命周期的对象可以采取不同的收集方式，以便提高回收效率。</strong>一般把java堆分为新生代和老年代，这样就可以根据各个年代的特点使用不同的垃圾回收算法</p></blockquote><p><strong>几乎所有的GC都是采用分代收集算法执行垃圾回收的</strong></p><h3 id="增量收集算法"><a href="#增量收集算法" class="headerlink" title="增量收集算法"></a>增量收集算法</h3><blockquote><p>在之前的算法中，应用软件将处于STW的状态，如果垃圾回收时间过长，就会严重影响用户体验或者系统稳定性。</p></blockquote><p><strong>解决思路</strong>：</p><p>每次，垃圾收集线程<strong>只收集一小片区域的内存空间</strong>，接着切换到应用程序线程，依次反复，直到垃圾收集完成。</p><p>总的来说，增量收集算法的基础仍是传统的标记-清除和复制算法。增量收集算法通过 <strong>对线程间冲突的妥善处理，允许垃圾收集线程以分阶段的方式完成标记，清理或复制工作。</strong></p><p><strong>缺点</strong>：</p><p>使用这种方式，由于在垃圾回收过程中，间断性地还执行了应用程序代码，所以能减少系统的停顿时间。但是，因为线程切换和上下文转换的小号，会使得垃圾回收的总体成本上升，<strong>造成系统吞吐量的下降</strong></p><h3 id="分区算法"><a href="#分区算法" class="headerlink" title="分区算法"></a>分区算法</h3><blockquote><p>目的：为了更好的控制GC产生的停顿时间，将一块大的内存区域分割成多个小块，根据目标的停顿时间，每次合理地回收若干个小区间 region ，而不是整个堆空间，从而减少一次gc所产生的停顿。</p><p>每个小区间都独立使用，独立回收。</p></blockquote><p><img src="https://img01.sogoucdn.com/app/a/100520146/b93984920170e301aa380981ad69315c" alt="UTOOLS1603270969499.png"></p><h2 id="垃圾回收相关概念"><a href="#垃圾回收相关概念" class="headerlink" title="垃圾回收相关概念"></a>垃圾回收相关概念</h2><h3 id="System-gc的理解"><a href="#System-gc的理解" class="headerlink" title="System.gc的理解"></a>System.gc的理解</h3><blockquote><p>通过System.gc和Runtime.getRuntime().gc() 会显示的触发 <strong>full gc</strong></p></blockquote><p><strong>然而</strong>，System.gc()调用附带一个免责声明，无法保证对垃圾收集器的调用</p><p><img src="https://img04.sogoucdn.com/app/a/100520146/41269ef6fa92e05832fe313bb29cc247" alt="UTOOLS1603272636302.png"></p><p>程序结束了，但是gc还是没有发生，但是有时候可以。</p><p>我们可以调用 System.runFinalization(); 会强制调用使用引用的对象的finalize()方法</p><h3 id="内存溢出和内存泄漏"><a href="#内存溢出和内存泄漏" class="headerlink" title="内存溢出和内存泄漏"></a>内存溢出和内存泄漏</h3><blockquote><p>内存溢出</p></blockquote><ul><li>没有空闲内存，并且垃圾收集器也无法提供更多内存</li></ul><p>原因：</p><ul><li>java虚拟机的堆内存设置不够</li><li>代码中创建了大量大对象，并且长时间不能被垃圾收集器收集（有引用）</li></ul><blockquote><p>内存泄漏</p></blockquote><ul><li><p>严格意义上将，<strong>只有对象不会被程序用到了，并且GC又不能回收他们的情况</strong>，叫做内存泄漏。</p></li><li><p>但实际情况中，很多时候一些不太好的疏忽会<strong>导致对象的生命周期变得很长甚至导致OOM</strong>。也可以叫做<strong>宽泛意义</strong>上的“内存泄漏”</p></li></ul><p><img src="https://img03.sogoucdn.com/app/a/100520146/c7c5b0b31f6c15f07bb9b2668f2c6b7a" alt="UTOOLS1603284239687.png"></p><p>忘记断开了引用链，，让本该释放的对象，还被引用着，不能被释放</p><p><strong>举例：</strong></p><ol><li><p>单例模式</p><blockquote><p>单例模式的生命周期和应用程序是一样长的，所以<strong>单例程序</strong>中，如果<strong>持有对外部对象的引用的话，那么这个外部对象是不能回收的</strong>，则会导致内存泄漏的发生。</p></blockquote><p><img src="https://img01.sogoucdn.com/app/a/100520146/2897cee1accd74b0e563477bd51f2c43"></p></li><li><p>一些提供close的资源未关闭导致内存泄漏</p><blockquote><p>跟数据库，网络链接，io链接必须手动关闭，否则是不能被回收的！！！！！！！！！！</p></blockquote></li></ol><h3 id="STW"><a href="#STW" class="headerlink" title="STW"></a>STW</h3><blockquote><p>GC事件发生过程中，会产生程序的停顿，线程会被暂停，没有任何响应，这个停顿称为STW</p></blockquote><ul><li>可达性分析算法中枚举根节点会导致所有java执行的线程停顿<ul><li>分析工作必须在一个能确保一致性的快照中进行</li><li>一致性指整个分析期间整个执行系统看起来像被冻结在某个时间点上</li><li><strong>如果出现分析过程中对象引用关系还在不断变化，则分析过程的准确性无法保证</strong></li></ul></li><li>被STW中断的应用程序线程会在完成GC后恢复，频繁的STW会让用户体验感极差，所有要减少 </li></ul><h3 id="垃圾回收的并行与并发"><a href="#垃圾回收的并行与并发" class="headerlink" title="垃圾回收的并行与并发"></a>垃圾回收的并行与并发</h3><blockquote><p><strong>并发</strong>：不是真正意义上的“同时执行”，只是CPU把一个时间段划分成几个时间片段（时间区间），然后在这几个时间区间之间来回切换，由于CPU处理的速度非常快，只要时间间隔处理得当，即可让用户感觉是多个应用程序同时在进行。</p><p><strong>并行</strong>：当系统有一个以上CPU时，当一个CPU执行一个进程，另一个CPU可以执行另一个进程，两个进程互不抢占CPU资源，可以同时进行，我们称之为<strong>并行</strong></p><ul><li>决定并行的不是cpu数量，而是cpu核心数量，一个cpu多核也能并行</li><li>适合科学计算，后台处理等弱交互场景</li></ul></blockquote><p>并发：<strong>在一个时间段内同时发生了</strong></p><p><img src="https://img03.sogoucdn.com/app/a/100520146/6eaac6b00ac4b10c6c82730c3643d60e" alt="UTOOLS1603286445704.png"></p><p>并行：<strong>在一个时间点上同时发生了</strong></p><p><img src="https://img04.sogoucdn.com/app/a/100520146/bb13aee526a47dd0975ad3e895b3c8b5" alt="UTOOLS1603286412378.png"></p><h3 id="安全点与安全区域"><a href="#安全点与安全区域" class="headerlink" title="安全点与安全区域"></a>安全点与安全区域</h3><blockquote><p>程序执行时，并非是在所有地方都能停顿下来GC，只有在特定的位置才可，这些位置称为“安全点”（safe point）</p></blockquote><h4 id="如何在GC发生时，检查所有线程都跑到最近的安全点停顿下来？"><a href="#如何在GC发生时，检查所有线程都跑到最近的安全点停顿下来？" class="headerlink" title="如何在GC发生时，检查所有线程都跑到最近的安全点停顿下来？"></a>如何在GC发生时，检查所有线程都跑到最近的安全点停顿下来？</h4><ul><li><p><strong>抢先式中断</strong>：（目前没有虚拟机使用了）</p><blockquote><p>首先中断所有线程，如果还有线程不在安全点，就恢复线程，让线程跑到安全点</p></blockquote></li><li><p><strong>主动式中断</strong>：</p><blockquote><p>设置一个中断标志，各个线程运行到Safe Point的时候主动轮询这个标志，如果中断标志为真，则将自己进行中断挂起</p></blockquote></li></ul><p><strong>安全区域</strong></p><blockquote><p>安全区域是指在一段代码片段中，对象的引用关系不会发生变化，在这个区域中的任何位置开始GC都是安全的 Safe Region</p></blockquote><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><blockquote><p>我们希望能描述这样一类对象：当内存空间还很足时，则能保存在内存中；如果内存空间在进行垃圾收集后还是很紧张，则可以抛弃这些对象</p></blockquote><h4 id="【即偏门又高频的面试题】"><a href="#【即偏门又高频的面试题】" class="headerlink" title="【即偏门又高频的面试题】"></a>【即偏门又高频的面试题】</h4><blockquote><p>强引用，软引用，弱引用，虚引用有什么区别？具体使用场景是什么？</p></blockquote><p><strong>强度对比：</strong>强引用-&gt;软引用-&gt;弱引用-&gt;虚引用</p><p><img src="https://img04.sogoucdn.com/app/a/100520146/3a999af1a2e69f4a387d0ba1e6e5d951" alt="UTOOLS1603288830450.png"></p><h4 id="强引用（死也不回收）"><a href="#强引用（死也不回收）" class="headerlink" title="强引用（死也不回收）"></a>强引用（死也不回收）</h4><blockquote><p><strong>最传统的引用定义</strong>，是指在程序代码之中普遍存在的引用赋值，<strong>无论任何情况下都不会回收</strong> </p></blockquote><ul><li>强引用对象时可触及的，<strong>GC永远不会回收掉被引用的对象</strong></li><li><strong>强引用时造成java内存泄漏的主要原因之一</strong></li></ul><h4 id="软引用-内存不够才回收"><a href="#软引用-内存不够才回收" class="headerlink" title="软引用(内存不够才回收)"></a>软引用(内存不够才回收)</h4><blockquote><p>在系统没有发生内存不足前，一切正常。<strong>当系统内存溢出之前，会把这些对象列入回收范围中进行二次回收</strong>。如果这次回收还没有足够的内存，才会抛出内存溢出异常</p></blockquote><ul><li>软引用通常用来实现内存敏感的缓存，比如 <strong>高速缓存</strong>就有用到软引用，如果又空闲的内存就会保留，加快执行效率，如果内存不足，就清理掉</li><li><code>SoftReference</code>来实现软引用 </li><li>但是，如果在伊甸园区不够了，老年代还是够呢，就会把软引用放在老年代中</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> softRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">)</span>   用此来构建软引用        softRef<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  可以获得软引用中的对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h4><blockquote><p><strong>只被弱引用关联</strong>的对象只能生存在下一次垃圾回收之前，，<strong>GC工作的时候，不管你内存够不够，都会把弱引用回收</strong>，但是垃圾回收器的线程通常优先级很低，所以不一定很快地发现持有弱引用的对象。在这种情况下，<strong>弱引用对象可以存在较长的时间</strong>。</p></blockquote><ul><li>构造弱引用时，指定一个引用队列，当弱引用对象被回收时，就会加入指定的引用队列，通过这个队列可以追踪对象的回收情况</li><li>跟软引用一样，适合保存那些可有可无的缓存数据</li><li><code>WeakReference&lt;T&gt;</code>可以创建软引用</li></ul><h5 id="面试题：开发中用过WeakHashMap吗？？？？？？？"><a href="#面试题：开发中用过WeakHashMap吗？？？？？？？" class="headerlink" title="面试题：开发中用过WeakHashMap吗？？？？？？？"></a>面试题：开发中用过WeakHashMap吗？？？？？？？</h5><blockquote><p>内部类entity继承了weakReference，实现了弱引用</p></blockquote><p><img src="https://img03.sogoucdn.com/app/a/100520146/e235696434669c44185a411d02ce78e6" alt="UTOOLS1603373350703.png"></p><h4 id="虚引用（对象跟踪-）"><a href="#虚引用（对象跟踪-）" class="headerlink" title="虚引用（对象跟踪 ）"></a>虚引用（对象跟踪 ）</h4><blockquote><p><strong>唯一目的时能够在这个对象回收之前收到一个系统的通知</strong>，用于对象回收跟踪</p></blockquote><ul><li>为一个对象设置虚引用关联的唯一目的在于 <strong>跟踪垃圾回收过程</strong>。比如：能在这个对象被收集器回收时收到一个系统通知</li><li><strong>虚引用必须跟引用队列一起使用</strong>。虚引用在创建时必须提供一个引用队列作为参数。当垃圾回收器准备回收一个对象时，如果发现它有虚引用，就会在回收对象后，将这个虚引用加入引用队列，以通知应用程序对象的回收情况</li><li><strong>由于虚引用可以跟踪对象的回收时间</strong>，因此，<strong>可以将一些资源释放操作放置在虚引用中执行和记录</strong></li><li>PhantomReference 实现虚引用</li><li>虚引用不能通过 xxx.get()方法获取到！！！！！！</li></ul><h4 id="终结器引用"><a href="#终结器引用" class="headerlink" title="终结器引用"></a>终结器引用</h4><blockquote><p><strong>用来实现对象的finalize()方法</strong>，也称为终结器引用。</p></blockquote><ul><li>无需手动编码，其内部配合引用队列使用</li><li>gc时，把终结器放入引用队列，用Finalizer线程通过终结器引用找到被引用对象，并调用它的finalize()方法，第二次GC的时候才会回收被引用的对象</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JVM07</title>
      <link href="2020/10/18/jvm07/"/>
      <url>2020/10/18/jvm07/</url>
      
        <content type="html"><![CDATA[<h1 id="String-Table"><a href="#String-Table" class="headerlink" title="String Table"></a>String Table</h1><h2 id="String的基本特性"><a href="#String的基本特性" class="headerlink" title="String的基本特性"></a>String的基本特性</h2><blockquote><p><strong>String是final的，不可被继承</strong>，<strong>不可变</strong></p><p>String的创建方式</p><ul><li>String s1 = “zhanghaoyunb”; // 字面量定义方式</li><li>String s2 = new String(“hello”);  new实例化的方式</li></ul></blockquote><p>String的底层存储是<strong>char类型的数组</strong>，这个是1.9之前的，在1.9的时候用<strong>byte[]来存储数据</strong>,<strong>节约了空间</strong></p><blockquote><p>String 代表<strong>不可变</strong>的字符序列：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span> <span class="token comment">//字面量定义的方式，"123"存储在字符串常量池中</span>    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>    s1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token operator">==</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><font color = red><strong>字符串常量池中是不会存储相同内容的字符串的</strong></font></li><li>String的String pool 是一个固定大小的Hash Table，jdk6默认值大小长度是1009。如果放进String Pool的String过多，就会造成hash冲突，导致很长的链表。从而影响了String,intern时候的性能。<strong>jdk7默认大小60013</strong>，jdk8<strong>开始</strong>，1009是可以设置的最小值</li></ul><p>测试：</p><blockquote><p>把10w条数据插入字符串常量池中，1009的长度，插入时间为147ms。100009的长度，插入时间为43ms</p></blockquote><h2 id="String的内存分配"><a href="#String的内存分配" class="headerlink" title="String的内存分配"></a>String的内存分配</h2><blockquote><p>String类型的常量池<strong>主要的使用方法有两种</strong>：</p><ul><li>直接使用“”声明出来的String对象会直接存储在常量池中：String info = “我被直接放在常量池中”</li><li>如果不是“”声明的对象，可以使用String提供的intern（）方法。（<strong>重点</strong>）</li></ul></blockquote><p><strong>历史</strong></p><ul><li>java 6以前<strong>字符串常量池放在永久代</strong></li></ul><p><a href="https://imgchr.com/i/0Xb6eJ"><img src="https://s1.ax1x.com/2020/10/18/0Xb6eJ.png"></a></p><ul><li>java 7中<strong>字符串常量池放在堆中</strong><ul><li>字符串都保存在堆中，这样调优时仅仅调整堆大小就可以了</li><li>字符串常量池概念原本使用的比较多，但是这个改动使得我们有足够的理由让我们重新考虑在java 7中使用String,intern()</li></ul></li><li>java 8 永久代改名为元空间，字符串常量还是在堆中</li></ul><p><img src="https://s1.ax1x.com/2020/10/18/0XboOe.png"></p><h3 id="String-Table为什么要调整"><a href="#String-Table为什么要调整" class="headerlink" title="String Table为什么要调整"></a><strong>String Table为什么要调整</strong></h3><ul><li>防止永久代内存溢出</li><li>永久代垃圾回收频率低</li></ul><h2 id="String的基本操作"><a href="#String的基本操作" class="headerlink" title="String的基本操作"></a>String的基本操作</h2><blockquote><p>用“”创建的字符串只会在字符串常量池中创建一次</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 因为之前创建过了，所以这里使用的是之前创建的</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串拼接操作"><a href="#字符串拼接操作" class="headerlink" title="字符串拼接操作"></a>字符串拼接操作</h2><ol><li><p>常量与常量的拼接结果在常量池，原理是<strong>编译器优化</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">+</span><span class="token string">"b"</span><span class="token operator">+</span><span class="token string">"c"</span><span class="token punctuation">;</span><span class="token comment">// 等同于 abc</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span> <span class="token comment">// abc 一定是放在字符串常量池中，将地址赋值给s2</span><span class="token comment">/*常量与常量进行拼接，结果放入常量池，原理是编译期优化字节码反编译后：String s1 = "abc";String s2 = "abc"; */</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s1.ax1x.com/2020/10/19/0xaZFI.md.png" alt="0xaZFI.md.png"></p></li><li><p><strong>常量池中不会存在相同内容的常量</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"javaEE"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"javaEE"</span><span class="token punctuation">;</span><span class="token function">sout</span><span class="token punctuation">(</span>s1<span class="token operator">==</span>s2<span class="token punctuation">)</span> <span class="token comment">// true</span>         <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"javaEE"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">"javaEEhadoop"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"javaEE"</span><span class="token operator">+</span><span class="token string">"hadoop"</span><span class="token punctuation">;</span>  <span class="token comment">// 编译器优化</span><span class="token class-name">String</span> s5 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>  <span class="token comment">// 拼接符号前后出现了变量，则需要在堆空间中new一个，具体内容为拼接结果</span><span class="token class-name">String</span> s6 <span class="token operator">=</span> <span class="token string">"javaEE"</span> <span class="token operator">+</span> s2<span class="token punctuation">;</span><span class="token class-name">String</span> s7 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token operator">==</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true 常量相加结果放入常量池</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token operator">==</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token operator">==</span>s6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token operator">==</span>s7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5<span class="token operator">==</span>s6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5<span class="token operator">==</span>s7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s6<span class="token operator">==</span>s7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token comment">// intern() 如果常量池中没有这个字符串，就会添加一个进去，并返回此对象（s6）的地址</span><span class="token comment">// 如果有，就返回常量池中的地址</span><span class="token class-name">String</span> s8 <span class="token operator">=</span> s6<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token operator">==</span>s8<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>只要其中有一个是变量，结果就在堆中</strong>。变量拼接的原理是StringBuilder </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span><span class="token comment">/*如下的s1 + s2操作执行细节：① StringBuilder s = new StringBuilder();② s.append("a")③ s.append("b")④ s.toString() ---->底层实际上是new了一个String，返回回去 */</span><span class="token class-name">String</span> s4 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们来看字节码：</p><pre class="line-numbers language-class" data-language="class"><code class="language-class"> 0 ldc #2 &lt;a&gt;     &#x2F;&#x2F; 字符串常量a 2 astore_1   &#x2F;&#x2F; 存放在局部变量表索引为1的位置 3 ldc #3 &lt;b&gt; 5 astore_2 6 ldc #4 &lt;ab&gt; 8 astore_3 9 new #5 &lt;java&#x2F;lang&#x2F;StringBuilder&gt;    &#x2F;&#x2F; 这里使用了StringBuilder12 dup13 invokespecial #6 &lt;java&#x2F;lang&#x2F;StringBuilder.&lt;init&gt;&gt;16 aload_117 invokevirtual #7 &lt;java&#x2F;lang&#x2F;StringBuilder.append&gt;    &#x2F;&#x2F;这里调用了append方法拼接 &quot;a&quot;20 aload_221 invokevirtual #7 &lt;java&#x2F;lang&#x2F;StringBuilder.append&gt;    &#x2F;&#x2F;这里调用了append方法拼接 &quot;b&quot;24 invokevirtual #8 &lt;java&#x2F;lang&#x2F;StringBuilder.toString&gt;   &#x2F;&#x2F; 调用自己的toString方法，返回一个String27 astore 429 getstatic #9 &lt;java&#x2F;lang&#x2F;System.out&gt;32 aload_333 aload 435 if_acmpne 42 (+7)38 iconst_139 goto 43 (+4)42 iconst_043 invokevirtual #10 &lt;java&#x2F;io&#x2F;PrintStream.println&gt;46 return<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>补充</strong></p><p><strong>在jdk5之前</strong>使用的是StringBuffer，，<strong>5之后的版本</strong>使用的StringBuilder</p><p>BUT!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</p><p>如果出现以下情况，就是另一回事儿了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span>  <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token keyword">final</span>  <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span><span class="token comment">/*用final修饰 s1 s2这时候可以认为是两个常量引用进行相加 */</span><span class="token class-name">String</span> s4 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为加了<code>final</code>关键字，所以s1，s2都是字符串常量的引用，所以他们的地址应该是同一个</p></li></ol><h4 id="和-append的效率问题"><a href="#和-append的效率问题" class="headerlink" title="+ 和 append的效率问题"></a>+ 和 append的效率问题</h4><blockquote><p>append的执行效率要远远高于 字符串拼接的效率</p><p>字符串拼接底层，要先new一个StringBuilder，完了调用append方法，最后再调用toString方法返回一个字符串对象。</p></blockquote><p><strong>提高</strong></p><p>我们一般在项目中，如果遇到多次字符串拼接，我们会创建StringBuilder，用append方法来代替字符串拼接操作。</p><p>当然<strong>还有一种更好的优化</strong>：因为StringBuilder构造器也是用默认长度16的数组构造的，所以</p><ol><li><p>如果拼接的结果调用intern（）方法，则<strong>主动将常量池中还没有的字符串对象放入池中，并返回此对象的地址</strong>。</p><blockquote><p>我们可以来做一个验证，在上一个例子中，由于s6的 “javaEEhadoop” 在之前就存在了常量池中，所以<strong>只是把常量池中的对应字符串地址返回了</strong></p></blockquote></li></ol><p>问题出现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s4 <span class="token operator">=</span> s1<span class="token operator">+</span>s2<span class="token punctuation">;</span>sout <span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span>       <span class="token boolean">false</span>  因为变量相加 是在堆中<span class="token keyword">new</span>了一个新的        s3中指向的是字符串常量池中的 <span class="token string">"ab"</span>    s4是在堆空间中<span class="token keyword">new</span> 的<span class="token class-name">String</span>对象，存放的 <span class="token string">"ab"</span>，他们不是一个东西，所以是<span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="intern-的使用"><a href="#intern-的使用" class="headerlink" title="intern()的使用"></a>intern()的使用</h2><h4 id="引子：面试题"><a href="#引子：面试题" class="headerlink" title="引子：面试题"></a>引子：面试题</h4><blockquote><p><a href="https://www.bilibili.com/video/BV1PJ411n7xZ?p=126">https://www.bilibili.com/video/BV1PJ411n7xZ?p=126</a></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> s<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">///?????????</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s3<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"11"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">////??????????????</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><blockquote><p>intern方法会判断当前字符串，在常量池中是否存在。如果存在就返回字符串常量池中的地址，如果不存在就会将当前字符串放入常量池中，并返回这个地址。这个要因为版本的不同，会有不同的情况，具体看下面的题</p></blockquote><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><blockquote><p>如何保证变量s指向的是字符串常量池中的数据呢？</p><ul><li>String s = “hello world” // 定义字面量方式</li><li>String s = new String(“xxxx”).intern();</li><li>String s = new StringBuilder(“xxxxx”).toString().intern();</li></ul></blockquote><h4 id="new-String到底创建了几个对象？？？？？"><a href="#new-String到底创建了几个对象？？？？？" class="headerlink" title="new String到底创建了几个对象？？？？？"></a>new String到底创建了几个对象？？？？？</h4><blockquote><p>new String(“ab”) 会创建几个对象？  查看字节码指令！</p></blockquote><pre class="line-numbers language-class" data-language="class"><code class="language-class"> 0 new #2 &lt;java&#x2F;lang&#x2F;String&gt;   &#x2F;&#x2F; new 开辟了一块空间存放一个ab 3 dup 4 ldc #3 &lt;ab&gt;   &#x2F;&#x2F; 这里往字符串常量池中存了一份 6 invokespecial #4 &lt;java&#x2F;lang&#x2F;String.&lt;init&gt;&gt; 9 astore_110 return<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>new String(“a”) + new String(“b”) 会创建几个对象？</p><ul><li>new StringBuilder</li><li>new String(a)</li><li>常量池中的 a</li><li>new String(b)</li><li>常量池中的 b</li><li>toString方法创建的String对象：new String(“ab”)</li></ul><p><strong>字符串常量池中不存在ab</strong>！！！！！！！！！！！！！！！！！！！！！！！！ </p></blockquote><pre class="line-numbers language-class" data-language="class"><code class="language-class"> 0 new #2 &lt;java&#x2F;lang&#x2F;StringBuilder&gt;   &#x2F;&#x2F; 使用了拼接操作，创建一个StringBuilder对象 3 dup 4 invokespecial #3 &lt;java&#x2F;lang&#x2F;StringBuilder.&lt;init&gt;&gt; 7 new #4 &lt;java&#x2F;lang&#x2F;String&gt;   &#x2F;&#x2F; new 开辟空间存放a10 dup11 ldc #5 &lt;a&gt;   &#x2F;&#x2F; 字符串常量池中再存放一个a13 invokespecial #6 &lt;java&#x2F;lang&#x2F;String.&lt;init&gt;&gt;16 invokevirtual #7 &lt;java&#x2F;lang&#x2F;StringBuilder.append&gt;   &#x2F;&#x2F;调用append方法19 new #4 &lt;java&#x2F;lang&#x2F;String&gt;   &#x2F;&#x2F; new 开辟空间存放b22 dup23 ldc #8 &lt;b&gt;  &#x2F;&#x2F; 字符串常量池中存放一个b25 invokespecial #6 &lt;java&#x2F;lang&#x2F;String.&lt;init&gt;&gt;28 invokevirtual #7 &lt;java&#x2F;lang&#x2F;StringBuilder.append&gt;  &#x2F;&#x2F; 调用append方法31 invokevirtual #9 &lt;java&#x2F;lang&#x2F;StringBuilder.toString&gt;    &#x2F;&#x2F;调用toString方法34 astore_135 return<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们来说一下本模块的引子，面试题：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> s<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 在这之前字符串常量池中已经存在1了</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">///  jdk6  false     jdk7/8 false</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s3<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*jdk1.6  在字符串常量池中创建一个11对象jdk7/8  在字符串常量池中开辟一个空间，记录堆中new的11的地址，所以s3 == s4，因为他们都指向的同一个对象*/</span><span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"11"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">////      jdk6 false    jdk7/8 true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s1.ax1x.com/2020/10/20/0zbbfs.png" alt="0zbbfs.png"></p><p>解释：</p><p>​      new String(“1”)，根据我们之前的知识，可以知道他创建了两个对象，一个放在字符串常量池中，一个在堆中。当再次调用intern()方法的时候，由于字符串常量池中已经有了 “1”这个值，返回常量池中的地址，却没有接收对象，所以相当于没有做任何操作。s2 = “1” 就直接去字符串常量池中找，因为之前存在，返回原来的地址。</p><p>​       new String(“1”) + new String(“1”) ， 根据我们之前的知识，可以知道，字符串常量池中会存放 “1”，堆空间中会存放最后的结果 “11”。当调用 s3.intern()方法的时候。有以下情况：</p><ul><li>jdk6的时候，jvm会在字符串常量池中new 一个新的对象，来保存11  ，同时堆空间中也存在一个11,s3指向的是堆空间的那个new 出来的，s4创建的时候，字符串常量池中已经存在了，所以把字符串常量池中的给了s4，所以他们不是同一个对象，故false</li><li>jdk7/8的时候，jvm会在字符串常量池中开辟空间，<strong>这时候不是保存”11”了，而是保存堆空间中new的”11”对象的地址。</strong>所以，s4创建的时候，字符串常量池中确实存在”11”这个东西，但是他实际上存放的是堆空间中的那个”11”的地址。所以这时候s4 和 s3 实际上是指向同一块内存地址，即堆空间中的”11”对象。</li></ul><p><strong>面试题拓展：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"11"</span><span class="token punctuation">;</span>s3<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 此时常量池中已经有了11，所以相当于啥也没干</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s1.ax1x.com/2020/10/20/BppKFP.png"></p><h2 id="String-Table的垃圾回收"><a href="#String-Table的垃圾回收" class="headerlink" title="String Table的垃圾回收"></a>String Table的垃圾回收</h2><h2 id="G1中的String去重操作"><a href="#G1中的String去重操作" class="headerlink" title="G1中的String去重操作"></a>G1中的String去重操作</h2><p><img src="https://s1.ax1x.com/2020/10/20/Bp5UQf.png"></p>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM06</title>
      <link href="2020/10/16/jvm06/"/>
      <url>2020/10/16/jvm06/</url>
      
        <content type="html"><![CDATA[<h1 id="执行引擎"><a href="#执行引擎" class="headerlink" title="执行引擎"></a>执行引擎</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>执行引擎是java虚拟机核心的组成部分之一。</p><p><strong>虚拟机的执行引擎是由软件自行实现的</strong>，可以不受物理条件制约第指定指令集与执行引擎的结构体系，<strong>能够执行那些不被硬件直接支持的指令集格式</strong></p></blockquote><p><img src="https://s1.ax1x.com/2020/10/16/0bX21U.png"></p><p>JVM的主要任务是：<strong>装载字节码到其内部</strong>，但字节码并不能够直接运行在操作系统之上，因为字节码指令并非等价于本地机器指令，他内部包含的仅仅是一些能够被JVM所识别的字节码指令、符号表，以及其他辅助信息。</p><p><strong>而执行引擎的任务是：</strong>将字节码解释/编译为对应平台上的<strong>本地机器指令</strong>，相当于一个翻译官。</p><p><img src="https://s1.ax1x.com/2020/10/17/0Lemuj.png" alt="执行引擎充当的角色"></p><ol><li>执行引擎执行什么样的字节码指令，<strong>完全取决于pc寄存器</strong></li><li>每当执行完一条指令后，pc寄存器就会更新下一条需要被执行的指令地址</li><li>执行引擎可能会通过<strong>存储在局部变量表中的对象引用</strong>，定位到java堆中的实例信息，再通过<strong>对象头中的元数据指针</strong>定位到对象的类型信息</li></ol><blockquote><p>从外观上来看，java虚拟机执行引擎输入的是字节码二进制流，输出的是执行结果</p></blockquote><h2 id="java代码编译和执行过程"><a href="#java代码编译和执行过程" class="headerlink" title="java代码编译和执行过程"></a>java代码编译和执行过程</h2><blockquote><p>java代码编译分为<strong>前端编译</strong>和<strong>后端编译</strong></p><p>前端编译是不属于jvm的，是把一个java文件转换为字节码文件的过程，接下来才会被类加载器所加载到jvm中。</p></blockquote><p><img src="https://s1.ax1x.com/2020/10/17/0LuDP0.png" alt="后端编译"></p><h3 id="解释器和编译器"><a href="#解释器和编译器" class="headerlink" title="解释器和编译器"></a>解释器和编译器</h3><blockquote><p>解释器 Interpreter</p></blockquote><p><strong>当Java虚拟机启动时</strong>，会根据预定义的规范<strong>对字节码采用逐行解释的方式执行</strong>，将每条字节码文件中的内容“翻译”为对应平台的本地机器指令执行</p><blockquote><p>编译器 (just in time Compiler)</p></blockquote><p>虚拟机将源代码直接编译成和本地机器平台相关的机器语言</p><p><strong>问题：为什么说java是半编译半解释性语言？</strong></p><p>JVM在执行java代码的时候，通常都会把<strong>解释执行和编译执行</strong>结合起来使用，所以是。。。。</p><p><img src="https://s1.ax1x.com/2020/10/17/0L19ts.png" alt="编译解释流程"></p><h2 id="解释器"><a href="#解释器" class="headerlink" title="解释器"></a>解释器</h2><blockquote><p>基于解释器执行已经成为了<strong>低效</strong>的代名词，所以才要提供一个编译器  </p></blockquote><h2 id="JIT编译器"><a href="#JIT编译器" class="headerlink" title="JIT编译器"></a>JIT编译器</h2><blockquote><p>出现的目的是避免函数被解释执行，<strong>而是将整个函数体编译成机器码</strong>，每次函数执行时，只执行编译后的机器码即可。<strong>大幅度提高效率</strong></p></blockquote><p><img src="https://s1.ax1x.com/2020/10/17/0LD7Nt.png"></p><p>具体hotspot选择哪种，就要看它自己去判断了。</p><blockquote><p>当虚拟机启动的时候，<strong>解释器首先发挥作用</strong>，这样可以省去不必要的编译时间。并且，随着程序运 行时间的推移，即时编译器逐渐发挥作用，<strong>根据热点探测功能</strong>，<strong>将有价值的字节码编译为本地机器指令</strong>，从而换取更高的程序执行效率。</p></blockquote><h3 id="热点代码确定何时JIT"><a href="#热点代码确定何时JIT" class="headerlink" title="热点代码确定何时JIT"></a>热点代码确定何时JIT</h3><blockquote><p>热点代码要<strong>根据代码的调用频率来定</strong>。  JIT编译器会针对那些热点代码进行 <strong>深度优化</strong>，将其直接编译为对应平台的本地机器指令，以此提升java程序的执行性能。</p></blockquote><ul><li><p>热点代码：</p><p>一个被多次调用的方法，或者一个方法体内循环次数较多的循环体等</p></li><li><p>热点探测技术：</p><blockquote><p>hotspot虚拟机会给每一个方法建立2个不同类型的计数器：<strong>方法调用计数器</strong> 和 <strong>回边计数器</strong></p><ul><li>方法调用计数器用于<strong>统计方法的调用次数</strong></li><li>回边计数器则用于<strong>统计循环体执行的循环次数</strong></li></ul></blockquote></li></ul><h4 id="方法调用计数器"><a href="#方法调用计数器" class="headerlink" title="方法调用计数器"></a>方法调用计数器</h4><blockquote><p>用于统计方法被调用的次数，默认阈值在Client模式下是1500次，在Server模式下是10000次。超过这个阈值，就会触发JIT编译。</p></blockquote><p><img src="https://s1.ax1x.com/2020/10/18/0XAcNV.png" alt="流程"></p><p>当调用java方法的时候，会首先去判断它是否已经被编译==》如果被编译，就直接执行编译后的机器码。没有编译，会让方法调用计数器+1，并判断是否超过了热点代码统计的阈值==》超过了就提交编译请求，用JIT编译器动态编译，<strong>并把代码缓存到方法区中</strong>，执行编译后的机器码。如果没有超过阈值，就会调用解释器去解释执行。</p><p><strong>热度衰减</strong></p><blockquote><ul><li>当<strong>超过一定的时间限度</strong>，如果方法的调用次数任然不足以让他提交给即时编译器编译，那这个方法的调用计数器就会被<strong>减少一半</strong>，这个过程称为方法调用计数器热度的<strong>衰减</strong>，而这段时间就称为此方法统计的<strong>半衰周期</strong></li><li>-XX:-UseCounterDecay 关闭热度衰减</li><li>用 -XX:CounterHalfLifeTime 参数设置半衰周期的时间，单位s</li></ul></blockquote><h4 id="回边计数器"><a href="#回边计数器" class="headerlink" title="回边计数器"></a>回边计数器</h4><blockquote><p>统计一个方法中 <strong>循环体代码执行的次数</strong>，在字节码中遇到控制流向后跳转的指令称为“回边”。显然，建立汇编计数器统计的目的就是为了触发OSR编译</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hashmap的前世今生</title>
      <link href="2020/10/12/hashmap-de-qian-shi-jin-sheng/"/>
      <url>2020/10/12/hashmap-de-qian-shi-jin-sheng/</url>
      
        <content type="html"><![CDATA[<h1 id="hashmap的n个问题"><a href="#hashmap的n个问题" class="headerlink" title="hashmap的n个问题"></a>hashmap的n个问题</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h3><ul><li><p>HashMap是基于哈希表实现的,每一个元素是一个key-value对,其内部通过单链表解决冲突问题,容量不足(超过了阀值)时,同样会自动增长.</p></li><li><p>HashMap是非线程安全的,只适用于单线程环境,多线程环境可以采用并发包下的concurrentHashMap</p></li><li><p>HashMap 实现了Serializable接口，因此它支持序列化，实现了Cloneable接口，能被克隆</p></li><li><p>HashMap是基于哈希表的Map接口的非同步实现.此实现提供所有可选的映射操作,并允许使用null值和null键.此类不保证映射的顺序,特别是它不保证该顺序恒久不变.</p></li><li><p>Java8中又对此类底层实现进行了优化，比如引入了红黑树的结构以解决哈希碰撞</p></li></ul><h2 id="哈希表的由来"><a href="#哈希表的由来" class="headerlink" title="哈希表的由来"></a>哈希表的由来</h2><blockquote><p>在以往的查询中，大部分都用的是数组，List等来进行查询。这样有个弊端，就是查询一个值是否存在于数组中，我们需要遍历数组，list，进行判断，看看是否存在。</p></blockquote><p><strong>哈希表</strong></p><p>哈希表是根据关键码值(Key value)而直接进行访问的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1450">数据结构</a>。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做<a href="https://baike.baidu.com/item/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0/2366288">散列函数</a>，存放记录的<a href="https://baike.baidu.com/item/%E6%95%B0%E7%BB%84/3794097">数组</a>叫做<a href="https://baike.baidu.com/item/%E6%95%A3%E5%88%97%E8%A1%A8/10027933">散列表</a>。</p><p><strong>哈希冲突</strong></p><blockquote><p>存放元素则通过把该数字对数组长度取余，所得的值作为下角标存入对应位置中。当然如果存放的位置中有元素了，那么就是发生了碰撞，这也叫<strong>hash冲突</strong>。</p></blockquote><p><strong>哈希冲突是无法避免的</strong>，我们只能减少冲突带来的损失，一个好的hash函数需要有以下特点：</p><ol><li><p>尽量使关键字对应的记录均匀分配在哈希表里面（比如说某厂商卖30栋房子，均匀划分ABC3个区域，如果你划分A区域1个房子，B区域1个房子，C区域28个房子，有人来查找C区域的某个房子最坏的情况就是要找28次）。</p></li><li><p>关键字极小的变化可以引起哈希值极大的变化。</p></li></ol><p><strong>哈希冲突解决方法</strong></p><blockquote><p>链地址法可以，链地址法的原理时如果遇到冲突，他就会在原地址新建一个空间，然后以链表结点的形式插入到该空间。我感觉业界上用的最多的就是链地址法。下面从百度上截取来一张图片，可以很清晰明了反应下面的结构。比如说我有一堆数据{1,12,26,337,353…}，而我的哈希算法是H(key)=key mod 16，第一个数据1的哈希值f(1)=1，插入到1结点的后面，第二个数据12的哈希值f(12)=12，插入到12结点，第三个数据26的哈希值f(26)=10，插入到10结点后面，第4个数据337，计算得到哈希值是1，遇到冲突，但是依然只需要找到该1结点的最后链结点插入即可，同理353。</p></blockquote><p><img src="https://img-blog.csdn.net/20160603152626346?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="链地址法"></p><ul><li>O(1)的平均查找、插入、删除时间</li><li>致命缺点是<strong>哈希值的碰撞</strong>(collision)</li></ul><h2 id="hashmap前世"><a href="#hashmap前世" class="headerlink" title="hashmap前世"></a>hashmap前世</h2><h3 id="底层数据结构"><a href="#底层数据结构" class="headerlink" title="底层数据结构"></a>底层数据结构</h3><ul><li><strong>数组+链表</strong></li></ul><blockquote><p>在java1.7中，hashmap使用数组+链表来作为存储结构</p><p>数组就类似于一个个桶容器，链表用来解决hash冲突，当出现冲突时，就在该桶的位置下插入新的节点。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 节点域对象</span><span class="token keyword">class</span> <span class="token class-name">Entry</span><span class="token punctuation">&#123;</span>    key<span class="token punctuation">;</span>    value<span class="token punctuation">;</span>    hash<span class="token punctuation">;</span>    <span class="token class-name">Entry</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://mmbiz.qpic.cn/mmbiz_png/7B8iaauAfclMROAyV9gMNAZtanwhQZmIrDPib4cGibVOYvg2ZbIG5Ag6a1gwj4mR6zLC8cwCAfRIX5L8r6BaNDv9g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="底层原理图"></p><h3 id="内部属性"><a href="#内部属性" class="headerlink" title="内部属性"></a>内部属性</h3><blockquote><p>内部属性源码</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//内部数组的默认初始容量，作为hashmap的初始容量，是2的4次方，2的n次方的作用是减少hash冲突</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// aka 16</span>    <span class="token comment">//默认的最大容量</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAXIMUM_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token comment">//默认负载因子，当容器使用率达到这个75%的时候就扩容</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span>    <span class="token comment">/**     *当数组表还没扩容的时候，一个共享的空表对象     */</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> EMPTY_TABLE <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//内部数组表，用来装entry，大小只能是2的n次方。</span>    <span class="token keyword">transient</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> EMPTY_TABLE<span class="token punctuation">;</span>    <span class="token comment">//存储的键值对的个数</span>    <span class="token keyword">transient</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token comment">/**     * 扩容的临界点，如果当前容量达到该值，则需要扩容了。     * 如果当前数组容量为0时（空数组），则该值作为初始化内部数组的初始容量     */</span>    <span class="token keyword">int</span> threshold<span class="token punctuation">;</span>    <span class="token comment">//由构造函数传入的指定负载因子</span>    <span class="token keyword">final</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">;</span>    <span class="token comment">//Hash的修改次数</span>    <span class="token keyword">transient</span> <span class="token keyword">int</span> modCount<span class="token punctuation">;</span>    <span class="token comment">//threshold的最大值</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ALTERNATIVE_HASHING_THRESHOLD_DEFAULT <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>    <span class="token comment">//计算hash值时候用，初始是0</span>    <span class="token keyword">transient</span> <span class="token keyword">int</span> hashSeed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//含有所有entry节点的一个set集合</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entrySet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">362498820763181265L</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ol><li>无参构造方法</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 此处调用了含容量和负载因子的构造方法来进行初始化操作</span><span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>DEFAULT_INITIAL_CAPACITY<span class="token punctuation">,</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>含容量的构造方法</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 调用了含容量和负载因子的构造方法来进行初始化操作，其中容量为传入的容量，负载因子为默认负载因子0.75</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>含容量和负载因子的构造方法</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果传入的初始化容量小于0，则抛出异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal initial capacity: "</span> <span class="token operator">+</span>                                               initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果传入的容量大于最大容量，就初始化为最大容量</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> MAXIMUM_CAPACITY<span class="token punctuation">)</span>            initialCapacity <span class="token operator">=</span> MAXIMUM_CAPACITY<span class="token punctuation">;</span>        <span class="token comment">// 如果负载因子小于0，或者是非法的浮点数，抛出异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loadFactor <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal load factor: "</span> <span class="token operator">+</span>                                               loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 根据传入的负载因子给负载因子赋值</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> loadFactor<span class="token punctuation">;</span>       <span class="token comment">// int threshold</span>    <span class="token comment">// 阈值，容量×负载因子。目前大小为initialCapacity（还未扩容）</span>    <span class="token comment">// 超过阈值进行扩容操作</span>        threshold <span class="token operator">=</span> initialCapacity<span class="token punctuation">;</span>        <span class="token comment">// 此处的init()方法是一个空方法，在向哈希表添加元素之前，不会真正地创建哈希表（以免占用过多的内存）</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 空方法</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见，无论调用哪种构造函数来初始化HashMap，最终调用的都是<strong>含容量和负载因子的构造方法</strong>，并且都<strong>没有真正的开辟出需要的内存空间</strong></p><h3 id="初始化、添加、扩容"><a href="#初始化、添加、扩容" class="headerlink" title="初始化、添加、扩容"></a>初始化、添加、扩容</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * put() */</span><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果表是空的，就通过inflateTable()方法进行扩容</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>table <span class="token operator">==</span> EMPTY_TABLE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 等到真正向哈希表中添加元素时，才开辟内存空间，把在构造方法中赋值的threshold传入，默认是16（1&lt;&lt;4）</span>        <span class="token function">inflateTable</span><span class="token punctuation">(</span>threshold<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">putForNullKey</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 计算要插入元素的哈希值</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 根据哈希值来判断插入元素应该放在哪个桶中</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> k<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">V</span> oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">recordAccess</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">addEntry</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 初始化 */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">inflateTable</span><span class="token punctuation">(</span><span class="token keyword">int</span> toSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Find a power of 2 >= toSize</span>    <span class="token comment">// 让容量向上舍入变为2的幂。比如toSize = 10 就会变为 16。</span>        <span class="token keyword">int</span> capacity <span class="token operator">=</span> <span class="token function">roundUpToPowerOf2</span><span class="token punctuation">(</span>toSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 阈值，向上取整后的容量×负载因子 或 最大容量+1，取其中的较小值</span>    <span class="token comment">// 该变量在第一次放入操作时不会用到</span>        threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>capacity <span class="token operator">*</span> loadFactor<span class="token punctuation">,</span> MAXIMUM_CAPACITY <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 根据capacity创建哈希表</span>        table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment">// 创建了一个哈希种子，重构String的hash算法，在后面的潜在安全漏洞会谈到</span>        <span class="token function">initHashSeedAsNeeded</span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 把用户输入的筒容量强制向上转成2幂次 */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">roundUpToPowerOf2</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// assert number >= 0 : "number must be non-negative";</span>        <span class="token comment">// 如果容量大于最大容量，就返回最大容量。</span>    <span class="token comment">// 否则调用Integer.highestOneBit()方法让其向上舍入为2的幂</span>    <span class="token comment">// number不大于1那就是0或1，所以返回2的0次，就是1</span>    <span class="token comment">// highestOneBit的作用是取 i这个数的二进制形式最左边的最高一位且高位后面全部补零，最后返回int型的结果。</span>        <span class="token keyword">return</span> number <span class="token operator">>=</span> MAXIMUM_CAPACITY                <span class="token operator">?</span> MAXIMUM_CAPACITY                <span class="token operator">:</span> <span class="token punctuation">(</span>number <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">highestOneBit</span><span class="token punctuation">(</span><span class="token punctuation">(</span>number <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="hash算法"><a href="#hash算法" class="headerlink" title="hash算法"></a>hash算法</h4><blockquote><p>HashMap为了提高效率使用位运算代替哈希，这又引入了哈希分布不均匀的问题，所以HashMap为解决这问题，又对hash算法做了一些改进，进行了扰动计算。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 通过一系列移位操作与异或操作获得元素的哈希值。 JDK 8 中已不再使用该方法</span><span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> h <span class="token operator">=</span> hashSeed<span class="token punctuation">;</span>    <span class="token comment">// 如果哈希种子存在，并且进行哈希的元素的String类型</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">!=</span> h <span class="token operator">&amp;&amp;</span> k <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 就让String使用另一种hash算法</span>            <span class="token keyword">return</span> <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>Hashing</span><span class="token punctuation">.</span><span class="token function">stringHash32</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        h <span class="token operator">^=</span> k<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// This function ensures that hashCodes that differ only by</span>        <span class="token comment">// constant multiples at each bit position have a bounded</span>        <span class="token comment">// number of collisions (approximately 8 at default load factor).</span>        h <span class="token operator">^=</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> h <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="问题：为什么哈希表大小一定是2的幂？"><a href="#问题：为什么哈希表大小一定是2的幂？" class="headerlink" title="问题：为什么哈希表大小一定是2的幂？"></a>问题：为什么哈希表大小一定是2的幂？</h4><blockquote><p>其实通过我们上面的讲解，已经可以看出，开发者多次跟我们强调桶大小应该为2的幂次，这是为什么呢？</p><p>我们来想一个问题：2、4、6、8、16…他们的二进制是10，100，1000，10000以此类推。</p><p>我们知道，<strong>哈希表最致命的冲突就是hash碰撞，也就是多个哈希值相同的元素放在了同一个桶中</strong></p></blockquote><p>之前提到过，我们为了避免哈希碰撞，我们就应该尽可能的把元素分配的均匀一些，这样子不会出现有的桶里一个也没有，有的桶里有20多个数的情况了。我们有以下几种解决办法：</p><blockquote><p>取模运算</p></blockquote><p>就跟钟表一样，对12（这是钟表数字的长度）取模，我们可以得到 0<del>11的范围的数。同理，我们把hash值对桶的长度（capacity）取模运算，这样我们就能得到（0</del>capacity-1）的范围的数，这样我们就能尽量分配的均匀一点。<strong>但是这样子的弊端是，10进制的运算效率其实是很低的，这样子一直运算会使得hashmap的效率变低，这是我们不想看到的，于是我们有了更好的办法</strong></p><blockquote><p>二进制与</p><p><strong>位运算直接对内存数据进行操作，不需要转成十进制，因此处理速度非常快。</strong></p></blockquote><p> 我们先看一下源码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">indexFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// assert Integer.bitCount(length) == 1 : "length must be a non-zero power of 2";</span>        <span class="token comment">// 将传入的哈希值与其长度-1进行按位与操作，并返回其结果</span>        <span class="token keyword">return</span> h <span class="token operator">&amp;</span> <span class="token punctuation">(</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们刚才说过，2、4、6、8、16…他们的二进制是10，100，1000，10000，那么他们的前一位十进制的二进制就是全1状态。在这种情况下去做与运算，其实真正决定值的是hash值的最后几位。这样一来，只要数不同，那么他们按位与下来的值也就不同了，那么我们可以给他们分配不同的空间，因为位置完全是由hash值决定的了。</p><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200912201909.png"></p><p><strong>那么我们再次思考，如果不是2的幂次会怎么样？</strong>，其实也简单，如果不是2的幂次，比如x，那么(x-1)的二进制就至少有一个不是1，那么我们执行与运算的时候，必然有至少一位会受到0的影响而改变，<strong>这在某些极端的条件下，就会出现我只有一个位置上有很多很多的元素，其他位置上都是空的。这显然不是我们想要的</strong></p><p><font color="red"><b>综上，开发者才会规定我们的桶大小必须是2的幂。</b></font></p><p>有意思的是，当我们用户输入一个不是2的幂的数，作为桶大小传入的时候。在第一次扩容的时候会被强制向上转换成2的幂（见源码 <code>roundUpToPowerOf2 (int number)</code>）</p><h4 id="添加元素的真正方法addEntry"><a href="#添加元素的真正方法addEntry" class="headerlink" title="添加元素的真正方法addEntry()"></a>添加元素的真正方法addEntry()</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 真正的添加元素的方法 */</span><span class="token keyword">void</span> <span class="token function">addEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> bucketIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果哈希表中的元素个数超过了阈值，并且该元素应该放入的桶中已经有了元素</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">>=</span> threshold<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 进行扩容，扩容大小为原大小的2倍，以保证扩容后容量仍为2的幂</span>        <span class="token comment">// 并将扩容前哈希表中的元素全部重新计算哈希值，并放入到扩容后的桶中</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 重新计算哈希值，因为经历了扩容，需要重新确定一下位置</span>        hash <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> key<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        bucketIndex <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 创建节点，采用头插法将其放在对应的桶中，这里采用头插法导致了一个很严重的问题，之后说</span>    <span class="token function">createEntry</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> bucketIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 创建节点，用头插法插入到链表中 */</span><span class="token keyword">void</span> <span class="token function">createEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> bucketIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 将新节点放在桶的第一个位置，也就是采用头插法进行插入</span>    <span class="token keyword">void</span> <span class="token function">createEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> bucketIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>        table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当我们真正插入元素的时候，会先去判断是否达到了扩容的标准（<strong>桶中元素的个数大于等于阈值，并且该元素应该放入的桶中已经有了元素</strong>（1.7以前的一个条件））</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">int</span> newCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Entry</span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTable <span class="token operator">=</span> table<span class="token punctuation">;</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> oldTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">// 当桶容量满了，就把阈值调整到int的最大值，并结束扩容</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">==</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            threshold <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">// 扩容为新容量</span>        <span class="token class-name">Entry</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span>newCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 重新计算元素哈希值，再放入到扩容后的哈希表中</span>        <span class="token function">transfer</span><span class="token punctuation">(</span>newTable<span class="token punctuation">,</span> <span class="token function">initHashSeedAsNeeded</span><span class="token punctuation">(</span>newCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table <span class="token operator">=</span> newTable<span class="token punctuation">;</span>        <span class="token comment">//重新计算阈值</span>        threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>newCapacity <span class="token operator">*</span> loadFactor<span class="token punctuation">,</span> MAXIMUM_CAPACITY <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>问：扩容后怎么把数据放入对应的位置中？</p></blockquote><p>rehash()全部按照原来的方式计算，也就是 hashCode()–&gt;&gt;扰动处理–&gt;&gt;（h&amp;(length-1)）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token class-name">Entry</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTable<span class="token punctuation">,</span> <span class="token keyword">boolean</span> rehash<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> newTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">// 遍历原来哈希表中的元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e <span class="token operator">:</span> table<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果桶中元素不为空，就重新计算起哈希值，然后放入到扩容后的哈希表中</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token comment">// 判断是否进行reshash</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rehash<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 给e赋值新的hash值</span>                    e<span class="token punctuation">.</span>hash <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">==</span> e<span class="token punctuation">.</span>key <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token function">hash</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 根据新的hash值和新桶容量获取新的位置</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 指向头指针 i 小脚表的那个</span>                e<span class="token punctuation">.</span>next <span class="token operator">=</span> newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                                <span class="token comment">// 扩容转移时使用头插法，这里算是更换头节点</span>                newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token comment">// 更新循环的条件吧</span>                e <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><h4 id="容易发生死锁"><a href="#容易发生死锁" class="headerlink" title="容易发生死锁"></a>容易发生死锁</h4><blockquote><p>因为HashMap本身是<strong>线程不安全</strong>的，所以在多线程环境下，可能会发生死锁问题</p></blockquote><h4 id="潜在的安全漏洞"><a href="#潜在的安全漏洞" class="headerlink" title="潜在的安全漏洞"></a>潜在的安全漏洞</h4><blockquote><p>哈希碰撞可能会<strong>使哈希表退化成链表</strong>，链表查询效率低下，一旦退化的话，导致我们程序效率变低。</p><p>黑客可以构造一堆这样的字符串，通过访问我们的服务器，把这些哈希值一样的元素放在一个桶中，降低我们的性能。</p></blockquote><h2 id="hashmap今生"><a href="#hashmap今生" class="headerlink" title="hashmap今生"></a>hashmap今生</h2><blockquote><p>Java8中通过引入了红黑树的结构以降低哈希碰撞</p><p>即，底层结构变成了  数组+链表+红黑树</p></blockquote><p><img src="https://img2018.cnblogs.com/blog/1454456/201910/1454456-20191019110307139-568037783.png" alt="底层实现"></p><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><blockquote><p>一种<strong>二叉查找树</strong>，但在每个节点增加一个存储位表示节点的颜色，可以是红或黑（<strong>非红即黑</strong>）。通过对任何一条从根到叶子的路径上各个节点着色的方式的限制，红黑树确保<strong>没有一条路径会比其它路径长出两倍</strong>，因此，红黑树是一种<strong>弱平衡二叉树</strong>（由于是弱平衡，可以看到，<strong>在相同的节点情况下，AVL树的高度低于红黑树）</strong>，相对于要求严格的AVL树来说，它的旋转次数少，所以<strong>对于搜索，插入，删除操作较多的情况下，我们就用红黑树</strong></p></blockquote><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><ul><li>每个节点非红即黑</li><li>根节点是黑的</li><li>不能有两个红色的节点连接在一起，黑色的可以</li><li>每个叶节点都是黑的</li><li>如果一个节点是红的，那么他的两个儿子都是黑的</li><li>对于任意节点而言，其到叶子节点数NULL指针的每条路径都包含相同数据的黑节点</li><li>每条路径都包含相同的黑节点</li></ul><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200913110321.png" alt="红黑树"></p><blockquote><p>红黑树可以弥补二叉搜索树的缺点，二叉搜索树在有些情况下会变得跟链表一样，线性结构，导致查找效率为O(n)</p><p>而红黑树的查找速度为O(log n)，解决链表查询深度的问题。</p><p>当一个桶中的元素特别多的时候，我们就用红黑树来实现，这个量我们定为桶中元素大于8，并且哈希表中的容量大于64时。</p><p>体现了<strong>空间换时间</strong>的思想</p></blockquote><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//默认的初始容量，跟1.7没变化</span>   <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>   <span class="token comment">//最大容量(传入容量过大将被这个值替换)，与1.7相同</span>   <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAXIMUM_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span>   <span class="token comment">// 默认加载因子为0.75(当表达到3/4满时,才会再散列),这个因子在时间和空间代价之间达到了平衡.更高的因子可以降低表所需的空间,但是会增加查找代价,而查找是最频繁操作</span>   <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span>   <span class="token comment">//桶的树化阈值：即 链表转成红黑树的阈值，在存储数据时，当链表长度 >= 8时，则将链表转换成红黑树</span>   <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>  <span class="token comment">// 桶的链表还原阈值：即 红黑树转为链表的阈值，当在扩容（resize（））时（HashMap的数据存储位置会重新计算），在重新计算存储位置后，当原有的红黑树内数量 &lt;= 6时，则将 红黑树转换成链表</span>   <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> UNTREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>  <span class="token comment">//最小树形化容量阈值：即 当哈希表中的容量 > 该值时，才允许转换成红黑树</span>   <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MIN_TREEIFY_CAPACITY <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>   <span class="token comment">//与 JDK 1.7 的对比（Entry类），仅仅只是换了名字，可以参考文章上边</span>   <span class="token keyword">transient</span> <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span>   <span class="token keyword">transient</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>   <span class="token comment">// 扩容的阈值，初始为0，计算公式为 加载因子*容量</span>   <span class="token keyword">int</span> threshold<span class="token punctuation">;</span>   <span class="token comment">// 负载因子实际大小</span>   <span class="token keyword">final</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">;</span>   <span class="token comment">// HashMap被改变的次数 </span>   <span class="token keyword">transient</span> <span class="token keyword">int</span> modCount<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="问题：为什么要在哈希表容量大于8的时候转换成树？"><a href="#问题：为什么要在哈希表容量大于8的时候转换成树？" class="headerlink" title="问题：为什么要在哈希表容量大于8的时候转换成树？"></a>问题：为什么要在哈希表容量大于8的时候转换成树？</h4><blockquote><p>​    因为红黑数的平均查找长度为log(n)，长度为8的时候，平均查找长度为3.如果继续用链表的话，平均查找长度为8/2=4，这样子对比，明显变成红黑树后查找的快。</p><p>​    链表在6的时候不转换是因为，这时候的平均查找长度为6/2=3，不算很慢，而且转换成树所需要的时间也不短。</p><p>​    <strong>还有选择6和8的原因</strong>，7作为中间值可以有效的防止链表和红黑树频繁的转换。毕竟频繁的在树和链表之间转换，会严重降低效率。</p></blockquote><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这里是判断用户输入的容量是否合法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal initial capacity: "</span> <span class="token operator">+</span>                                               initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 桶容量超过最大容量时，赋值为最大的</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> MAXIMUM_CAPACITY<span class="token punctuation">)</span>            initialCapacity <span class="token operator">=</span> MAXIMUM_CAPACITY<span class="token punctuation">;</span>    <span class="token comment">// 判断加载因子是否合法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loadFactor <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal load factor: "</span> <span class="token operator">+</span>                                               loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 赋值</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> loadFactor<span class="token punctuation">;</span>    <span class="token comment">// 这里的tableSizeFor 着重强调以下, 阈值，初始化时为传入容量取幂后的值</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>threshold <span class="token operator">=</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>tableSizeFor(初始容量)，用来保证函数返回值是大于等于给定参数initialCapacity最小的2的幂次的数值，</p><p><font color = "red">a |= b   等同于  a =  a | b</font></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Returns a power of two size for the given target capacity. */</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 防止cap本来就是2的幂次，这样最后会成   2 * cap</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>    n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">2</span><span class="token punctuation">;</span>    n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">4</span><span class="token punctuation">;</span>    n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">8</span><span class="token punctuation">;</span>    n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token operator">?</span> MAXIMUM_CAPACITY <span class="token operator">:</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="问题：为什么cap要保持为2的幂次？"><a href="#问题：为什么cap要保持为2的幂次？" class="headerlink" title="问题：为什么cap要保持为2的幂次？"></a>问题：为什么cap要保持为2的幂次？</h4><p>原理跟1.7的一样，参考上面即可</p><h3 id="TreeNode静态内部类"><a href="#TreeNode静态内部类" class="headerlink" title="TreeNode静态内部类"></a>TreeNode静态内部类</h3><blockquote><p>红黑树结构包含前、后、左、右节点，以及标志是否为红黑树的字段</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> parent<span class="token punctuation">;</span>  <span class="token comment">// red-black tree links</span>    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> left<span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> right<span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> prev<span class="token punctuation">;</span>      <span class="token comment">// 用来标记是红节点 还是黑节点</span>     <span class="token keyword">boolean</span> red<span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> val<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 。。。。。。。。。。。。。中间省略不写</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="hash方法"><a href="#hash方法" class="headerlink" title="hash方法"></a>hash方法</h3><blockquote><p>jdk8中优化了hash方法，</p><p>自己的高半区和低半区做异或，就是为了混合原始hashCode的高位和低位，以此来加大低位的随机性，而且混合后的低位掺杂了高位的部分特征，这样高位的信息也被变相保留下来。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> h<span class="token punctuation">;</span>    <span class="token comment">// 把自己的高16位右移16位，用自己的低16位和高16位做异或，这样大大加大了低位的随机性</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://mmbiz.qpic.cn/mmbiz_png/7B8iaauAfclMROAyV9gMNAZtanwhQZmIrveJ7uyMzqftKxLfqBw8bKiadibUVTe3KdVyfEvwYJNHJvmzZ7ibdmhsAw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>右位移16位，正好是32位一半，自己的高半区和低半区做异或，就是为了混合原始hashCode的高位和低位，以此来加大低位的随机性<br>而且混合后的低位掺杂了高位的部分特征，这样高位的信息也被变相保留下来。</p><p>index的运算规则是<br><code>e.hash &amp; (newCap - 1)</code><br>newCap是2的幂,所以newCap - 1的高位全0</p><p><strong>若e.hash值只用自身的hashcode,index只会和e.hash的低位做&amp;操作.这样一来,index的值就只有低位参与运算,高位毫无存在感,从而会带来哈希冲突的风险</strong>所以在计算key的hashCode时,用其自身hashCode与其低16位做异或操作，这也就<strong>让高位参与到index的计算中</strong>来了,即<strong>降低了哈希冲突的风险又不会带来太大的性能问题</strong></p><h3 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h3><blockquote><p>由于1.8引入了红黑树结构，并且为了解决以前遗留的问题，</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 调用putVal的方法</span>    <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Implements Map.put and related methods. * * @param hash hash for key * @param key the key * @param value the value to put * @param onlyIfAbsent if true, don't change existing value * @param evict if false, the table is in creation mode. * @return previous value, or null if none */</span><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span>               <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span>     <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> p<span class="token punctuation">;</span>     <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span> <span class="token comment">// n保存桶的个数，i保存了应该放在哪个桶中</span>    <span class="token comment">// 首先判断是否需要初始化</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">// 这里的 (n - 1) &amp; hash 相当于 Java 7 中的indexFor()方法，用于确定元素应该放在哪个桶中</span>   <span class="token comment">// (n - 1) &amp; hash 有以下两个好处：1、放入的位置不会大于桶的个数 2、用到了hash值，确定其应放的对应的位置</span>    <span class="token comment">// 这里是判断指定位置上是不是空的，如果是空的直接创建节点放入，如果不是，执行else</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e<span class="token punctuation">;</span>         <span class="token class-name">K</span> k<span class="token punctuation">;</span>ey        <span class="token comment">//  节点的hash相同，并且，key相同或者 key不为空并且key在值上要等于k；此时说明该元素已经存在hash表中，直接覆盖</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            e <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token comment">// 否则如果是红黑树的结构，就用红黑树的方法插入它</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>            e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 否则用链表的形式去插入</span>                       <span class="token comment">// 这里这个循环是为了计数，看看是否达到了阈值</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 尾插法插入</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 这里是判断桶中的元素大于了阈值，就去调用这个方法来转成红黑树，（不一定能成功，因为还有一个条件64）</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// -1 for 1st</span>                        <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 如果遇到了相同的元素，跳出循环</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token comment">// 移动指针，方便继续取p.next</span>                p <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// existing mapping for key</span>            <span class="token class-name">V</span> oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token comment">// 根据规则选择是否覆盖value</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">++</span>modCount<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span>        <span class="token comment">// size大于阈值（容量*加载因子）</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://mmbiz.qpic.cn/mmbiz_png/7B8iaauAfclMROAyV9gMNAZtanwhQZmIrqlUJic8Psu92oicku0sUNkI2JBmuvndVamTowntyicpjpdobGgjuSD6ibQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/7B8iaauAfclMROAyV9gMNAZtanwhQZmIrBE8HGibIYffm5ENuPAwiakchicduU1c7Wp5RMNPVejDuJdhqB4cUpfaicw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/7B8iaauAfclMROAyV9gMNAZtanwhQZmIrumcxcAXyY3k1S4fxg3Cyw8lZZg9ylnMxKFN88ByWC1r0ocCo8hS1Mg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><h3 id="扩容-resize（）"><a href="#扩容-resize（）" class="headerlink" title="扩容 resize（）"></a>扩容 resize（）</h3><blockquote><p>jdk1.8的扩容方法和初始化方法合为一体了</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/7B8iaauAfclMROAyV9gMNAZtanwhQZmIrumogH8GNxBmfddxJCIkxsAhZznYNiaarWeMXibkX8XB5frXqrHxkFUcQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Initializes or doubles table size.  If null, allocates in * accord with initial capacity target held in field threshold. * Otherwise, because we are using power-of-two expansion, the * elements from each bin must either stay at same index, or move * with a power of two offset in the new table. *  1.8的初始化和扩容放到了一块 * @return the table */</span><span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 用来保存旧表</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token comment">// 存储桶容量</span>    <span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">// 保存旧阈值</span>    <span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span>    <span class="token comment">// 初始化新桶容量，阈值为0</span>    <span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 这里说明是扩容</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 判断旧筒容量是否大于等于最大桶容量</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 赋值为最大桶容量</span>            threshold <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 否则如果 新筒容量为2倍的旧容量，并且要小于最大桶容量，，并且，旧容量要大于等于默认初始容量16</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token generics"><span class="token punctuation">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;</span><span class="token operator">&amp;</span>                 oldCap <span class="token punctuation">></span></span><span class="token operator">=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span>            newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 更新新阈值，这是数学知识</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">// 调用了含参构造方法的扩容</span>    <span class="token comment">// 原容量小于等于0，但是阈值大于0，那么新容量就位原来的阈值（阈值在调用构造函数时就会确定，但容量不会)</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// initial capacity was placed in threshold</span>        newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span>        <span class="token comment">// 这里是默认初始化</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>               <span class="token comment">// zero initial threshold signifies using defaults</span>        newCap <span class="token operator">=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">;</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>DEFAULT_LOAD_FACTOR <span class="token operator">*</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// </span>        <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>newCap <span class="token operator">*</span> loadFactor<span class="token punctuation">;</span>        <span class="token comment">// 这里重新计算新的阈值</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span>newCap <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>MAXIMUM_CAPACITY <span class="token operator">?</span>                  <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 赋值给阈值threshold</span>    threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"rawtypes"</span><span class="token punctuation">,</span><span class="token string">"unchecked"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// 创建新的表，将旧表中的元素进行重新放入</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span>    table <span class="token operator">=</span> newTab<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// oldTab 复制到 newTab</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token comment">// 链表只有一个节点，直接赋值，这里要重新计算hash，位置是在原位置或者原位置+旧容量</span>                    newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                    <span class="token comment">// 如果节点是红黑树的情况，调用红黑树的插入方式</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// 否则调用链表的插入操作，尾插法</span>                <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// preserve order</span>                    <span class="token comment">// lo 和 hi 分别为两个链表，保存了原来一个桶中元素被拆分后的两个链表</span>                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> loHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> loTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> hiHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> hiTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span>                    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>                        next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                                loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                                hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> newTab<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>举个例子，图解一下扩容操作</strong></p><blockquote><p>假设hash表中的桶个数为4，其中4，8，12，0，都被放在了下标为0的桶中。要进行扩容操作，将元素hash值与旧容量（oldCap）进行与操作，如果为0，放在loHead数组中，否则放在loTail数组中。</p></blockquote><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200913155253.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>    next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token comment">// 当前元素的hash值和容量进行按位与，决定被分配到哪个链表中</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token keyword">else</span>            loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>        loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token keyword">else</span>            hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>        hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>经过一系列计算，移动，我们把所有的元素都分开了。</p></blockquote><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200913155514.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 通过头指针直接将链表放入桶中</span><span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200913155710.png"></p><p><strong>总结</strong></p><ul><li>先将原桶中的元素的<strong>hash值与旧容量进行按位与</strong>操作<ul><li>如果结果为0，就放入lo链表中</li><li>如果结果不为0，就放入hi链表中</li></ul></li><li>lo链表中的元素继续放在新的哈希表中原来的位置</li><li>hi链表中的元素放在新的哈希表中，扩容后相对于原来的位置上(j+oldCap)<ul><li><strong>两个桶之间的间隔数就为增加原来哈希表的容量</strong></li></ul></li></ul><p><strong>好处</strong></p><ul><li>相较于1.7的头插法，尾插法顺序插入，减少了发生死锁的概率</li><li>使得元素变得相对均匀地存在hash表中</li></ul><h3 id="移除remove"><a href="#移除remove" class="headerlink" title="移除remove()"></a>移除remove()</h3><blockquote><p>remove的两个重载方法，最终都走的removeNode实现的</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e<span class="token punctuation">;</span>    <span class="token comment">// 调用removeNode()方法，返回其返回的结果</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span>        <span class="token keyword">null</span> <span class="token operator">:</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*** 真正实现的移除元素*/</span><span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">Object</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">,</span>                               <span class="token keyword">boolean</span> matchValue<span class="token punctuation">,</span> <span class="token keyword">boolean</span> movable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> index<span class="token punctuation">;</span>        <span class="token comment">// 桶中有元素, p保存了桶中的首个元素</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>index <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> node <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> e<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span> <span class="token class-name">V</span> v<span class="token punctuation">;</span>                        <span class="token comment">// 找到对应的元素，保存在node中</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                node <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                    <span class="token comment">// 如果是红黑树类型，调用获取树节点的方法，获取这个节点</span>                    node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTreeNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 遍历链表，找到要删除的元素</span>                    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span>                             <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            node <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        p <span class="token operator">=</span> e<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>                        <span class="token comment">// 该元素不为空，说明已经找到了，不是个空值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>matchValue <span class="token operator">||</span> <span class="token punctuation">(</span>v <span class="token operator">=</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">==</span> value <span class="token operator">||</span>                                 <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 如果是树节点，就调用红黑树的删除方法</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeTreeNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> movable<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 如果是第一个元素，桶的索引就保存其下一个元素</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> p<span class="token punctuation">)</span>                    tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                                <span class="token comment">// 否则就不在指向这个元素</span>                <span class="token keyword">else</span>                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                                <span class="token operator">++</span>modCount<span class="token punctuation">;</span>                <span class="token operator">--</span>size<span class="token punctuation">;</span>                <span class="token function">afterNodeRemoval</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这是个空方法，可以重写他，满足我们的业务需要</span>                <span class="token keyword">return</span> node<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> hashmap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hashmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM04</title>
      <link href="2020/10/11/jvm04/"/>
      <url>2020/10/11/jvm04/</url>
      
        <content type="html"><![CDATA[<h1 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h1><h2 id="栈，堆，方法区的交互关系"><a href="#栈，堆，方法区的交互关系" class="headerlink" title="栈，堆，方法区的交互关系"></a>栈，堆，方法区的交互关系</h2><p><img src="https://s1.ax1x.com/2020/10/11/0gnfC8.png" alt="从线程共享的角度看"></p><blockquote><p>reference是引用</p></blockquote><p><img src="https://s1.ax1x.com/2020/10/11/0gnL5V.png" alt="实例"></p><h2 id="方法区的理解"><a href="#方法区的理解" class="headerlink" title="方法区的理解"></a>方法区的理解</h2><blockquote><p>尽管所有的方法区在逻辑上是属于堆的一部分，但一些简单的实现可能不会选择区进行垃圾收集或者进行压缩。但对于HotSpot虚拟机而言，方法区还有一个别名叫做 Non-Heap（非堆），目的就是为了和堆分开。<strong>方法区可以看作一块独立于java堆的内存空间</strong></p></blockquote><ul><li>方法区与java堆一样，<strong>是各个线程共享的内存区域</strong></li><li>方法区<strong>在jvm启动的时候被创建</strong>，并且他的<strong>实际物理内存空间</strong>中和java堆区一样都可以是<strong>不连续的</strong></li><li>方法区的大小，跟堆空间一样，可以选择<strong>固定大小或者可拓展</strong></li><li>方法区的大小决定了系统可以保存多少个类，如果系统定义了太多的类，导致方法区溢出，jvm同样会抛出OOM</li><li>关闭JVM就会释放这个区域的内存</li></ul><blockquote><p>Hotspot虚拟机中方法区的演进</p></blockquote><ul><li>在jdk7及以前，习惯上把方法区称为永久代。jdk8开始，使用元空间取代了永久代</li><li>本质上方法区和永久代并不等价，仅仅是堆hotspot而言的。对于如何实现方法区，不做统一要求。</li></ul><h2 id="设置方法区大小与OOM"><a href="#设置方法区大小与OOM" class="headerlink" title="设置方法区大小与OOM"></a>设置方法区大小与OOM</h2><blockquote><p>jdk7以前</p></blockquote><ul><li>-XX:PermSize设置永久代初始分配空间。默认值是20.75m</li><li>-XX:MaxPermSize设置永久代最大可分配空间。32位机器默认是64m，64位机器默认是82m</li><li>当JVM加载的类信息超过了这个值，就会报OOM</li></ul><blockquote><p>jdk8之后</p></blockquote><ul><li>-XX:MetaspaceSize设置元空间初始分配空间</li><li>-XX:MaxMetaspaceSize设置元空间最大可分配空间</li></ul><p><img src="https://s1.ax1x.com/2020/10/11/0gtoKx.png" alt="1.8之后"></p><blockquote><p>如何解决OOM</p></blockquote><p><img src="https://s1.ax1x.com/2020/10/11/0gUA0K.png" alt="内存溢出和内存泄漏"></p><h2 id="方法区的内部结构"><a href="#方法区的内部结构" class="headerlink" title="方法区的内部结构"></a>方法区的内部结构</h2><p><img src="https://s1.ax1x.com/2020/10/11/0grjJK.png" alt="简图"></p><blockquote><p>《深入理解Java虚拟机》书中对方法区（Method Area）存储内容描述如下：</p><p>它用于存储已被虚拟机加载的<strong>类型信息</strong>、<strong>常量</strong>、<strong>静态变量</strong>、<strong>即时编译器编译后的代码缓存</strong>等等</p></blockquote><p><img src="https://s1.ax1x.com/2020/10/11/0gy9pT.png" alt="经典而规范的版本"></p><h3 id="类型信息"><a href="#类型信息" class="headerlink" title="类型信息"></a>类型信息</h3><blockquote><p>对于每个加载的类型（class、interface、enum、annotation），JVM必须在方法区中存储以下类型信息：</p><ol><li>这个类型的完整有效名称（包名.类名）</li><li>这个类型直接父类的完整有效名（对于interface或是java.lang.Object，都没有父类）</li><li>这个类型的修饰符（public，abstract，final的某个子集）</li><li>这个类型直接接口的一个有序列表</li></ol></blockquote><h3 id="域信息"><a href="#域信息" class="headerlink" title="域信息"></a>域信息</h3><blockquote><ul><li>JVM必须在方法区中保存类型的所有域的相关信息以及域的声明顺序</li><li>域的相关信息包括：名称、类型、修饰符</li></ul></blockquote><h3 id="方法信息"><a href="#方法信息" class="headerlink" title="方法信息"></a>方法信息</h3><blockquote><ul><li>方法名称</li><li>方法返回类型</li><li>方法参数的数量和类型（按顺序）</li><li>方法的修饰符</li><li>方法的字节码、操作数栈、局部变量表以及大小（abstract和native除外）</li><li>异常表（abstract和native方法除外）<ul><li>每个异常处理的开始位置，结束位置，代码处理在程序计数器中的偏移地址，被捕获的异常类的常量池索引</li></ul></li></ul></blockquote><h3 id="non-final的类变量"><a href="#non-final的类变量" class="headerlink" title="non-final的类变量"></a>non-final的类变量</h3><ul><li>静态变量和类关联在一起，随着类的加载而加载，他们成为类数据在逻辑上的一部分</li><li>类变量被类的所有实例共享，<strong>即使没有类实例时也可以访问它</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">//</span>        <span class="token comment">// 这里不会报空指针异常</span>        <span class="token comment">// 因为类变量即使没有类实例也能访问他</span>        <span class="token comment">//</span>        order<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>补充说明：全局常量：static final</p></blockquote><p>被声明为final的类变量的处理方法则不同，每个全局常量在编译的时候就被分配了。</p><p><img src="https://s1.ax1x.com/2020/10/11/0gRH10.png" alt="全局常量"></p><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a><strong>运行时常量池</strong></h3><blockquote><p>运行时常量池 vs 常量池</p></blockquote><ul><li>方法区，内部包含了运行时常量池</li><li>字节码文件，内部包含了常量池</li><li>要弄清楚方法区，需要理解清楚ClassFile，因为加载类的信息都放在方法区</li><li>要弄清楚方法区的运行时常量池，需要理解清楚ClassFile中的常量池</li></ul><h4 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h4><p><img src="https://s1.ax1x.com/2020/10/11/0gWxr8.png" alt="0gWxr8.png"></p><p>一个有效的字节码文件中除了包含类的版本信息，字段，方法以及接口等，还需要包含一项信息就是常量池表，包括各种字面量和对类型、域和方法的符号引用</p><h4 id="运行时常量池-1"><a href="#运行时常量池-1" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><blockquote><p>用于存放编译器生成的各种字面量与符号引用，<strong>这部分内容将在类加载后存放到方法区的运行时常量池中</strong></p><ul><li>运行时常量池，在加载类和接口到虚拟机后，就会创建对应的运行时常量池</li><li>jvm为每个已加载的类型（类或接口）都维护一个常量池。池中的数据项像数组项一样，是通过索引访问的。</li><li>运行时常量池中包含多种不同的常量，包括编译器就已经明确的数值字面量，也包括到运行期解析后才获得的方法或者字段引用。此时不再是常量池中的符号地址了，这里换为真实地址。<ul><li>运行时常量池，相对于Class文件常量池的另一个重要特征是：具备动态性</li></ul></li><li>运行时常量池类似于传统编程语言中的符号表，但是它所包含的数据却比符号表还要丰富一些。</li><li>当创建的类或接口的运行时常量池时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值，则JVM会抛OOM</li></ul></blockquote><h2 id="方法区的演进"><a href="#方法区的演进" class="headerlink" title="方法区的演进"></a>方法区的演进</h2><ol><li><p>只有<strong>HotSpot</strong>才有永久代</p></li><li><p>HotSpot方法区的变化：</p><table><thead><tr><th align="center">jdk版本</th><th align="center">变化</th></tr></thead><tbody><tr><td align="center">jdk1.6及以前</td><td align="center">有永久代，静态变量放在永久代上</td></tr><tr><td align="center">jdk1.7</td><td align="center">有永久代，字符串常量池，静态变量移除，保存在堆中</td></tr><tr><td align="center">jdk1.8及以后</td><td align="center">无永久代，类型信息，字段，方法，常量保存在本地内存的元空间。<strong>但字符串常量池，静态变量仍在堆中</strong></td></tr></tbody></table><p><img src="https://s1.ax1x.com/2020/10/14/05M00K.png" alt="1.6"></p></li></ol><p>   <img src="https://s1.ax1x.com/2020/10/14/05Mh0f.png" alt="1.7"></p><p><img src="https://s1.ax1x.com/2020/10/14/05MHpj.png" alt="1.8"></p><blockquote><p>问题：<strong>为什么永久代要被替换成元空间？</strong></p></blockquote><ol><li>首先，方法区的大小是难以确定下来的，如果我们一开始设定了方法区的大小，那么是会容易出现full gc的，我们知道full gc是十分耗费时间的，而且，如果full gc结束后，还是放不下，就会出现OOM。</li><li>其次，放在本地内存，它只受本地内存限制，大大降低了gc的频率。</li></ol><blockquote><p>问题：<strong>元空间是如何GC的</strong></p></blockquote><p><strong>MetaspaceSize</strong>是 metaspaceGC发生的初始阈值，也是最小阈值，默认20.8M左右，与之对比的主要是指Klass Metaspace与NoKlass Metaspace两块committed的内存和。</p><ul><li>触发metaspaceGC的阈值是不断变化的：当元空间触发gc的时候，会回收一些垃圾，如果回收了大量的垃圾，这个阈值就会相应的降低一点，如果只回收了少量的垃圾，那么这个阈值会适当的增加一点。目的就是为了降低gc频率</li></ul><p><strong>静态变量的存放位置</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticObjTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 静态内部类对象</span>        <span class="token keyword">static</span> <span class="token class-name">ObjectHolder</span> staticObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 内部类对象</span>        <span class="token class-name">ObjectHolder</span> instanceObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 在方法中的内部类对象</span>            <span class="token class-name">ObjectHolder</span> localObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ObjectHolder</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Test</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticObjTest<span class="token punctuation">.</span>Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s1.ax1x.com/2020/10/14/05olkR.png" alt="05olkR.png"></p><blockquote><p>测试发现，三个对象的数据在内存中的地址都落在Eden区范围内，所以结论：只要是对象实例，必然会在java堆中分配</p></blockquote><h2 id="方法区的垃圾细节"><a href="#方法区的垃圾细节" class="headerlink" title="方法区的垃圾细节"></a>方法区的垃圾细节</h2><blockquote><p><strong>方法区的垃圾收集主要回收两部分内容：常量池中废弃的常量和不再使用的类型</strong></p></blockquote><h2 id="方法区的垃圾回收"><a href="#方法区的垃圾回收" class="headerlink" title="方法区的垃圾回收"></a>方法区的垃圾回收</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://s1.ax1x.com/2020/10/14/05jAhQ.png" alt="运行时数据区"></p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h3><blockquote><p>三面：说一下JVM内存模型吧，有哪些区？分别干什么的？</p></blockquote><h3 id="蚂蚁金服"><a href="#蚂蚁金服" class="headerlink" title="蚂蚁金服"></a>蚂蚁金服</h3><blockquote><ul><li>java8的内存分代改进</li><li>jvm内存分为哪几个区？每个区的作用是什么</li><li>一面：JVM内存分布/内存结构？栈和堆的区别？堆的结构？为什么两个survivor区？</li><li>二面：Eden和Survior的比例分配</li></ul></blockquote><h3 id="小米"><a href="#小米" class="headerlink" title="小米"></a>小米</h3><blockquote><p>JVM内存分区，为什么要有新生代和老年代？</p></blockquote><h3 id="字节跳动"><a href="#字节跳动" class="headerlink" title="字节跳动"></a>字节跳动</h3><blockquote><p>二面：JVM的内存分区？</p><p>二面：讲讲JVM运行时数据库区</p><p>什么时候对象会进入老年代？</p></blockquote><h3 id="京东"><a href="#京东" class="headerlink" title="京东"></a>京东</h3><blockquote><p>JVM的内存结构，Eden和Survivor比例</p><p>JVM内存为什么要分成新生代，老年代，持久代。新生代中为什么要分为Eden和Survivor</p></blockquote><h3 id="天猫"><a href="#天猫" class="headerlink" title="天猫"></a>天猫</h3><blockquote><p>JVM内存模型以及分区，需要详细到每个分区放什么</p><p>JVM的内存模型，java8做了什么修改</p></blockquote><h3 id="拼夕夕"><a href="#拼夕夕" class="headerlink" title="拼夕夕"></a>拼夕夕</h3><blockquote><p>JVM内存分哪几个区，每个区的作用是什么？</p></blockquote><h3 id="美团"><a href="#美团" class="headerlink" title="美团"></a>美团</h3><blockquote><p>java内存分配</p><p>jvm的永久代中会发生垃圾回收吗？</p><p>jvm内存分区，为什么要有新生代和老年代？</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM04</title>
      <link href="2020/10/11/jvm05/"/>
      <url>2020/10/11/jvm05/</url>
      
        <content type="html"><![CDATA[<h1 id="对象的实例化内存布局与访问定位"><a href="#对象的实例化内存布局与访问定位" class="headerlink" title="对象的实例化内存布局与访问定位"></a>对象的实例化内存布局与访问定位</h1><h2 id="对象的实例化"><a href="#对象的实例化" class="headerlink" title="对象的实例化"></a>对象的实例化</h2><p><strong>引子</strong></p><blockquote><p>美团：</p><ul><li>对象在JVM中是怎么存储的？</li><li>对象头信息里面有哪些东西？</li></ul><p>蚂蚁金服：</p><ul><li>java对象头里面有什么？</li></ul></blockquote><h3 id="对象创建的方式"><a href="#对象创建的方式" class="headerlink" title="对象创建的方式"></a>对象创建的方式</h3><p><img src="https://s1.ax1x.com/2020/10/14/0IsZTO.png" alt="对象的创建方式"></p><p><strong>为对象分配内存</strong>：</p><p><img src="https://s1.ax1x.com/2020/10/14/0I23o6.png" alt="创建对象的步骤"></p><ul><li>加载类元信息</li><li>为对象分配内存</li><li>处理并发问题</li><li>属性的默认初始化（零值初始化）</li><li>设置头信息</li><li>属性的显示初始化，代码块初始化，构造器初始化</li></ul><h2 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h2><h3 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h3><blockquote><p><strong>运行时元数据</strong></p></blockquote><ul><li>哈希值（HashCode）</li><li>GC分代年龄（年龄计数器）</li><li>锁状态标志</li><li>线程池有的锁</li><li>偏向线程id</li><li>偏向时间戳</li></ul><blockquote><p><strong>类型指针</strong>（并不是所有的对象都有）</p></blockquote><p>指向类元数据InstanceKlass，确定该对象所属的类型</p><blockquote><p>如果是<strong>数组</strong>，还要<strong>记录数组的长度</strong></p></blockquote><h3 id="实例数据"><a href="#实例数据" class="headerlink" title="实例数据"></a>实例数据</h3><blockquote><p>他是对象真正存储的有效信息，包括程序代码中定义的各种类型的字段（包括从父类继承下来的和本身拥有的字段）</p></blockquote><p><strong>规则</strong></p><ul><li>相同宽度的字段总是被分配在一起</li><li>父类中定义的变量会出现在子类之前</li><li>如果CompactFileds参数为true（默认true）：子类的窄变量可能插入到父类变量的空隙</li></ul><h3 id="对齐填充"><a href="#对齐填充" class="headerlink" title="对齐填充"></a>对齐填充</h3><blockquote><p>不是必须的，仅仅起到占位符的作用</p></blockquote><h3 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h3><p>案例代码：</p><p><img src="https://s1.ax1x.com/2020/10/15/0oHn0O.png" alt="0oHn0O.png"></p><p>分析：</p><p><img src="https://s1.ax1x.com/2020/10/15/0oIpin.png" alt="0oIpin.png"></p><h2 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h2><blockquote><p>JVM是如何通过栈帧中的对象引用访问到其内部的对象实例的？</p></blockquote><p><img src="https://s1.ax1x.com/2020/10/15/0ob854.png"></p><p>栈帧上通过reference访问堆区创建的那个对象</p><h4 id="对象访问方式"><a href="#对象访问方式" class="headerlink" title="对象访问方式"></a>对象访问方式</h4><blockquote><p>句柄访问</p></blockquote><p><img src="https://s1.ax1x.com/2020/10/15/0obIIg.png" alt="图示"></p><p><strong>优点</strong>：</p><ul><li>reference中存储稳定的句柄地址，对象在堆空间中被移动时<strong>只会改变句柄中实例数据指针</strong>，reference本身不需要改变。</li></ul><p><strong>缺点</strong>：</p><ul><li>需要在堆内存中开辟一块空间来记录句柄，浪费空间，还速度慢</li></ul><blockquote><p>直接指针（Hotspot采用的就是这种）</p></blockquote><p><a href="https://imgchr.com/i/0oqksx"><img src="https://s1.ax1x.com/2020/10/15/0oqksx.png" alt="图示"></a></p><h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><blockquote><p>直接内存是java堆外的、直接向系统申请的内存区间</p><ul><li>来源于<strong>NIO</strong>，通过存在堆中的<code>DirectByteBuffer</code>操作native内存</li></ul></blockquote><p>通过ByteBuffer的allocateDirect()可以直接申请本地内存，我们可以通过System.gc()回收本地内存</p><p><img src="https://s1.ax1x.com/2020/10/15/0TAOZF.png" alt="0TAOZF.png"></p><blockquote><ul><li>通常，<strong>NIO</strong>访问直接内存的速度会优于java堆。读写性能高<ul><li>出于性能的考虑，读写频繁的场合可能会考虑使用直接内存</li><li>java的<strong>nio库允许java程序直接使用内存，用于数据缓冲区</strong></li></ul></li></ul></blockquote><p><img src="https://s1.ax1x.com/2020/10/15/0TZyx1.png" alt="0TZyx1.png"></p><blockquote><p>直接内存概述:</p></blockquote><ul><li>可能导致OOM异常<ul><li>由于直接内存在java堆外，因此他的大小不会受-Xmx指定的最大堆大小，但是系统内存是有限的，java堆和直接内存的总和依然受限于操作系统能给出的最大内存。</li></ul></li><li>缺点：<ul><li>回收成本高</li><li>不受JVM垃圾回收管理</li></ul></li><li><strong>直接内存可以通过 MaxDirectMemorySize 来设置</strong></li><li>如果不指定，默认与堆的最大值-Xmx参数值一致</li></ul><p><img src="https://s1.ax1x.com/2020/10/16/0HpO3V.png" alt="直接内存溢出例子"></p><blockquote><p>java process memory = java heap + native memory</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM03</title>
      <link href="2020/10/09/jvm03/"/>
      <url>2020/10/09/jvm03/</url>
      
        <content type="html"><![CDATA[<h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><blockquote><p>线程共享堆空间和方法区</p></blockquote><p><img src="https://s1.ax1x.com/2020/10/09/0rsWgs.png" alt="堆"></p><h2 id="堆的核心概述"><a href="#堆的核心概述" class="headerlink" title="堆的核心概述"></a>堆的核心概述</h2><blockquote><p>一个JVM实例只存在一个堆内存，堆也是java内存管理的核心区域</p><ul><li>java堆区在<strong>jvm启动的时候创建</strong>，其<strong>空间大小也就确定了</strong>（可以被调节）。是JVM管理的最大一块内存空间</li><li>堆可以<strong>处于物理上不连续的内存空间中，但在逻辑上是连续的</strong></li><li>所有线程共享堆，在这里还可以划分线程私有的缓冲区(TLAB)</li></ul></blockquote><ul><li><p>数组和对象可能永远不会存储在栈上，因为栈帧中保存引用，这个引用指向对象或者数组在栈中的位置</p></li><li><p>在方法结束后，堆中的对象不会马上被移除，仅仅在垃圾收集的时候才会被移除</p></li><li><p>堆是GC执行垃圾回收的重点区域</p></li></ul><h2 id="设置堆内存大小与OOM"><a href="#设置堆内存大小与OOM" class="headerlink" title="设置堆内存大小与OOM"></a>设置堆内存大小与OOM</h2><h3 id="内存细分"><a href="#内存细分" class="headerlink" title="内存细分"></a>内存细分</h3><blockquote><p>现代垃圾收集器大部分都基于分代收集理论设计，堆空间细分为：</p><p><strong>java7以及之前</strong>分为 <strong>新生区+养老区+永久区</strong></p><p><strong>java8及以后</strong>分为 <strong>新生区</strong>+<strong>养老区</strong>+<strong>元空间</strong></p></blockquote><p><img src="https://s1.ax1x.com/2020/10/09/0rRPc4.png" alt="分代理论"></p><blockquote><p><strong>在生产环境中我们通常将初始化堆内存和最大的堆内存设置成相同的值</strong>，防止不断的扩容，GC，导致用户线程阻塞。</p></blockquote><ul><li>-Xms 堆的初始化内存</li><li>-Xmx 堆的最大内存</li></ul><h3 id="OOM举例"><a href="#OOM举例" class="headerlink" title="OOM举例"></a>OOM举例</h3><p><img src="https://s1.ax1x.com/2020/10/10/0ykSts.png" alt="0ykSts.png"></p><p><img src="https://s1.ax1x.com/2020/10/10/0yF8Fs.png" alt="监控"></p><h2 id="年轻代与老年代"><a href="#年轻代与老年代" class="headerlink" title="年轻代与老年代"></a>年轻代与老年代</h2><blockquote><p>java堆空间分为  <strong>年轻代</strong>，<strong>老年代</strong></p><p>年轻代可以划分为 **伊甸园区(Eden空间)**，幸存者0区，幸存者1区（有时也叫做from区，to区）</p></blockquote><p><img src="https://s1.ax1x.com/2020/10/10/0ykhvV.png" alt="分区"></p><blockquote><p>配置新生代与老年代的结构比</p></blockquote><ul><li>默认 -XX:NewRatio = 2 表示新生代占1，老年代占2，新生代占整个堆的1/3</li><li>可以修改 -XX:NewRatio = 4 表示新生代占1，老年代占4，新生代占整个堆的1/5</li></ul><blockquote><p>新生代中各个部分的比例</p></blockquote><p>伊甸园区：幸存者0区：幸存者1区的比例默认为：8：1：1</p><p><strong>设置新生代中伊甸园区和幸存者区的比例</strong></p><ul><li><code>-XX:SurvivorRatio = 8 </code>可以显示的设置比例为8：1：1</li></ul><blockquote><ul><li><p><strong>几乎所有的</strong>java对象都是在伊甸园区被new出来的</p></li><li><p>绝大部分的java对象的销毁都在新生代进行了</p><ul><li>有专门研究表明 80%的对象都是活不久的</li></ul></li><li><p>可以使用参数 <code>-Xmn</code>设置新生代最大内存大小（一般默认）</p></li></ul></blockquote><h2 id="图解对象分配过程"><a href="#图解对象分配过程" class="headerlink" title="图解对象分配过程"></a>图解对象分配过程</h2><blockquote><ol><li>new 的对象先放在伊甸园区，此区有大小限制</li><li>当伊甸园区的空间填满时，程序又要创建对象，jvm的垃圾回收器将对伊甸园区进行GC，将伊甸园区中<strong>不再被其他对象所引用的对象进行销毁</strong>。并把伊甸园区幸存下来的放到to区，from区幸存下来的也放入to区，如果放不下就申请老年代空间。如果还放不下就OOM</li><li>如果执行完Minor  GC后新对象能够在伊甸园区放得下就分配空间。如果执行Minor GC之后伊甸园区还放不下，就申请老年代空间。</li><li>如果老年代能放得下就放入老年代，并分配内存。如果放不下就会进行一次Full GC。并再次判断老年代能否放的下，如果放得下就分配空间，如果还放不下就OOM</li></ol></blockquote><p><img src="https://s1.ax1x.com/2020/10/10/0y3l0s.png" alt="对象分配的流程"></p><p><img src="https://s1.ax1x.com/2020/10/10/0yYM80.png" alt="0yYM80.png"></p><blockquote><p>总结</p></blockquote><ul><li>针对幸存者s0,s1区，复制之后有交换，谁空谁是to</li><li>关于垃圾回收：新生代中频繁发生，很少在老年代发生，几乎不在元空间/永久代发生</li></ul><h2 id="Minor-GC-Major-GC-Full-GC"><a href="#Minor-GC-Major-GC-Full-GC" class="headerlink" title="Minor GC Major GC Full GC"></a>Minor GC Major GC Full GC</h2><blockquote><p>HotSpot VM中的gc分为两大种类型：部分收集（Partial GC），整堆收集（Full GC）</p></blockquote><ul><li><p>部分收集：不是完整的收集整个java堆</p><ul><li>新生代收集（Minor GC/ Young GC）</li><li>老年代收集（Major GC/ Old GC）<ul><li><strong>目前只有CMS GC会有单独收集老年代的行为</strong></li></ul></li><li>混合收集（Mixed GC）：收集整个新生代以及部分老年代的垃圾收集<ul><li>目前只有G1 GC会有这种行为</li></ul></li></ul></li><li><p>整堆收集：收集整个java堆和方法区的垃圾收集</p></li></ul><blockquote><p>新生代GC触发机制：</p></blockquote><ul><li>当伊甸园区空间不足以分配的时候会触发</li><li>幸存者区不会触发GC，他只是被动的触发了GC</li><li>Minor GC会引发STW，暂停其他用户的线程，等垃圾回收结束，用户线程才恢复运行</li></ul><blockquote><p>老年代GC触发机制</p></blockquote><ul><li>出现了Major GC，经常会伴随至少一次的Minor GC（非绝对，在Parallel Scavenge收集器中收集策略里有直接进行Major GC的策略选择）</li><li>Major GC的速度一般会比Minor GC慢10倍以上，STW的时间更长</li><li>如果Major GC后内存还不足，就OOM</li></ul><blockquote><p>Full GC触发机制</p><p><strong>full gc在开发或者调优中尽量要避免，这样暂时时间会短一些</strong></p></blockquote><ul><li>调用System.gc()时候，系统建议执行Full GC 但是不必然执行</li><li>老年代空间不足</li><li>方法区空间不足</li><li>通过Minor GC后进入老年代的平均大小大于老年代的可用内存</li><li>由伊甸园区，from区向to区复制时，对象大小大于to区可用内存，则把该对象转入老年代，并且老年代的可用内存小于该对象的大小</li></ul><h2 id="堆空间分代思想"><a href="#堆空间分代思想" class="headerlink" title="堆空间分代思想"></a>堆空间分代思想</h2><blockquote><p>分代的唯一理由就是优化GC性能。</p></blockquote><p>如果没有分代，那么所有的对象都在一块，这样gc的时候需要对堆的所有区域进行扫描，在进行操作，很没有效率。</p><h2 id="内存分配策略"><a href="#内存分配策略" class="headerlink" title="内存分配策略"></a>内存分配策略</h2><blockquote><p>针对不同年龄段的对象分配原则：</p></blockquote><ul><li>优先分配到Eden</li><li>大对象直接分配到老年代<ul><li>尽量避免程序中出现过多的大对象</li></ul></li><li>长期存活的分配到老年代</li><li>动态对象年龄判断<ul><li>如果<strong>幸存者区中相同年龄的所有对象大小的总和大于幸存者空间的一半</strong>，年龄大于或者等于该年龄对象的可以直接晋升到老年代，无需等到MaxTenuringThreshold中要求的年龄</li></ul></li><li>空间分配担保：<code>-XX:HandlePromotionFailure</code></li></ul><h2 id="为对象分配内存-TLAB（Thread-Local-Allocation-Buffer）"><a href="#为对象分配内存-TLAB（Thread-Local-Allocation-Buffer）" class="headerlink" title="为对象分配内存:TLAB（Thread Local Allocation Buffer）"></a>为对象分配内存:TLAB（Thread Local Allocation Buffer）</h2><blockquote><p>为什么要用TLAB？</p></blockquote><ul><li>堆区是线程共享的，任何线程都能访问堆区中的共享数据</li><li>由于对象实例的创建在JVM中非常频繁，因此在<strong>并发环境下从堆区中划分内存空间是线程不安全</strong>的</li><li>为避免多个线程操作同一地址，需要使用<strong>加锁</strong>等机制，进而<strong>影响分配速度</strong></li></ul><blockquote><p>什么是TLAB？</p></blockquote><ul><li>从内存模型而不是垃圾收集的角度，对Eden区域继续进行划分，JVM为每个线程分配了一个私有缓存区域，他包含在Eden区域中</li><li>多线程同时分配内存的时候，使用TLAB可以避免一系列非线程安全问题，同时还能提升内存分配的吞吐量，因此我们可以将这种内存分配方式称为 <strong>快速分配策略</strong></li><li>所有的openjdk衍生出来的jvm都提供了TLAB设计</li></ul><p><strong>补充说明</strong></p><p><img src="https://s1.ax1x.com/2020/10/10/0yO2uR.png" alt="TLAB补充说明"></p><p><strong>对象分配过程：TLAB</strong></p><p><img src="https://s1.ax1x.com/2020/10/10/0yXSPS.png" alt="0yXSPS.png"></p><h2 id="小结堆空间的参数设置"><a href="#小结堆空间的参数设置" class="headerlink" title="小结堆空间的参数设置"></a>小结堆空间的参数设置</h2><blockquote><p>小结常用参数 👉 <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html">官方说明</a></p></blockquote><ul><li>-XX:+PrintFlagsInitial  查看所有的参数的默认初始值</li><li>-XX:+PrintFlagsFinal  查看所有的参数的最终值</li><li>-Xms  初始化堆空间内存（默认物理内存的1/64）</li><li>-Xmx  最大堆空间内存（默认物理内存的1/4）</li><li>-Xmn  设置新生代的大小（初始值以及最大值）</li><li>-XX:NewRatio  配置新生代和老年代在堆结构的占比</li><li>-XX:SurvivorRatio  配置新生代中伊甸园区和幸存者区空间的占比</li><li>-XX:MaxTenuringThreshold  设置新生代垃圾的最大年龄</li><li>-XX:+PrintGCDetails  输出详细的GC处理日志</li><li>-XX:HandlePromotionFailure  是否设置空间分配担保</li><li>打印GC的简要信息  -XX:+PrintGC  或者  -verbose:gc</li></ul><h2 id="堆是分配空间的唯一选择吗？？"><a href="#堆是分配空间的唯一选择吗？？" class="headerlink" title="堆是分配空间的唯一选择吗？？"></a>堆是分配空间的唯一选择吗？？</h2><blockquote><p>在java虚拟机中，对象是在java堆中分配内存的，这是一个普遍的常识。但是，有一种特殊情况，<strong>如果经过逃逸分析后发现，一个对象并没有逃逸出方法的话，那么就可能被优化成栈上分配</strong>。这样就无需在堆上分配内存，也无须进行垃圾回收。这是最常见的一种堆外存储技术。</p></blockquote><p>此外，基于OpenJDK的TaoBaoVM，其中创新的GCIH技术实现off-heap，将生命周期较长的Java对象从heap中移至heap外，并且GC不能管理GCIH内部的对象，以此来降低GC的回收频率和提升GC的回收效率。</p><h3 id="逃逸分析概述"><a href="#逃逸分析概述" class="headerlink" title="逃逸分析概述"></a>逃逸分析概述</h3><blockquote><p><strong>如果将堆上的对象分配到栈，需要使用逃逸分析手段</strong></p><ul><li>这是一种可以有效减少java程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法。</li><li>通过逃逸分析，java Hotspot编译器能够分析出<strong>一个新的对象引用的使用范围</strong>，从而决定是否要将这个对象分配到堆上</li><li>逃逸分析的基本行为就是分析对象动态作用域：<ul><li>当一个对象在方法中被定义后，<strong>对象只在方法内部使用</strong>，则认为<strong>没有发生逃逸</strong>。</li><li>当一个对象在方法中被定义后，<strong>它被外部方法所引用</strong>，则认为<strong>发生逃逸</strong>。例如作为调用参数，传递到其他地方。</li></ul></li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">my_method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">V</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// use v</span>    <span class="token comment">// ....</span>    v <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上就没有发生逃逸对象，则可以分配到栈上，随着方法执行的结束，栈空间被移除 。</p><p><img src="https://s1.ax1x.com/2020/10/11/0ccJC6.png" alt="0ccJC6.png"></p><blockquote><p>如何快速判断是否发生了逃逸分析？创建的对象是否有可能在外部被调用</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">A</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 会发生逃逸</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上例子test会发生逃逸，引用了成员变量的值。</p><h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><blockquote><p>使用逃逸分析，编译器会堆代码做如下优化</p></blockquote><ul><li><p><strong>栈上分配</strong>，将堆分配转化为栈分配，如果一个对象在子程序中被分配，要使指向该对象的指针永远不会逃逸，对象可能是<strong>栈分配的候选</strong>，而不是堆分配。</p><blockquote><p>如果没有发生逃逸的话，对象存在被分配到栈帧上的可能（也可以不分配到栈上分配到堆上）</p></blockquote></li><li><p><strong>同步省略</strong>，如果一个对象被发现只能从一个线程访问到，<strong>那么对于这个对象的操作可以考虑不同步</strong></p><blockquote><p>线程同步的代价是 <strong>降低并发性和性能</strong></p><p>在动态编译同步块的时候，JIT编译器可以借助逃逸分析来判断同步块所使用的锁对象是否能够被一个线程访问而没有被发布到其他线程。如果没有，那么JIT编译器在编译这个同步块的时候就会取消对这部分代码的同步。<strong>大大提高并发性和性能</strong>，这种操作叫做<strong>同步省略</strong>，或者叫<strong>锁消除</strong></p></blockquote></li><li><p><strong>分离对象或标量替换</strong>，有的对象可能<strong>不需要作为一个连续的内存结构存在也可以被访问到</strong>，那么<strong>对象的部分（或者全部）</strong>可以不存储在内存，而是<strong>存储在cpu寄存器</strong>中</p><blockquote><p><strong>标量</strong>是指一个无法再分解成更小的数据的数据，java中的原始数据类型就是标量。相对的，那些可以分解的数据叫做<strong>聚合量</strong>，java中的对象就是聚合量，因为他可以分解成其他聚合量和标量</p><p>在JIT阶段，如果经过逃逸分析，发现一个对象不会被外界访问的话，那么经过JIT优化，就会把这个对象拆解成若干个其中包含的若干个成员变量来代替。这个过程叫做<strong>标量替换</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/***例子*/</span><span class="token keyword">class</span> <span class="token class-name">Point2</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> y<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Point2</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">/**这里的 point没有发生逃逸，他会被替换成 int x = 1, int y = 2来代替*/</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Point2</span> point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 上一个方法被替换成了以下方法，这就是标量替换</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> x<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">sout</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sout</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TestBiaoLiang</span> testBiaoLiang <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestBiaoLiang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        testBiaoLiang<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标量替换大大减少了堆内存的占用，因为一旦不需要创建对象了，那么就不再需要分配堆内存了。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM02</title>
      <link href="2020/09/25/jvm02/"/>
      <url>2020/09/25/jvm02/</url>
      
        <content type="html"><![CDATA[<h1 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h1><blockquote><p><strong>红色区域是一个进程一份</strong>，<strong>共享的</strong>：</p><ul><li>堆</li><li>堆外内存(方法区)（永久代，元空间，代码缓存）</li></ul><p><strong>灰色区域是一个线程一份</strong>，<strong>私有的</strong></p><ul><li>程序计数器</li><li>栈</li><li>本地栈</li></ul></blockquote><p><img src="https://s1.ax1x.com/2020/10/09/0rBTED.png" alt="运行时数据区"></p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><blockquote><p>线程是一个程序里的运行单元，JVM允许一个应用有多个线程并行的执行</p><ul><li>hotspot虚拟机中，每个线程都与操作系统的本地线程直接映射，当java线程准备好以后，会创建一个操作系统的本地线程。java线程终止以后，本地线程也会回收。</li><li>操作系统负责把线程调度到可用的cpu上，去调用java线程中的run()方法</li><li>当最后一个普通线程结束的时候（main方法）虚拟机也会被关闭</li></ul></blockquote><h2 id="程序计数器-PC寄存器"><a href="#程序计数器-PC寄存器" class="headerlink" title="程序计数器(PC寄存器)"></a>程序计数器(PC寄存器)</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>不是cpu寄存器，是jvm中对物理pc寄存器的一种抽象。</p><p>pc寄存器用来存储指向下一条指令的地址，也即将要执行的指令代码。由执行引擎读取下一条指令</p></blockquote><p><img src="https://s1.ax1x.com/2020/10/09/0rBOgI.png" alt="PC寄存器"></p><blockquote><p>他是线程私有的，生命周期与线程的生命周期保持一致。</p><p>任何时间一个线程都只有一个方法在执行，也就是所谓 的<strong>当前方法</strong>。程序计数器会存储当前线程正在执行的java方法的jvm指令地址。或者如果是在执行native方法，则是未指定值(undefined)</p></blockquote><p><strong>程序计数器是唯一一个在java虚拟机中没有规定任何OutOfMemoryError情况的区域</strong></p><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><p><img src="/home/zhy/.config/Typora/typora-user-images/image-20200925180521546.png" alt="image-20200925180521546"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token operator">+</span>j<span class="token punctuation">;</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><blockquote><p>使用PC寄存器存储字节码指令地址有什么用呢？</p></blockquote><p>cpu需要不停的切换各个线程，这时候切换回来后，就得知道接着从哪里开始继续执行。</p><blockquote><p>为什么使用pc寄存器记录当前线程都执行地址呢？</p></blockquote><p>JVM的字节码解释器就需要通过改变PC寄存器的值来明确下一条应该执行什么样的字节码指令</p><h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>虚拟机栈跨平台容易，性能要比寄存器的低。</p><ul><li><strong>每个线程在创建的时候都会创建一个虚拟机栈</strong>，其内部保存一个个的栈帧，对应着一次次的java方法调用</li><li><strong>是线程私有的</strong></li><li>生命周期和线程一致</li><li>主管java程序的运行，保存方法的局部变量（8种基本数据类型，对象的引用地址），部分结果，并参与方法的调用和返回</li></ul></blockquote><p><strong>特点</strong>：</p><ul><li>不存在垃圾回收问题</li><li>每个方法的执行都伴随着压栈</li><li>执行结束后会有出栈工作</li></ul><p><strong>栈中出现的异常</strong></p><blockquote><p>java虚拟机规范<strong>java栈的大小是动态的或者固定不变的</strong></p><ul><li><strong>采用固定大小的虚拟机栈</strong>，在线程创建的时候，要考虑自己的局部变量表什么的是否超过了java虚拟机栈允许的最大容量，此时会抛出一个StackOverflowError</li><li><strong>采用动态扩展的虚拟机栈</strong>，在尝试扩展的时候没办法申请到足够的内存，或者在创建的时候就没有足够的内存去创建虚拟机栈，那么会抛出一个OutOfMemoryError</li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StackErrorTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码会抛出异常：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Exception</span> in thread <span class="token string">"main"</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>StackOverflowError</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>study<span class="token punctuation">.</span></span>StackErrorTest</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">StackErrorTest</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><font color="red">我们可以通过<code>-Xss 具体内存</code>来控制栈内存的大小</font></p><h3 id="栈的存储单位"><a href="#栈的存储单位" class="headerlink" title="栈的存储单位"></a>栈的存储单位</h3><blockquote><p>栈里的数据都是以栈帧(Stack Frame)的格式存在的。</p><p>在线程上正在执行的每个方法都各自对应一个栈帧</p><p>栈帧是一个内存区块，数据集</p></blockquote><p><img src="https://s1.ax1x.com/2020/10/09/0BLxYj.png" alt="当前栈帧"></p><ul><li><p>不同的线程之间所包含的栈帧是不能相互调用的</p></li><li><p>如果当前方法调用了其他方法，方法返回的时候会把结果给前一个栈帧，自己被弹出栈</p></li><li><p>无论是正常的return返回，还是抛出异常结束（没有处理掉），都会导致栈帧被弹出</p><blockquote><p>如图中所示，当方法4出现异常，自身没有处理，栈就会弹出方法4,把异常返回给方法3，看看方法3是否处理，如果还没有处理，则栈弹出方法3并继续返回，直到最后方法1。如果方法1没有处理，那么虚拟机就会挂掉。</p></blockquote></li></ul><h3 id="栈桢的内部结构"><a href="#栈桢的内部结构" class="headerlink" title="栈桢的内部结构"></a>栈桢的内部结构</h3><blockquote><ul><li><strong>局部变量表</strong></li><li><strong>操作数栈</strong></li><li>动态链接（<strong>或指向运行时常量池的方法引用</strong>）</li><li>方法返回地址（<strong>或方法正常退出或者异常退出的定义</strong>）</li><li>一些附加信息</li></ul></blockquote><p><img src="https://s1.ax1x.com/2020/09/25/0ClVv6.png" alt="0ClVv6.png"></p><h4 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h4><blockquote><p>被称为局部变量数组或者本地变量表</p><p><font color="red">定义为一个数字数组，主要用于存储方法参数和自定义在方法体内的局部变量</font>,这些数据类型包括各类基本数据类型，对象引用，以及returnAddress类型</p><ul><li>建立在线程的栈上，是线程私有数据，<font color="red">不存在线程安全问题</font></li><li><font color="red">局部变量表所需的容量大小事在编译的时候就确定下来的</font>，并且保存在方法的Code属性的maximun local variables数据项中。运行期间不会改变局部变量表的大小</li><li>局部变量表的变量只在当前方法调用中有效，调用结束后，随着方法栈帧的销毁，局部变量表也会随之销毁</li></ul></blockquote><p><strong>slot</strong></p><blockquote><p>slot 是局部变量表中最基本的存储单元</p><p>在局部变量表中存放编译期可知道各种数据类型，引用类型(reference)，returnAddress类型的变量</p><p>32位以内的类型只占用一个slot，64位的站俩</p></blockquote><p><strong>一个问题：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test123</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 这里的this会导致编译失败，因为静态方法没有this存在局部变量表中</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 相反的，在我们的实例创建的方法，或者构造方法中，this会存放在index为0的slot中</span><span class="token keyword">public</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token comment">//是可以的</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>slot</strong>重复利用问题</p><p><font color = "red">栈帧中的局部变量表中的slot是可以重用的，</font>如果一个局部变量过了他的作用域，在其后声明的局部变量就可能会使用他的槽位，从而<strong>节省空间</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**因为b的生命域就在&#123;&#125;中，出了&#123;&#125;他就被销毁了。但是在之前虚拟机栈已经为他开辟了空间，销毁后让c使用他的位置*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        b <span class="token operator">=</span> a <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">+</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h4><blockquote><p>特点：后进先出</p><p>在方法执行的过程当中，根据<strong>字节码指令</strong>，往栈中写入数据或者提取数据，（入栈/出栈）</p><pre><code>- 比如执行复制，交换，求和等操作</code></pre><p>如果被调用的方法带有返回值，返回值会被压入当前栈帧的操作数栈中，并更新pc寄存器中下一条需要执行的字节码指令。</p><ul><li>虚拟机在操作数栈中存储数据的方式和在局部变量区中是一样的：如int、long、float、double、reference和returnType的存储。对于byte、short以及char类型的值在压入到操作数栈之前，也会被转换为int。</li></ul></blockquote><p><strong>虚拟机把操作数栈作为它的工作区——大多数指令都要从这里弹出数据，执行运算，然后把结果压回操作数栈。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">begin  iload_0    <span class="token comment">// push the int in local variable 0 onto the stack  </span>iload_1    <span class="token comment">// push the int in local variable 1 onto the stack  </span>iadd       <span class="token comment">// pop two ints, add them, push result  </span>istore_2   <span class="token comment">// pop int, store into local variable 2  </span>end  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在上边的例子中，iload_0和iload_1把局部变量表中索引为0和1的整数压入操作数栈</p><p>调用iadd指令把两个数从操作数栈中弹出并相加，<strong>把结果压入操作数栈</strong></p><p>istore_2从操作数栈中弹出结果，把它存储到局部变量表中索引为2的位置。</p></blockquote><p><img src="http://dl.iteye.com/upload/picture/pic/116487/4032d1b9-43c5-3dc6-95c8-38b9fbb149b0.jpg" alt="演示图"></p><h5 id="栈顶缓存技术"><a href="#栈顶缓存技术" class="headerlink" title="栈顶缓存技术"></a>栈顶缓存技术</h5><blockquote><p>基于栈式架构的虚拟机使用的零地址指令更加紧凑，但是完成一个操作需要不停的入栈出栈，，经常对内存进行读写，效率会被降低。</p><p>所以开发者<strong>将栈顶元素全部缓存在物理cpu寄存器中，以此降低对内存的读写次数，提升执行引擎的执行效率</strong></p></blockquote><h4 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h4><blockquote><p><strong>在某些书上 动态链接，方法返回地址，附加信息会被称为</strong><font color = "red"><strong>帧数据区</strong></font></p></blockquote><ul><li>动态链接主要就是<strong>指向运行时常量池的方法引用</strong></li><li>每一个栈帧内存都包含一个指向运行时常量池中该栈帧所属方法的引用，包含这个引用的目的就是为了支持当前方法的代码能够实现动态链接(Dynamic Linking)。比如invokedynamic 指令</li><li>在Java源文件被编译到字节码文件中时，所有的变量和方法引用都<strong>作为符号引用保存在class文件的常量池里</strong>。比如，描述一个方法调用其他方法时，就是通过常量池中指向方法的符号引用来表示的，那么<strong>动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用</strong></li></ul><p><img src="https://s1.ax1x.com/2020/10/09/0rDVK0.png" alt="0rDVK0.png"></p><h4 id="方法的调用：解析与分派"><a href="#方法的调用：解析与分派" class="headerlink" title="方法的调用：解析与分派"></a>方法的调用：解析与分派</h4><blockquote><p><strong>将符号引用转换成调用方法的直接引用</strong></p><p>如果<strong>转换的过程是在编译期间确定下来</strong>，并且运行期间保持不变，那么这就是<strong>静态链接</strong></p><p>如果<strong>被调用的方法在编译期无法被确定下来</strong>，那么只能在程序运行期间进行转换，被称为<strong>动态链接</strong></p></blockquote><p><strong>对于方法来说</strong>：</p><p>接口的方法调用在编译期间是不确定的，所以是<strong>晚期绑定</strong></p><p>而方法中如果调用了构造器，是可以在编译期间确定的，是<strong>早期绑定</strong></p><p><strong>虚方法和非虚方法</strong>：</p><ul><li>静态方法，私有方法，final方法，构造器，父类方法都是非虚方法</li><li>方法在编译器就确定了具体的调用，并且在运行时不可变，就是非虚方法</li></ul><blockquote><p>JVM提供了如下方法调用指令：</p></blockquote><ol><li>invokestatic 调用静态方法</li><li>invokespecial 调用私有实例方法、构造器，以及使用super关键字调用父类的实例方法或构造器，和所有实现接口的默认方法。</li><li>invokevirtual 调用虚方法即非私有的实例方法。</li><li>invokeinterface 调用接口方法，在运行时再确定一个实现此接口的对象。</li><li>invokedynamic 调用动态方法，在运行时动态解析出调用点限定符所引用的方法之后，调用该方法。</li></ol><p><strong>方法重写的本质</strong></p><p><img src="/home/zhy/.config/Typora/typora-user-images/image-20200927113251358.png" alt="image-20200927113251358"></p><p><strong>虚方法表</strong></p><blockquote><p>在面向对象的编程中，会很频繁的使用到动态分派，如果在每次动态分派的过程中都要重新在类的方法元数据中搜索合适的目标的话就会影响到执行效率。</p><p><strong>为了提高性能</strong>，jvm在类的方法区建立一个虚方法表。使用索引来代替查找。</p><p>每个类都有一个虚方法表，用来存放各个方法的实际入口</p></blockquote><p><strong>虚方法表在什么时候会被创建</strong>？？</p><blockquote><p>虚方法表会在类加载到链接阶段被创建并开始初始化，类的变量初始值准备完成后，JVM会把该类的方法表也初始化完毕。</p></blockquote><h4 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a>方法返回地址</h4><blockquote><p>这一块区域是用来存储pc寄存器中的值，目的是为了给执行引擎让他继续做操作</p><p>一个方法如果是正常执行完成时<strong>pc寄存器的值作为返回地址，即调用该方法的指令的下一条指令的地址</strong>。如果是通过异常退出的，<strong>返回地址要通过异常表来确定，栈帧中一般不会保存此信息</strong></p></blockquote><p>流程：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201008204215341.png" alt="image-20201008204215341"></p><p><strong>字节码指令：</strong></p><p><img src="/home/zhy/.config/Typora/typora-user-images/image-20200927115358502.png" alt="image-20200927115358502"></p><h4 id="一些附加信息"><a href="#一些附加信息" class="headerlink" title="一些附加信息"></a>一些附加信息</h4><blockquote><p>无</p></blockquote><h4 id="相关面试问题"><a href="#相关面试问题" class="headerlink" title="相关面试问题"></a>相关面试问题</h4><blockquote><p>为什么要使用常量池？</p></blockquote><ul><li>常量池的作用就是为了提供一些符号和常量，便于指令的识别。</li></ul><blockquote><p>举例栈溢出的情况(StackOverflowError)</p></blockquote><ul><li>通过-Xss设置栈的大小</li><li>OOM</li></ul><blockquote><p>分配的栈内存越大越好？</p></blockquote><ul><li>内存空间有限</li><li>不能避免栈溢出的情况发生</li></ul><blockquote><p>垃圾回收涉及到什么</p></blockquote><ul><li>方法区</li><li>堆</li></ul><h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><blockquote><p>native method就是java调用非java代码的接口</p><p>本地接口的初衷就是融合不同的编程语言为java所用</p></blockquote><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201008210718117.png" alt="image-20201008210718117"></p><blockquote><p>本地方法栈是用于管理本地方法的调用</p><ul><li>本地方法是线程私有的</li><li>允许被实现成固定或者是可动态扩展的内存大小<ul><li>如果线程请求分配的栈容量超过本地方法栈允许的最大容量报错栈溢出</li><li>如果本地方法栈可以动态扩展，在尝试扩展的时候无法申请到足够的内存就会内存溢出</li></ul></li><li>本地方法是c实现的</li><li>在本地方法栈中登记native方法，在执行引擎执行时候加载本地方法库</li></ul></blockquote><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20201008213600601.png" alt="image-20201008213600601"></p><blockquote><ul><li>当某个线程调用一个本地方法时，他会进入一个全新的并且不受虚拟机限制的世界<ul><li>本地方法可以通过本地方法接口来访问虚拟机内部的运行时数据区</li><li>甚至可以直接使用本地处理器中的寄存器</li><li>直接从本地的堆中分配任意数量的内存</li></ul></li><li>并不是所有的JVM都支持本地方法，因为Java虚拟机规范没有明确要求本地方法站的使用语言，具体实现方式，数据结构。</li><li>在 Hotspot虚拟机中，直接将本地方法栈和虚拟机合二为一</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> -jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8新特性</title>
      <link href="2020/09/21/java8-xin-te-xing/"/>
      <url>2020/09/21/java8-xin-te-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="java8新特性"><a href="#java8新特性" class="headerlink" title="java8新特性"></a>java8新特性</h1><h2 id="生态"><a href="#生态" class="headerlink" title="生态"></a>生态</h2><ul><li>Lambda 表达式</li><li>函数式接口</li><li>方法引用、构造器引用</li><li>Stream API</li><li>接口中的默认方法/静态方法</li><li>新时间日期API</li><li>其他新特性</li></ul><h2 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h2><ul><li>速度更快</li><li>代码更少</li><li>强大的Stream API</li><li>便于并行</li><li>最大化减少空指针异常Optional</li><li>Hashmap底层的变化</li><li>…….</li></ul><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><blockquote><p>Java 8的一个大亮点是引入Lambda表达式，使用它设计的代码会更加简洁。当开发者在编写Lambda表达式时，也会随之被编译成一个函数式接口。使用Lambda表达式不仅让代码变的简单、而且可读、最重要的是代码量也随之减少很多。</p></blockquote><p><strong>演变过程</strong></p><blockquote><p>垃圾代码 –&gt; 策略模式 –&gt; 匿名内部类 –&gt; Lambda表达式</p></blockquote><p><strong>举例</strong></p><ul><li><p>匿名内部类</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> comparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">01</span><span class="token punctuation">,</span><span class="token number">02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>Lambda表达式</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> comparator <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>格式</strong></p><ul><li><p>无参数无返回值</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test02</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//jdk 1.7以前 必须final修饰</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//匿名内部类</span>        <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//在局部类中引用同级局部变量</span>                <span class="token comment">//只读</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//语法糖</span>     <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello Lambda"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>有一个参数无返回值</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> consumer <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"我觉得还行！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>有两个以上的参数，有返回值</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> comparator <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"比较接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>有两个以上的参数，有返回值，并且 Lambda 体中只有1条语句 （大括号 与 return 都可以省略不写）</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> comparator <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>函数式接口</strong></p><blockquote><p>定义一个接口，只能存放一个方法，并且要添加注解 @FunctionalInterface</p></blockquote><p><strong>定义一个接口，可以不使用泛型</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyFun</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token class-name">T</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">,</span> <span class="token class-name">T</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">MyFun</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> myFun <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">-></span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token class-name">MyFun</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> myFun2 <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">-></span> x<span class="token operator">-</span>y<span class="token punctuation">;</span><span class="token class-name">MyFun</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> myFun3 <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">-></span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token class-name">MyFun</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">></span></span> myFun4 <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">-></span> x<span class="token operator">*</span>y<span class="token punctuation">;</span><span class="token class-name">Integer</span> count <span class="token operator">=</span> myFun<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> count2 <span class="token operator">=</span> myFun2<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> count3 <span class="token operator">=</span> myFun3<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Double</span> count4 <span class="token operator">=</span> myFun4<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">,</span><span class="token number">2.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*结果是：    3    -1    12    2.3100000000000005*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以发现，函数式接口让我们在实现业务的时候有了很高的自由度，代码书写也更加的紧凑，简便，减少了代码量</p></blockquote><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><p><strong>Java内置四大核心函数式接口：</strong></p><table><thead><tr><th align="center"><strong>函数式接口</strong></th><th align="center"><strong>参数类型</strong></th><th align="center">返回类型</th><th align="center"><strong>用途</strong></th></tr></thead><tbody><tr><td align="center">Consumer<br/>消费型接口</td><td align="center">T</td><td align="center">void</td><td align="center">对类型为T的对象应用操作：void accept(T t)</td></tr><tr><td align="center">Supplier<br/>提供型接口</td><td align="center">无</td><td align="center">T</td><td align="center">返回类型为T的对象：T get()</td></tr><tr><td align="center">Function&lt;T, R&gt;<br/>函数型接口</td><td align="center">T</td><td align="center">R</td><td align="center">确定类型为T的对象是否满足某约束，并返回boolean值：boolean test(T t)</td></tr><tr><td align="center">Predicate<br/>断言型接口</td><td align="center">T</td><td align="center">boolean</td><td align="center">确定类型为T的对象是否满足某约束，并返回boolean值：boolean test(T t)</td></tr></tbody></table><p><strong>消费型接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@org.junit.Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test06</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> consumer <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>提供型接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@org.junit.Test</span><span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">test07</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> supplier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>函数型接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@org.junit.Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test08</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> function <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">-></span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> apply <span class="token operator">=</span> function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>apply<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>断言型接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@org.junit.Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test09</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> predicate <span class="token operator">=</span> x<span class="token operator">-></span> <span class="token string">"predicate"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>其他的接口</strong></p><p><img src="/home/zhy/.config/Typora/typora-user-images/image-20200922093418137.png" alt="子接口"></p><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><blockquote><p>如果Lambda体中的内容有方法已经实现了，我们可以使用方法引用(是Lambda的另一种表达形式)</p></blockquote><p><strong>语法格式</strong></p><ul><li><p>对象::实例方法名</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@org.junit.Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> consumer <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">-></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*    两者都没有返回值，参数列表也一样    对象::实例方法名     */</span>    <span class="token class-name">Cons</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> consumer2 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@org.junit.Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Users</span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*    getPassword()的返回类型是String    函数式接口中抽象方法的返回值也是String    二者都没有参数    可以简化lambda表达式    */</span>    <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> supplier <span class="token operator">=</span> users<span class="token operator">::</span><span class="token function">getPassword</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>类::静态方法名</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@org.junit.Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 类:: 静态方法</span>    <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> comparator <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">-></span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> comparator1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">compare</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comparator1<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>类::实例方法名</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token annotation punctuation">@org.junit.Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">// 类:: 实例方法名</span>      <span class="token class-name">BiPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> predicate <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">-></span>x<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这一个跟上边的 类::静态方法名差不多</span>      <span class="token class-name">BiPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> predicate2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token function">equals</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>始终要<strong>注意</strong>的是：</p><ul><li><p>Lambda体黄总调用方法的参数列表和返回值类型，与函数式接口中抽象方法和返回值类型保持一致</p></li><li><p>如果Lambda参数列表中的第一参数是实例方法的调用着，而第二个参数是实例方法的参数，可以用<code>ClassName::method</code>表示</p></li></ul></blockquote><h2 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h2><p><strong>格式</strong></p><ul><li>ClassName::new</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*简单案例，引用无参构造器*/</span><span class="token annotation punctuation">@org.junit.Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// className::new</span>    <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Users</span><span class="token punctuation">></span></span> supplier <span class="token operator">=</span> <span class="token class-name">Users</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意</strong></p><ul><li>需要调用的构造器的参数列表要与函数式接口中抽象的参数列表保持一致</li></ul></blockquote><p><strong>数组的引用</strong></p><pre class="line-numbers language-none"><code class="language-none">@org.junit.Testpublic void test6()&#123;    Function&lt;Integer,String[]&gt; fun &#x3D; (x)-&gt;new String[x];    &#x2F;*可以变为*&#x2F;    Function&lt;Integer,String[]&gt; fun2 &#x3D; String[]::new;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="强大的Stream-API"><a href="#强大的Stream-API" class="headerlink" title="强大的Stream API"></a>强大的Stream API</h2><blockquote><p>流是数据渠道，用于操作数据源，数组，集合等生产的元素    序列</p><ul><li>Stream 自己不会存储元素</li><li>Stream 不回改变源对象，他们会返回一个持有结果的新的Stream</li><li>Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行</li></ul></blockquote><p><strong>步骤</strong></p><ul><li>创建Stream</li><li>中间操作</li><li>终止操作</li></ul><h3 id="创建Stream"><a href="#创建Stream" class="headerlink" title="创建Stream"></a>创建Stream</h3><blockquote><p>创建Stream的方法有多种</p></blockquote><ul><li><p>Connection接口下提供的方法stream()或者parallelStream()（并行流）</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 通过Connection提供的steam()或者parallelStream()</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>通过Arrays中的静态方法获取</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Users</span><span class="token punctuation">[</span><span class="token punctuation">]</span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Users</span><span class="token punctuation">></span></span> stream1 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><ul><li><p>Stream类的静态方法of()获取</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> integerStream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ul><li><p>创建无限流</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> iterate <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-></span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3></li></ul><blockquote><p>Stream的中间操作和终端操作如下图所示：</p></blockquote><p><img src="https://img-blog.csdn.net/20180609175507605?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4NDEwMjgz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="Stream的操作"></p><h3 id="切片和筛选"><a href="#切片和筛选" class="headerlink" title="切片和筛选"></a>切片和筛选</h3><blockquote><ul><li>filter 接收Lambda,从流中排除某些元素</li><li>limit 截断流，使元素不超过给定数量</li><li>skip(n) 跳过元素，返回一个扔掉了前n个元素的流，如果不足n个则返回一个空流</li><li>distinct 筛选，通过流所产生元素的hashCode()和equals()去除重复元素</li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Users</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">/*     * 中间操作:不会执行任何操作     * 终止操作:一次性执行全部内容，即"惰性求值"     filter(Predicate&lt;? super T> predicate)满足predicate的条件的会被保留     * */</span>     stream<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">-></span>e<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Users</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">/*     limit(n) 表示取前n个     */</span>     stream<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">/*     skip(n) 表示跳过前n个，配合limit可以有奇效     */</span>     <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Users</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     stream<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Users</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">/*     去重操作需要比较二者的hashCode()和equals()，需要重写这两个方法     */</span>     stream<span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><blockquote><ul><li>map：接收 Lambda ，将元素转换为其他形式或提取信息；接受一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素</li><li>flatMap：接收一个函数作为参数，将流中每一个值都换成另一个流，然后把所有流重新连接成一个流(类似于collection中的addAll(Collection coll)方法)</li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">,</span> <span class="token string">"awdaw"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*    * map 接受一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素    * */</span>    list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>str<span class="token operator">-></span>str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>users <span class="token operator">-></span> users<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"qweq"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*    *  flatMap 把所有流重新连接成一个流，即相同类型的流进行合并    * */</span>    list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">TestStream</span><span class="token operator">::</span><span class="token function">getStream</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><blockquote><ul><li>sorted() 自然排序</li><li>sorted(Comparator c) 定制排序</li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test11</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">,</span> <span class="token string">"awdaw"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*自然排序*/</span>    <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stream<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*定制排序*/</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">-></span> x<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="终止操作"><a href="#终止操作" class="headerlink" title="终止操作"></a>终止操作</h2><h3 id="查找与匹配"><a href="#查找与匹配" class="headerlink" title="查找与匹配"></a>查找与匹配</h3><blockquote><ul><li>allMatch：检查是否匹配所有元素</li><li>anyMatch：检查是否至少匹配一个元素</li><li>noneMatch：检查是否没有匹配所有元素</li><li>findFirst：返回第一个元素</li><li>findAny：返回当前流中的任意元素</li><li>count：返回流中元素的总个数</li><li>max：返回流中最大值</li><li>min：返回流中最小值</li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Status</span> <span class="token punctuation">&#123;</span>    FREE<span class="token punctuation">,</span> BUSY<span class="token punctuation">,</span> VOCATION<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Status</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token class-name">Status</span><span class="token punctuation">.</span>FREE<span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token punctuation">.</span>BUSY<span class="token punctuation">,</span> <span class="token class-name">Status</span><span class="token punctuation">.</span>VOCATION<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> flag1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Status</span><span class="token punctuation">.</span>BUSY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> flag2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Status</span><span class="token punctuation">.</span>BUSY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> flag3 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Status</span><span class="token punctuation">.</span>BUSY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 避免空指针异常</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Status</span><span class="token punctuation">></span></span> op1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果Optional为空 找一个替代的对象</span>    <span class="token class-name">Status</span> s1 <span class="token operator">=</span> op1<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token class-name">Status</span><span class="token punctuation">.</span>BUSY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 随便获取一个</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Status</span><span class="token punctuation">></span></span> op2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>op2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> count <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="归约与收集"><a href="#归约与收集" class="headerlink" title="归约与收集"></a>归约与收集</h3><blockquote><ul><li>归约：reduce(T identity, BinaryOperator) / reduce(BinaryOperator) 可以将流中的数据反复结合起来，得到一个值</li><li>收集：collect 将流转换成其他形式；接收一个 Collector 接口的实现，用于给流中元素做汇总的方法</li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> -java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode刷题</title>
      <link href="2020/09/21/leetcode-shua-ti/"/>
      <url>2020/09/21/leetcode-shua-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode题目"><a href="#Leetcode题目" class="headerlink" title="Leetcode题目"></a>Leetcode题目</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组中重复的数字"><a href="#数组中重复的数字" class="headerlink" title="数组中重复的数字"></a>数组中重复的数字</h3><blockquote><p>找出数组中重复的数字。</p><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p></blockquote><pre class="line-numbers language-none"><code class="language-none">输入：[2, 3, 1, 0, 2, 5, 3]输出：2 或 3 限制：2 &lt;&#x3D; n &lt;&#x3D; 100000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof">https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof</a></p></blockquote><p><strong>解题思路</strong></p><p>​        题目中有个很有意思的地方就是 <strong>数组长度跟数字的范围大小一样</strong>，这样就有了很多的解题方法。</p><h4 id="字典法"><a href="#字典法" class="headerlink" title="字典法"></a>字典法</h4><blockquote><p>创建一个set集合，循环遍历数组，把item放入set中，如果不能成功放入，则返回该值</p><p>时间复杂度 O(n)</p><p>空间复杂度 O(n)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 没有添加成功</span>            <span class="token keyword">return</span> num<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="原地置换法"><a href="#原地置换法" class="headerlink" title="原地置换法"></a>原地置换法</h4><blockquote><p>在此题中，如果没有重复元素，那么他们正常排序后，数字i就应该在i下标的位置。所以我们遍历数组，遇到的每一个元素都跟以他为下标的数值相比较。如果相等则重复返回，不想等则置换</p><p>时间复杂度O(n)</p><p>空间复杂度O(1)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 在没有归位的情况下</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 判断该数与 以他为下标的数是否相等</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 证明重复，返回该数</span>                <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 不重复就置换</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="2020/09/18/jvm/"/>
      <url>2020/09/18/jvm/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM内存和垃圾回收篇"><a href="#JVM内存和垃圾回收篇" class="headerlink" title="JVM内存和垃圾回收篇"></a>JVM内存和垃圾回收篇</h1><blockquote><p>JVM内存和垃圾回收篇<br>字节码与类的加载篇<br>性能监控与调优篇</p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><img src="https://s1.ax1x.com/2020/09/23/wxKNSe.png" alt="一次编译到处运行"></p><p><strong>任何语言编译后的字节码文件遵守java虚拟机规范，都可以运行在java虚拟机上</strong></p><p><img src="https://s1.ax1x.com/2020/09/23/wxKuQJ.png" alt="任何语言都可以运行在jvm上"></p><p>多语言混合开发不再是不可能的事情。</p><blockquote><p>java虚拟机就是二进制字节码的运行环境，负责装在字节码到其内部，解释编译为对应平台的机器指令执行。</p></blockquote><p><img src="https://s1.ax1x.com/2020/09/23/wxKAoV.png" alt="jdk-jre-jvm"></p><h3 id="JVM的整体结构"><a href="#JVM的整体结构" class="headerlink" title="JVM的整体结构"></a>JVM的整体结构</h3><p><img src="https://s1.ax1x.com/2020/09/23/wxuoxH.png" alt="JVM简图"></p><h3 id="JVM的架构模型"><a href="#JVM的架构模型" class="headerlink" title="JVM的架构模型"></a>JVM的架构模型</h3><p><img src="https://s1.ax1x.com/2020/09/23/wxu1PS.png" alt="架构模型"></p><p><strong>总结</strong></p><ul><li>跨平台性的设计</li><li>指令集小</li><li>指令多</li><li>执行性能比寄存器差</li></ul><h3 id="JVM的生命周期"><a href="#JVM的生命周期" class="headerlink" title="JVM的生命周期"></a>JVM的生命周期</h3><p><strong>虚拟机的启动</strong></p><p>java虚拟机的启动时通过<strong>引导类加载器</strong>(bootstrap class loader)创建一个初始类(initial class)来完成的，这个类是由虚拟机的具体实现指定的。</p><p><strong>虚拟机的运行</strong></p><ul><li>一个运行中的java虚拟机有一个任务就是执行java程序</li><li>程序开始执行时他才运行，程序结束的时候他就停止</li><li>==执行一个所谓的java程序的时候，真正在执行的是JAVA虚拟机的进程==</li></ul><p><strong>虚拟机的退出</strong></p><ul><li>程序正常执行结束</li><li>遇到异常或错误终止</li><li>操作系统出现错误导致java虚拟机进程终止</li><li>某线程调用runtime类或system类的exit方法退出，或runtime类中的halt方法</li><li>JNI规范描述了用JNI Invocation API来加载或卸载Java虚拟机的时候，jvm退出</li></ul><h2 id="类加载子系统-ClassLoader"><a href="#类加载子系统-ClassLoader" class="headerlink" title="类加载子系统(ClassLoader)"></a>类加载子系统(ClassLoader)</h2><blockquote><p><strong>整体作用</strong></p><ul><li><p>负责从文件系统或网络中加载class文件，class文件在文件开头有特定的文件标识</p></li><li><p>ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定</p></li><li><p>加载的类信息存放于一块称为==方法区==的内存空间。除了类的信息外，方法区中还会存放运行时常量池信息，可能还包括字符串字面量和数字常量(这部分常量信息是Class文件中常量池部分的内存映射)</p></li></ul></blockquote><p><img src="https://s1.ax1x.com/2020/09/23/wxueKA.png" alt="类加载子系统"></p><ul><li><p>class文件放在本地的硬盘上，当执行的时候是要加载到JVM中，根据这个文件实例化出n个一模一样的实例。</p></li><li><p>class文件加载到JVM中，被称为DNA元数据模板，放在方法区</p></li><li><p>在.class文件-&gt;JVM-&gt;最终称为元数据模板，此过程就要一个运输工具(类装载器 ClassLoader)扮演一个快递员的角色</p></li></ul><p><img src="https://s1.ax1x.com/2020/09/23/wxuA8e.png" alt="wxuA8e.png"></p><h3 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h3><p><strong>加载阶段</strong></p><blockquote><ul><li>通过一个类的全限定名获取定义此类的二进制文件流</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构（<strong>类信息放在方法区中</strong>）</li><li>==在内存中生成一个代表这个类的java.lang.Class对象==，作为方法区这个类的各种数据的访问入口（<strong>反射</strong>放在堆中）</li></ul></blockquote><p><strong>链接阶段</strong></p><ul><li><p>验证</p><blockquote><ul><li>目的在于确保class文件袋字节流中包含的信息符合当前虚拟机要求，保证被加载类的正确性</li><li>文件格式验证，元数据验证，字节码验证，符号引用验证</li></ul></blockquote></li><li><p>准备</p><blockquote><ul><li>为类变量分配内存并且设置该类变量的默认初始值，即零值<ul><li><code>private static int a = 1</code>在准备阶段会被先设为<code>a=0</code>，在<code>initial</code>阶段才会赋值</li></ul></li><li><strong>这里不含用final修饰的static,因为final在编译的时候就分配了，准备阶段会显式初始化</strong>（<strong>这时候是常量了</strong>）</li><li><strong>这里不会为实例变量分配初始化</strong>（还未创建对象），类变量会分配在方法区中，而实例变量是会随着对象一起分配到java堆中</li></ul></blockquote></li><li><p>解析</p><blockquote><ul><li>将常量池内的符号引用转换为直接引用的过程</li><li>事实上，解析操作会在JVM执行完初始化后再次执行</li><li>符号引用就是一组符号来描述引用的目标。直接引用就是直接指向目标的指针，相对偏移量或一个间接定位到目标的句柄</li><li>解析主要针对：类或接口，字段，类方法，接口方法，方法类型等等，对应常量池中的CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info 等等</li></ul></blockquote></li></ul><p><strong>初始化</strong></p><blockquote><ul><li>初始化就是执行<strong>类构造器方法<Clinit>()**的过程，<Clinit>()不需要定义，他不是类的构造器，javac编译器自动帮你弄好了。</strong>构造器方法中指令按照语句在源文件中出现的顺序执行**。JVM会保证子类的<Clinit>()执行前，父类的<Clinit>()方法已经执行完毕。</li><li><strong>类构造器是对静态变量，静态代码块进行初始化</strong></li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">X</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">static</span> <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;clinit></span>   <span class="token keyword">private</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// &lt;init></span>   <span class="token class-name">X</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">// &lt;init></span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// &lt;clinit></span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        类中的类变量和静态代码块中的语句会被编译器自动收集，收集的顺序是由语句在源文件中出现的顺序决定的。如下图所示，，num变量和number变量在prepare阶段的时候被赋值为0，到initial阶段会按照顺序，先将num赋值为1,再执行static代码块中的<code>num=2</code>赋值为2。</p><p>​        而对于number来说，虽然他定义语句是在静态代码块下边，静态代码块中对他进行了赋值，但是他被创建分配内存是在prepare阶段，所以按照顺序会先把他赋值为<code>20</code>,再赋值为<code>10</code>。</p><p>​        但是如果在静态代码块中提前访问number的话会报错，<strong>非法的前向引用</strong>。可能是在JVM执行完初始化后还会再次解析，把他的符号引用改为直接引用？？？—-这一点是个人猜测</p><p><img src="https://s1.ax1x.com/2020/09/23/wxuPUK.png" alt="wxuPUK.png"></p><p><img src="https://s1.ax1x.com/2020/09/23/wxuSD1.png" alt="wxuSD1.png"></p><p>总结：</p><p><img src="https://s1.ax1x.com/2020/09/23/wxnvv9.png" alt="wxnvv9.png"></p><h3 id="类加载器分类"><a href="#类加载器分类" class="headerlink" title="类加载器分类"></a>类加载器分类</h3><blockquote><p>jvm支持两种类型的加载器</p><ul><li>引导类加载器（Bootstrap ClassLoader）</li><li>自定义加载器（User-Defined ClassLoader）<ul><li>拓展类加载器</li><li>系统类加载器</li></ul></li></ul><p>只要是派生于抽象类ClassLoader的加载器，就是自定义加载器</p></blockquote><p><img src="https://s1.ax1x.com/2020/09/23/wxnbNT.png" alt="wxnbNT.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">        <span class="token comment">// 获取系统类加载器</span>        <span class="token class-name">ClassLoader</span> systemClassLoader <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"classLoader = "</span> <span class="token operator">+</span> systemClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 获取上层拓展类加载器</span>        <span class="token class-name">ClassLoader</span> extClassLoader <span class="token operator">=</span> systemClassLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"extClassLoader = "</span> <span class="token operator">+</span> extClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取其上层：获取不到引导类加载器</span>        <span class="token class-name">ClassLoader</span> bootStrapClassLoader <span class="token operator">=</span> extClassLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bootStrapClassLoader = "</span> <span class="token operator">+</span> bootStrapClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取当前的类加载器</span>        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">ClassLoaderTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"classLoader = "</span> <span class="token operator">+</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取不到引导类加载器，java的核心类库是用引导类加载器加载的</span>        <span class="token class-name">ClassLoader</span> classLoader1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"classLoader1 = "</span> <span class="token operator">+</span> classLoader1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*出于安全考虑，Bootstrap启动类加载器只加载包名为 java、javax、sun等开头的类*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动类加载器"><a href="#启动类加载器" class="headerlink" title="启动类加载器"></a>启动类加载器</h3><blockquote><p>也是引导类加载器，bootStrap ClassLoader 是用c++写的，所以看不到源码。</p><p>它负责将 <JAVA_HOME>/lib目录、 -Xbootclasspath选项指定的目录或系统属性sun.boot.class.path指定的目录下的核心类库加载到内存中。 </p><p>出于安全考虑，Bootstrap启动类加载器只加载包名为 java、javax、sun等开头的类</p></blockquote><h3 id="拓展类加载器"><a href="#拓展类加载器" class="headerlink" title="拓展类加载器"></a>拓展类加载器</h3><blockquote><p>sun.misc.Launcher$ExtClassLoader实现</p><p>派生于ClassLoader</p><p>父类加载器为启动类加载器</p><p>从java.ext.dirs系统属性所指定的目录中加载类库，或从jdk的安装目录的jre/lib/ext子目录下加载类库。如果用户创建的jar放在此目录下，也会自动由拓展累加载器加载</p></blockquote><h3 id="应用程序类加载器"><a href="#应用程序类加载器" class="headerlink" title="应用程序类加载器"></a>应用程序类加载器</h3><blockquote><p>也叫系统类加载器,ApplicationClassLoader</p><p>派生于ClassLoader类</p><p>父类是拓展类加载器</p><p>负责加载环境变量classpath或系统属性java.class.path指定路径下单类库，该类加载是<strong>程序中默认的累加载器</strong></p><p>通过ClassLoader#getSystemClassLoader方法可以获取到该类加载器</p></blockquote><h3 id="用户自定义类加载器"><a href="#用户自定义类加载器" class="headerlink" title="用户自定义类加载器"></a>用户自定义类加载器</h3><blockquote><ul><li>为何要使用？<ul><li>隔离加载类</li><li>修改类加载方式</li><li>拓展加载源</li><li>防止源码泄漏(运行时解密)</li></ul></li></ul></blockquote><p>获取加载类内容</p><p><img src="/home/zhy/.config/Typora/typora-user-images/image-20200924092057934.png" alt="image-20200924092057934"></p><h2 id="双亲委派机制！（重点）"><a href="#双亲委派机制！（重点）" class="headerlink" title="双亲委派机制！（重点）"></a>双亲委派机制！（重点）</h2><blockquote><p>java虚拟机对class文件采用的是按需加载的方式，而加载某个类的class文件时，java虚拟机采用的是<strong>双亲委派模式</strong>，即把请求交由父类处理，他是一种任务委派模式</p></blockquote><p>引入：我们自己构造一个String类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*在项目src下创建java.lang.String*/</span><span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>lang</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试双亲委派机制，自制String类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们创建一个测试类来调用新创建的String类，测试能否把静态代码块中的值输出</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>study</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 在这里new我们创建的类</span>        <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>java<span class="token operator">/</span>jdk1<span class="token punctuation">.</span><span class="token number">8.0_191</span><span class="token operator">/</span>bin<span class="token operator">/</span>java <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>测试类<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>我们可以发现，程序没有走我们自制的String类，，其中就是运用了<strong>双亲委派机制</strong></p></blockquote><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ol><li>如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行</li><li>如果父类加载器还存在其父类加载器，进一步向上委托，依次递归，请求最终将达到顶层的Bootstrap ClassLoader启动类加载器</li><li>如果父类加载器可以完成类加载任务，就返回成功，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载</li></ol><p><img src="/home/zhy/.config/Typora/typora-user-images/image-20200924094613781.png" alt="双亲委派机制"></p><p><strong>当我们在自定义的String中编写main方法的时候</strong>，因为双亲委派机制，会加载Java中的String，但是他里边没有main方法，就会报错</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试双亲委派机制，自制String类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    错误: 在类 java.lang.String 中找不到 main 方法, 请将 main 方法定义为:  public static void main(String[] args)否则 JavaFX 应用程序类必须扩展javafx.application.Application    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">12312</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三方jar包的加载会由系统类加载器去加载，在图中是由线程上下文类加载器(ContextClassLoader)加载的</p><p>可以看这篇博客–&gt;<a href="https://blog.csdn.net/yangcheng33/article/details/52631940">https://blog.csdn.net/yangcheng33/article/details/52631940</a></p><p><img src="/home/zhy/.config/Typora/typora-user-images/image-20200924102029562.png" alt="第三方jar包的加载"></p><blockquote><p>双亲委派机制的<strong>优势</strong></p><ul><li><strong>避免类重复加载</strong></li><li><strong>保护程序安全，防止核心Api被篡改</strong><ul><li>自制java.lang.String类</li></ul></li></ul></blockquote><p><strong>沙箱安全机制</strong></p><blockquote><p>自定义String类在加载的时候会让引导类加载器去加载jdk下的String类，这样由于没有main方法，会报错<code>在类 java.lang.String 中找不到 main 方法, 请将 main 方法定义为:public static void main(String[] args)</code>。这样可以保证对java核心源代码的保护，这就是<strong>沙箱安全机制</strong></p></blockquote><h3 id="类的主动使用和被动使用"><a href="#类的主动使用和被动使用" class="headerlink" title="类的主动使用和被动使用"></a>类的主动使用和被动使用</h3><blockquote><p>主动使用</p></blockquote><p><img src="/home/zhy/.config/Typora/typora-user-images/image-20200924110708399.png" alt="image-20200924110708399"></p><blockquote><p>除了上述的7种，都是<strong>被动使用</strong>，都不会<strong>导致类的初始化</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ActiveMQ</title>
      <link href="2020/09/17/activemq/"/>
      <url>2020/09/17/activemq/</url>
      
        <content type="html"><![CDATA[<h1 id="ActiveMQ入门"><a href="#ActiveMQ入门" class="headerlink" title="ActiveMQ入门"></a>ActiveMQ入门</h1><h2 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h2><blockquote><p>“消息”是在两台计算机间传送的数据单位。消息可以非常简单,例如只包含文本字符串;<br>也可以更复杂,可能包含嵌入对象。</p></blockquote><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><blockquote><p>消息队列是在消息的穿徐过程中保存消息的容器</p></blockquote><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p><strong>主要特点是：异步处理！！</strong><br><strong>主要目的是：减少请求响应时间和解耦合</strong></p><blockquote><p>异步处理：<br>  将主要是减少请求时间，并且不需要同步响应的操作作为消息放入消息队列中，<br>解耦合：<br>  将消息放入消息队列中，用规定的消息格式，消息发送方和接收方不需要彼此的进行联系，即是解耦合  </p></blockquote><p><img src="https://s1.ax1x.com/2020/09/17/wWVgWq.png" alt="示意图"></p><h3 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h3><p><strong>用户注册：</strong></p><ul><li><p>注册处理以及写入数据库（一般我们写到这一步）</p></li><li><p>发送注册成功的手机短信</p></li><li><p>发送注册成功的邮件信息</p></li></ul><pre><code>&gt; 在以前我们是直接让一个线程去做注册功能，注册--&gt;后台接受--&gt;调用发信息的方法，不是异步的操作，特别耗费请求的时间&gt;&gt; 现在我们用两个线程去操作，一个线程去向消息中间件中发消息，让邮件发送或者短信发送的服务去消息中间件中取消息，然后取到消息再做对应的业务操作。</code></pre><h3 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a>应用解耦</h3><p><strong>订单处理：</strong></p><ul><li><p>在购物车中点击结算</p></li><li><p>完成支付</p></li><li><p>创建订单</p></li><li><p>调用库存系统</p></li></ul><blockquote><p>在这个场景下就能很好的体现：<br>如果没有消息中间件，那么就是一个线程去执行所有的操作，在创建订单之后，需要等待库存系统中做了发货处理（一般这个操作是有一定的时间的）那么用户网购后就需要在当前页面等待好几个小时才能跑完整个流程。十分的不友好。</p><p>用消息中间件，我们创建订单后向消息中间件中发送订单的信息，库存系统自己去消息中间件上获取，然后做发货的处理，更新库存，这样子能够体现出异步处理的方式，也能够把订单业务和库存系统的业务完全解耦，而且速度还是很快。</p></blockquote><h3 id="流量削峰"><a href="#流量削峰" class="headerlink" title="流量削峰"></a>流量削峰</h3><p><strong>秒杀流程</strong></p><ul><li>用户点击秒杀</li><li>发送请求到秒杀应用</li><li>在请求秒杀应用之前将请求放入到消息队列</li><li>秒杀应用从消息队列中获取请求并处理</li></ul><blockquote><p>比如,系统举行秒杀活动,热门商品。流量蜂拥而至 100 件商品,10 万人挤进来怎么办?10 万秒杀的操作,放入消息队列。秒杀应用处理消息队列中的 10 万个请求中的前 100个,其他的打回,通知失败。流量峰值控制在消息队列处,秒杀应用不会瞬间被怼死.</p></blockquote><h2 id="JMS模型"><a href="#JMS模型" class="headerlink" title="JMS模型"></a>JMS模型</h2><blockquote><p>JMS(Java Messaging Service)是 Java 平台上有关面向消息中间件的技术规范,它便于消息系统中的 Java 应用程序进行消息交换,并且通过提供标准的产生、发送、接收消息的接口,简化企业应用的开发。</p></blockquote><p><strong>点对点模型</strong></p><p>生产者发送一条消息到 queue,只有一个消费者能收到。</p><p><img src="https://s1.ax1x.com/2020/09/17/wWvL0P.png" alt="点对点"></p><p><strong>发布订阅模型(Publish/Subscribe)</strong></p><p>发布者发送到 topic 的消息,只有订阅了 topic 的订阅者才会收到消息。</p><p><img src="https://s1.ax1x.com/2020/09/17/wWxsN8.png" alt="发布订阅"></p><h2 id="安装ActiveMQ"><a href="#安装ActiveMQ" class="headerlink" title="安装ActiveMQ"></a>安装ActiveMQ</h2><p>ActiveMQ 官网: <a href="http://activemq.apache.org/">http://activemq.apache.org</a></p><blockquote><p>ActiveMQ5.10.x 以上版本必须使用 JDK1.8 才能正常使用。<br>ActiveMQ5.9.x 及以下版本使用 JDK1.7 即可正常使用。</p></blockquote><p>上传到linux系统中后，运行<code>tar -zxf apache-activemq-5.9.0-bin.tar.gz</code>把压缩包解压</p><p>如果权限不够需要手动授予权限<code>sudo chmod 755 xxxxx</code></p><p>进入<code>bin</code>目录中运行<code>./activemq start</code>即可运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动</span>./activemq start<span class="token comment"># 重启</span>./activemq restart<span class="token comment"># 停止</span>./activemq restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>修改访问端口</strong></p><blockquote><p>修改 ActiveMQ 配置文件: <code>软件根目录/conf/jetty.xml</code></p><p>正常情况下是</p><pre><code>&lt;bean id=&quot;jettyPort&quot; class=&quot;org.apache.activemq.web.WebConsolePort&quot; init-method=&quot;start&quot;&gt;         &lt;!-- the default port number for the web console --&gt;    &lt;property name=&quot;port&quot; value=&quot;8161&quot;/&gt;&lt;/bean&gt;</code></pre></blockquote><p><strong>修改服务端口</strong></p><blockquote><p>配置文件 <code>activemq.xml</code><br>配置文件中,配置的是 ActiveMQ 的核心配置信息. 是提供服务时使用的配置. 可以修改<br>启动的访问端口. 即 java 编程中访问 ActiveMQ 的访问端口.<br>默认端口为 61616.<br>使用协议是: tcp 协议.<br>修改端口后, 保存并重启 ActiveMQ 服务即可.</p></blockquote><p><strong>修改用户名密码</strong></p><blockquote><p>修改 <code>conf/users.properties</code> 配置文件.内容为: 用户名=密码<br>保存并重启 ActiveMQ 服务即可.</p></blockquote><p><strong>目录介绍</strong></p><blockquote><ul><li>bin 存放的是脚本文件</li><li>conf 存放的是基本配置文件</li><li>data 存放的是日志文件</li><li>docs 存放的是说明文档</li><li>examples 存放的是简单的实例</li><li>lib 存放的是 activemq 所需 jar 包</li><li>webapps 用于存放项目的目录 </li></ul></blockquote><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ul><li><p>Destination</p><blockquote><p>目的地，JMS Provider负责维护，用于对Message进行管理的对象。MessageProducer需要指定Destination才能发送消息，MessageReceiver需要指定Destination才能接收消息</p></blockquote></li><li><p>Producer/Provider</p><blockquote><p>消息生产者</p></blockquote></li><li><p>Consumer/Receiver</p><blockquote><p>消息获取者，从目的地中【处理|监听|订阅】message</p></blockquote></li><li><p>Message</p><blockquote><p>消息封装一次通信的内容</p></blockquote></li></ul><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><ol><li><p>ConnectionFactory</p><p> 链接工厂, 用于创建链接的工厂类型.</p></li><li><p>Connection</p><p> 由链接工厂创建，用于访问ActiveMQ链接的类型</p></li><li><p>Session</p><p> 会话，一次持久有效有状态的访问，由链接创建</p></li><li><p>Destination &amp; Queue</p><p> 目的地，用于描述本次访问ActiveMQ的消息访问目的地，即ActiveMQ服务中的具体队列，由会话创建</p></li><li><p>MessageProducer</p><p> 消息生产者，在一次有效的会话中用于发送消息给ActiveMQ</p></li><li><p>MessageConsumer</p><p> 消息消费者【订阅者，处理者】，在一次有效的会话中，用于从ActiveMQ服务中获取消息的工具，由会话创建</p></li><li><p>Message</p><p> 消息，通过消息生产者向MQ服务发送消息时使用的数据载体对象或者消息消费者从MQ服务中获取消息时使用的数据载体对象，时所有消息具体类型的顶级接口，可以通过会话创建或者通过会话从MQ服务中获取 </p></li></ol><h2 id="五种消息体格式"><a href="#五种消息体格式" class="headerlink" title="五种消息体格式"></a>五种消息体格式</h2><ul><li><p>TextMessage</p><blockquote><p>普通字符串消息，包含一个string</p></blockquote></li><li><p>MapMessage</p><blockquote><p>一个Map类型的消息，key是String类型，而值为Java的基本类型</p></blockquote></li><li><p>BytesMessage</p><blockquote><p>二进制数组消息，包含一个byte[]</p></blockquote></li><li><p>StreamMessage</p><blockquote><p>java数据流消息，用标准流操作来顺序的填充和读取</p></blockquote></li><li><p>ObjectMessage</p><blockquote><p>对象消息，包含一个可序列化的java对象</p></blockquote></li></ul><p><strong>消息属性</strong><br>他们是以属性名和属性值对的形式指定的。可以 将属性是为 消息头得扩展，属性指定一些消息头没有包 括的附加信息，比如可以在属性里指定消息选择器。</p><p>消息的属性就像可以分配给一条消息的附加消息头一样。他们允许开发者添加有关消息的不透明附加信息。</p><p>它们还用于暴露消息选择器在消息过滤时使用的数据。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TextMessage</span> message <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createTextMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>message<span class="token punctuation">.</span><span class="token function">setStringProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"kuangshen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 自定义属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h2><blockquote><ul><li>创建producer模块<ul><li>测试发送文本消息</li><li>测试发送消息对象<ul><li>实现Serializable接口，序列化</li></ul></li></ul></li><li>创建consumer模块<ul><li>测试接收文本消息</li><li>测试接收消息对象</li></ul></li></ul></blockquote><p><strong>消息发送模块</strong></p><ol><li>引入ActiveMQ的maven坐标</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- ActiveMQ所依赖的jar包 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.activemq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>activemq-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>测试发送文本信息功能</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 生产消息    */</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendHelloWorldActiveMQ</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">// 定义链接工厂</span>       <span class="token class-name">ConnectionFactory</span> connectionFactory <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token comment">// 链接对象</span>       <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token comment">// 会话对象</span>       <span class="token class-name">Session</span> session <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token comment">// 目的地</span>       <span class="token class-name">Destination</span> destination <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token comment">// 消息的发送者</span>       <span class="token class-name">MessageProducer</span> messageProducer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token comment">// 定义消息</span>       <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>           <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token comment">/**            * userName:访问ActiveMQ服务的用户名，默认admin,可以在jetty-ream.properties中修改            * password:访问ActiveMQ服务的用户名，默认admin,可以在jetty-ream.properties中修改            * brokerURL: 访问ActiveMQ服务的路径地址，路径结构为协议名：//主机地址：端口号            */</span>           connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"failover:(tcp://localhost:61616)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//启动链接</span>           connection<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">/**            * transacted 是否使用事务，消息原子化，配合事务提交来进行 批量和发送和每个发送            *      true  会一个消息确认机制            *      false            * acknowledgeMode            *      static final int AUTO_ACKNOWLEDGE = 1; 自动消息确认            *            *      static final int CLIENT_ACKNOWLEDGE = 2; 客户端确认            *            *      static final int DUPS_OK_ACKNOWLEDGE = 3; 有副本的客户端确认消息机制            *            *      static final int SESSION_TRANSACTED = 0; session已处理的            */</span>           session <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token class-name">Session</span><span class="token punctuation">.</span>AUTO_ACKNOWLEDGE<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 创建目的地，即队列</span>           destination <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createQueue</span><span class="token punctuation">(</span><span class="token string">"helloworld-distination"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 创建消息生产者 需要提供目的地</span>           messageProducer <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createProducer</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 创建消息对象</span>           message <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createTextMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//发送消息</span>           messageProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>           <span class="token comment">// 回收消息发送者</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>messageProducer<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                   messageProducer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JMSException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>session<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                   session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JMSException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                   connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JMSException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="3"><li><p>测试发送对象信息功能</p><blockquote><p>首先创建一个user类，并且要<strong>实现序列化接口</strong></p><p>其次实现代码:</p></blockquote> <pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>         connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"failover:(tcp://localhost:61616)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             connection<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             session <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token class-name">Session</span><span class="token punctuation">.</span>AUTO_ACKNOWLEDGE<span class="token punctuation">)</span><span class="token punctuation">;</span>             destination <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createQueue</span><span class="token punctuation">(</span><span class="token string">"my-user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             messageConsumer <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createConsumer</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>             message <span class="token operator">=</span> messageConsumer<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">/**         处理消息类型，转成ObjectMessage         调用getObject()后，再强转为对应的类型         */</span>         <span class="token class-name">ObjectMessage</span> objectMessage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ObjectMessage</span><span class="token punctuation">)</span>message<span class="token punctuation">;</span>         <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span>objectMessage<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// 回收消息发送者</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>messageConsumer<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                 messageConsumer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JMSException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>session<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                 session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JMSException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                 connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JMSException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><strong>消息接收模块</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- ActiveMQ所依赖的jar包 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.activemq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>activemq-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- log4j日志 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>测试接受文本</p><blockquote><p>要有对应的对象类，并且实现了序列化</p></blockquote></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>         connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"failover:(tcp://localhost:61616)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         connection<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         session <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token class-name">Session</span><span class="token punctuation">.</span>AUTO_ACKNOWLEDGE<span class="token punctuation">)</span><span class="token punctuation">;</span>         destination <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createQueue</span><span class="token punctuation">(</span><span class="token string">"helloworld-distination"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         messageConsumer <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createConsumer</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>         message <span class="token operator">=</span> messageConsumer<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 处理消息</span>         <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TextMessage</span><span class="token punctuation">)</span>message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// 回收消息发送者</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>messageConsumer<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                 messageConsumer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JMSException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>session<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                 session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JMSException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                 connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JMSException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试接收对象</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"failover:(tcp://localhost:61616)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           connection<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           session <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token class-name">Session</span><span class="token punctuation">.</span>AUTO_ACKNOWLEDGE<span class="token punctuation">)</span><span class="token punctuation">;</span>           destination <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createQueue</span><span class="token punctuation">(</span><span class="token string">"my-user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           messageConsumer <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createConsumer</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>           message <span class="token operator">=</span> messageConsumer<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 处理消息</span>           <span class="token class-name">ObjectMessage</span> objectMessage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ObjectMessage</span><span class="token punctuation">)</span>message<span class="token punctuation">;</span>           <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span>objectMessage<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>           <span class="token comment">// 回收消息发送者</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>messageConsumer<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                   messageConsumer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JMSException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>session<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                   session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JMSException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                   connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JMSException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="消费者的3大问题"><a href="#消费者的3大问题" class="headerlink" title="消费者的3大问题"></a>消费者的3大问题</h3><ul><li>先生产消息，只启动1号消费者，1号消费者可以消费吗？</li><li>先生产消息，先启动1号消费者，再启动2号消费者。2号消费者可以消费吗？</li><li>先启动两个消费者，再生产6个消息，请问，消费情况如何？</li></ul><h3 id="实现队列服务监听处理"><a href="#实现队列服务监听处理" class="headerlink" title="实现队列服务监听处理"></a>实现队列服务监听处理</h3><blockquote><p>在消费者的那一端实现队列监听，如果队列中存在了消息，就会调用消费者那一端的方法。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**在消费者获取消息的时候注册监听即可*/</span>messageConsumer<span class="token punctuation">.</span><span class="token function">setMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 处理消息,对应的业务</span>        <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            msg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TextMessage</span><span class="token punctuation">)</span>message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JMSException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Topic模型"><a href="#Topic模型" class="headerlink" title="Topic模型"></a>Topic模型</h2><blockquote><p>publish / Subscribe 处理模式(Topic)</p><p>消息生产者(发布)把消息发布到topic中，同时有多个消息消费者(订阅)改消息.</p><ul><li><p>和<strong>点对点</strong>方式不同，发布到topic的消息会被<strong>所有订阅者消费</strong></p></li><li><p>当生产者发布消息，不管有没有消费者，都不会保存消息</p></li><li><p>一定是先有消息的消费者，后有消息的生产者</p></li></ul></blockquote><p><img src="/home/zhy/.config/Typora/typora-user-images/image-20200920182932590.png" alt="发布订阅模式"></p><p>代码实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**在session创建队列的时候要选择创建topic*/</span>destination <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createTopic</span><span class="token punctuation">(</span><span class="token string">"test-topic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th>比较项目</th><th>Topic模式队列</th><th>Queue模式队列</th></tr></thead><tbody><tr><td><strong>工作模式</strong></td><td>“订阅-发布”模式，如果当前没有订阅者，消息将会被丢弃，如果有多个订阅者，那么这些订阅者都会收到消息。</td><td>负载均衡 模式，如果当前没有消费者，消息也不会丢弃，如果有多个消费者，那么一条消息也只会发送给其中一个消费者，并且要求消费者ack信息。</td></tr><tr><td><strong>有无状态</strong></td><td>无状态</td><td>Queue 数据默认会在 mq 服务器上以文件形式保存，比如 Active MQ 一般保存在$AMQ_HOME\data\kr-store\data下面，也可以配置成DB存储。</td></tr><tr><td><strong>传递完整性</strong></td><td>如果没有订阅者，消息会被丢弃</td><td>消息不会被丢弃</td></tr><tr><td><strong>处理效率</strong></td><td>由于消息要按照订阅者的数量进行复制，所以处理性能会随着订阅者的增加而明显降低，并且还要结合不同消息协议自身的性能差异</td><td>由于一条消息只发送给一个消费者，所以就算消费者再多，性能也不会有明显降低。当然不同消息协议的具体性能也是有差异的</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 消息中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ActiveMQ </tag>
            
            <tag> 消息中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker容器化技术</title>
      <link href="2020/08/26/docker-rong-qi-hua-ji-zhu/"/>
      <url>2020/08/26/docker-rong-qi-hua-ji-zhu/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-学习"><a href="#Docker-学习" class="headerlink" title="Docker 学习"></a>Docker 学习</h1><blockquote><p>Docker 官网：<a href="http://www.docker.com/">http://www.docker.com</a><br>Docker 中文网站：<a href="https://www.docker-cn.com/">https://www.docker-cn.com</a><br>Docker Hub 官网：<a href="https://hub.docker.com/">https://hub.docker.com</a> （仓库）</p></blockquote><h2 id="Docker-入门"><a href="#Docker-入门" class="headerlink" title="Docker 入门"></a>Docker 入门</h2><h3 id="Docker-简介"><a href="#Docker-简介" class="headerlink" title="Docker 简介"></a>Docker 简介</h3><ol><li><p>什么是 Docker</p><blockquote><p>Docker 是基于 Go 语言实现的开源容器项目。利用操作系统本身已有的机制和特性，可以实现远超传统虚拟机的轻量级虚拟化。它是内核级的虚拟化。期望达到使项目运行环境“一次封装，到处运行的目的”。<br>利用 docker 创建的运行环境叫做 docker 容器，容器是通过 docker 镜像创建的，docker 镜像文件可以放在私有仓库中也可以放在共有仓库中。</p></blockquote></li><li><p>Docker 特点</p><ul><li>效率高</li><li>职责明确</li><li>结构完整</li><li>契合微服务架构</li></ul></li><li><p>Docker 架构<br><img src="https://s1.ax1x.com/2020/09/01/dxO2ng.png" alt="Docker架构"></p></li></ol><ul><li><p>Docker daemon(Docker 守护进程)</p><blockquote><p>Docker daemon 是一个运行在宿主（DOCKER_HOST）的后台进程。我们可通过 Docker 客户端与之通信。</p></blockquote></li><li><p>Client(Docker 客户端)</p><blockquote><p>Docker 客户端是 Docker 的用户界面，它可以接受用户命令和配置标识，并与 Docker daemon 通信。图中，docker build 等都是 Docker 的相关命令。</p></blockquote></li><li><p>Images(Docker 镜像)</p><blockquote><p>Docker 镜像（Image）就是一个只读的模板。镜像可以用来创建 Docker 容器，一个镜像可以创建很多容器。 就好似 Java 中的 类和对象，类就是镜像，容器就是对象！</p></blockquote></li><li><p>Container(容器)</p><blockquote><p>容器是镜像的可运行实例。镜像和容器的关系有点类似于面向对象中，类和对象的关系。我们可通过 Docker API 或者 CLI 命令来启停、移动、删除容器</p></blockquote></li><li><p>Registry(仓库)</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">仓库（Repository）是集中存放镜像文件的场所。仓库(Repository)和仓库注册服务器（Registry）是有区别的。仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。仓库分为公开仓库（Public）和私有仓库（Private）两种形式。最大的公开仓库是 Docker Hub(https:&#x2F;&#x2F;hub.docker.com&#x2F;)，存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云 、网易云 等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3></li></ul><blockquote><p>本次安装使用 Linux 的 centos7 系统</p></blockquote><ol><li><a href="https://docs.docker.com/engine/install/centos/">官网安装参考</a></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装gcc相关环境</span>yum -y <span class="token function">install</span> gccyum -y <span class="token function">install</span> gcc-c++<span class="token comment"># 卸载旧版本，推荐在安装前执行一遍</span>$ <span class="token function">sudo</span> yum remove docker <span class="token punctuation">\</span>                  docker-client <span class="token punctuation">\</span>                  docker-client-latest <span class="token punctuation">\</span>                  docker-common <span class="token punctuation">\</span>                  docker-latest <span class="token punctuation">\</span>                  docker-latest-logrotate <span class="token punctuation">\</span>                  docker-logrotate <span class="token punctuation">\</span>                  docker-engine<span class="token comment"># 安装需要的软件包</span>yum <span class="token function">install</span> -y yum-utils<span class="token comment"># 使用国内的加速</span>yum-config-manager <span class="token punctuation">\</span>    --add-repo <span class="token punctuation">\</span>     http://mirrors.aliyun.com/dockerce/linux/centos/docker-ce.repo<span class="token comment"># 更新yum软件包索引</span>yum makecache fast<span class="token comment"># 安装 Docker CE</span>yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io<span class="token comment"># 启动 Docker</span>systemctl start docker<span class="token comment"># 测试命令</span>docker versiondocker run hello-worlddocker images<span class="token comment"># 卸载</span>systemctl stop dockeryum -y remove docker-ce docker-ce-cli containerd.io<span class="token function">rm</span> -rf /var/lib/docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s1.ax1x.com/2020/09/02/wSbHuF.png" alt="镜像"></p><h3 id="阿里云镜像加速"><a href="#阿里云镜像加速" class="headerlink" title="阿里云镜像加速"></a>阿里云镜像加速</h3><ol><li>介绍：<a href="https://www.aliyun.com/product/acr">https://www.aliyun.com/product/acr</a></li><li>注册一个属于自己的阿里云账户(可复用淘宝账号)</li><li>进入管理控制台设置密码，开通</li><li>查看镜像加速器自己的</li></ol><p><img src="https://s1.ax1x.com/2020/09/02/wSOj4s.png" alt="镜像加速器"></p><ol start="5"><li>选择对应的版本</li><li>配置镜像加速<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /etc/docker<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">'EOF'&#123;  "registry-mirrors": ["https://14xliptq.mirror.aliyuncs.com"]&#125;EOF</span><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="docker-的常用命令"><a href="#docker-的常用命令" class="headerlink" title="docker 的常用命令"></a>docker 的常用命令</h3></li></ol><h4 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker version <span class="token comment"># 显示 Docker 版本信息。</span>docker info <span class="token comment"># 显示 Docker 系统信息，包括镜像和容器数。。</span>docker --help <span class="token comment"># 帮助</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h4><ul><li><strong>docker</strong> <strong>images</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出本地主机上的镜像</span><span class="token punctuation">[</span>root@iZitgsup0vfxnqZ ~<span class="token punctuation">]</span><span class="token comment"># docker images</span>REPOSITORY TAG IMAGE ID CREATEDSIZEhello-world latest bf756fb1ae65 <span class="token number">4</span> months ago<span class="token number">13</span>.3kB<span class="token comment"># 解释</span>REPOSITORY 镜像的仓库源TAG 镜像的标签IMAGE ID 镜像的IDCREATED 镜像创建时间SIZE 镜像大小<span class="token comment"># 同一个仓库源可以有多个 TAG，代表这个仓库源的不同版本，我们使用REPOSITORY：TAG 定义不同</span>的镜像，如果你不定义镜像的标签版本，docker将默认使用 lastest 镜像！<span class="token comment"># 可选项</span>-a： 列出本地所有镜像-q： 只显示镜像id--digests： 显示镜像的摘要信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>docker</strong> <strong>search</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZitgsup0vfxnqZ ~<span class="token punctuation">]</span><span class="token comment"># docker search mysql</span>NAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATEDmysql                             MySQL is a widely used, open-source relation…   <span class="token number">9918</span>                <span class="token punctuation">[</span>OK<span class="token punctuation">]</span><span class="token comment"># docker search 某个镜像的名称 对应DockerHub仓库中的镜像</span><span class="token comment"># 可选项</span>--filter<span class="token operator">=</span>stars<span class="token operator">=</span><span class="token number">50</span> ： 列出收藏数不小于指定值的镜像。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>docker</strong> <strong>pull</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载镜像</span><span class="token punctuation">[</span>root@kuangshen ~<span class="token punctuation">]</span><span class="token comment"># docker pull mysql</span>Using default tag: latest <span class="token comment"># 不写tag，默认是latest</span>latest: Pulling from library/mysql54fec2fa59d0: Already exists <span class="token comment"># 分层下载</span>bcc6c6145912: Already exists951c3d959c9d: Already exists05de4d0e206e: Already exists319f0394ef42: Already existsd9185034607b: Already exists013a9c64dadc: Already exists42f3f7d10903: Pull completec4a3851d9207: Pull complete82a1cc65c182: Pull completea0a6b01efa55: Pull completebca5ce71f9ea: Pull completeDigest:sha256:61a2a33f4b8b4bc93b7b6b9e65e64044aaec594809f818aeffbff69a893d1944 <span class="token comment">#签名</span>Status: Downloaded newer image <span class="token keyword">for</span> mysql:latestdocker.io/library/mysql:latest <span class="token comment"># 真实位置</span><span class="token comment"># 指定版本下载</span><span class="token punctuation">[</span>root@kuangshen ~<span class="token punctuation">]</span><span class="token comment"># docker pull mysql:5.7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>docker</strong> <strong>rmi</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除镜像</span>docker rmi -f 镜像id <span class="token comment"># 删除单个</span>docker rmi -f 镜像名:tag 镜像名:tag <span class="token comment"># 删除多个</span>docker rmi -f <span class="token variable"><span class="token variable">$(</span>docker images -qa<span class="token variable">)</span></span> <span class="token comment"># 删除全部</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h4><ul><li><strong>新建容器并启动</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 命令</span>docker run <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> IMAGE <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span><span class="token punctuation">[</span>ARG<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment"># 常用参数说明</span>--name<span class="token operator">=</span><span class="token string">"Name"</span> <span class="token comment"># 给容器指定一个名字</span>-d <span class="token comment"># 后台方式运行容器，并返回容器的id！</span>-i <span class="token comment"># 以交互模式运行容器，通过和 -t 一起使用</span>-t <span class="token comment"># 给容器重新分配一个终端，通常和 -i 一起使用</span>-P <span class="token comment"># 随机端口映射（大写）</span>-p <span class="token comment"># 指定端口映射（小结），一般可以有四种写法</span>ip:hostPort:containerPortip::containerPorthostPort:containerPort <span class="token punctuation">(</span>常用<span class="token punctuation">)</span>containerPort<span class="token comment"># 测试</span><span class="token punctuation">[</span>root@kuangshen ~<span class="token punctuation">]</span><span class="token comment"># docker images</span>REPOSITORY TAG IMAGE ID CREATEDSIZEcentos latest 470671670cac <span class="token number">3</span> months ago237MB<span class="token comment"># 使用centos进行用交互模式启动容器，在容器内执行/bin/bash命令！</span><span class="token punctuation">[</span>root@kuangshen ~<span class="token punctuation">]</span><span class="token comment"># docker run -it centos /bin/bash</span><span class="token punctuation">[</span>root@dc8f24dd06d0 /<span class="token punctuation">]</span><span class="token comment"># ls # 注意地址，已经切换到容器内部了！</span>bin etc lib lost+found mnt proc run srv tmp vardev home lib64 media opt root sbin sys usr<span class="token punctuation">[</span>root@dc8f24dd06d0 /<span class="token punctuation">]</span><span class="token comment"># exit # 使用 exit 退出容器</span><span class="token builtin class-name">exit</span><span class="token punctuation">[</span>root@kuangshen ~<span class="token punctuation">]</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>列出所有运行的容器</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 命令</span>docker <span class="token function">ps</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span><span class="token comment"># 常用参数说明</span>-a <span class="token comment"># 列出当前所有正在运行的容器 + 历史运行过的容器</span>-l <span class="token comment"># 显示最近创建的容器</span>-n<span class="token operator">=</span>? <span class="token comment"># 显示最近n个创建的容器</span>-q <span class="token comment"># 静默模式，只显示容器编号。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>退出容器</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">exit</span> <span class="token comment"># 容器停止退出</span>ctrl+P+Q <span class="token comment"># 容器不停止退出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>启动停止容器</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker start <span class="token punctuation">(</span>容器id or 容器名<span class="token punctuation">)</span> <span class="token comment"># 启动容器</span>docker restart <span class="token punctuation">(</span>容器id or 容器名<span class="token punctuation">)</span> <span class="token comment"># 重启容器</span>docker stop <span class="token punctuation">(</span>容器id or 容器名<span class="token punctuation">)</span> <span class="token comment"># 停止容器</span>docker <span class="token function">kill</span> <span class="token punctuation">(</span>容器id or 容器名<span class="token punctuation">)</span> <span class="token comment"># 强制停止容器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>删除容器</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker <span class="token function">rm</span> 容器id <span class="token comment"># 删除指定容器</span>docker <span class="token function">rm</span> -f <span class="token variable"><span class="token variable">$(</span>docker <span class="token function">ps</span> -a -q<span class="token variable">)</span></span> <span class="token comment"># 删除所有容器</span>docker <span class="token function">ps</span> -a -q<span class="token operator">|</span><span class="token function">xargs</span> docker <span class="token function">rm</span> <span class="token comment"># 删除所有容器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h4><ul><li><strong>后台启动容器</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 命令</span>docker run -d 容器名<span class="token comment"># 例子</span>docker run -d centos <span class="token comment"># 启动centos，使用后台方式启动</span><span class="token comment"># 问题： 使用docker ps 查看，发现容器已经退出了！</span><span class="token comment"># 解释：Docker容器后台运行，就必须有一个前台进程，容器运行的命令如果不是那些一直挂起的命</span>令，就会自动退出。<span class="token comment"># 比如，你运行了nginx服务，但是docker前台没有运行应用，这种情况下，容器启动后，会立即自</span>杀，因为他觉得没有程序了，所以最好的情况是，将你的应用使用前台进程的方式运行启动。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>查看日志</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 命令</span>docker logs -f -t --tail 容器id<span class="token comment"># 例子：我们启动 centos，并编写一段脚本来测试玩玩！最后查看日志</span><span class="token punctuation">[</span>root@kuangshen ~<span class="token punctuation">]</span><span class="token comment"># docker run -d centos /bin/sh -c "while true;do echo</span>kuangshen<span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">;</span>done"<span class="token punctuation">[</span>root@kuangshen ~<span class="token punctuation">]</span><span class="token comment"># docker ps</span>CONTAINER ID IMAGEc8530dbbe3b4 centos<span class="token comment"># -t 显示时间戳</span><span class="token comment"># -f 打印最新的日志</span><span class="token comment"># --tail 数字 显示多少条！</span><span class="token punctuation">[</span>root@kuangshen ~<span class="token punctuation">]</span><span class="token comment"># docker logs -tf --tail 10 c8530dbbe3b4</span><span class="token number">2020</span>-05-11T08:46:40.656901941Z kuangshen<span class="token number">2020</span>-05-11T08:46:41.658765018Z kuangshen<span class="token number">2020</span>-05-11T08:46:42.661015375Z kuangshen<span class="token number">2020</span>-05-11T08:46:43.662865628Z kuangshen<span class="token number">2020</span>-05-11T08:46:44.664571547Z kuangshen<span class="token number">2020</span>-05-11T08:46:45.666718583Z kuangshen<span class="token number">2020</span>-05-11T08:46:46.668556725Z kuangshen<span class="token number">2020</span>-05-11T08:46:47.670424699Z kuangshen<span class="token number">2020</span>-05-11T08:46:48.672324512Z kuangshen<span class="token number">2020</span>-05-11T08:46:49.674092766Z kuangshen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>查看容器中运行的进程信息，支持 ps 的参数</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 命令</span>docker <span class="token function">top</span> 容器id<span class="token comment"># 测试</span><span class="token punctuation">[</span>root@kuangshen ~<span class="token punctuation">]</span><span class="token comment"># docker top c8530dbbe3b4</span><span class="token environment constant">UID</span> PID <span class="token environment constant">PPID</span> C STIME TTY TIME CMDroot <span class="token number">27437</span> <span class="token number">27421</span> <span class="token number">0</span> <span class="token number">16</span>:43 ? 00:00:00 /bin/sh -c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>查看容器/镜像的元数据</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 命令</span>docker inspect 容器id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>进入容器内部</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 命令1</span>docker <span class="token builtin class-name">exec</span> -it 容器id bashShell<span class="token punctuation">(</span>/bin/bash<span class="token punctuation">)</span><span class="token comment"># 命令2</span>docker attach 容器id bashShell<span class="token punctuation">(</span>/bin/bash<span class="token punctuation">)</span><span class="token comment"># 区别</span><span class="token comment"># exec 是在容器中打开新的终端，并且可以启动新的进程</span><span class="token comment"># attach 直接进入容器启动命令的终端，不会启动新的进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s1.ax1x.com/2020/09/03/w9X2sP.png" alt="docker图解"></p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><h4 id="docker-部署-tomcat"><a href="#docker-部署-tomcat" class="headerlink" title="docker 部署 tomcat"></a>docker 部署 tomcat</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 官方文档解释</span><span class="token comment"># -it ：交互模式</span><span class="token comment"># --rm：容器启动成功并退出以后容器就自动移除，一般在测试情况下使用！</span>docker run -it --rm tomcat:9.0<span class="token comment"># 1、下载tomcat镜像</span>docker pull tomcat<span class="token comment"># 2、启动</span><span class="token comment"># -d 后台启动</span><span class="token comment"># -p 本机端口:容器端口</span><span class="token comment"># --name 镜像名称</span>docker run -d -p <span class="token number">8080</span>:8080 --name tomcat9 tomcat<span class="token comment"># 3、进入tomcat</span>docker <span class="token builtin class-name">exec</span> -it tomcat9 /bin/bash<span class="token comment"># 4、思考：我们以后要部署项目，还需要进入容器中，是不是十分麻烦，要是有一种技术，可以将容器内和我们Linux进行映射挂载就好了？我们后面会将数据卷技术来进行挂载操作，也是一个核心内容，这里大家先听听名词就好，我们很快就会讲到！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="docker-部署-Nginx"><a href="#docker-部署-Nginx" class="headerlink" title="docker 部署 Nginx"></a>docker 部署 Nginx</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1、搜索镜像</span><span class="token punctuation">[</span>root@kuangshen ~<span class="token punctuation">]</span><span class="token comment"># docker search nginx</span>NAME DESCRIPTION STARS OFFICIALnginx Official build of Nginx. <span class="token number">13159</span> <span class="token punctuation">[</span>OK<span class="token punctuation">]</span><span class="token comment"># 2、拉取镜像</span><span class="token punctuation">[</span>root@kuangshen ~<span class="token punctuation">]</span><span class="token comment"># docker pull nginx</span>Using default tag: latestlatest: Pulling from library/nginx54fec2fa59d0: Pull complete4ede6f09aefe: Pull completef9dc69acb465: Pull completeDigest:sha256:86ae264c3f4acb99b2dee4d0098c40cb8c46dcf9e1148f05d3a51c4df6758c12Status: Downloaded newer image <span class="token keyword">for</span> nginx:latestdocker.io/library/nginx:latest<span class="token comment"># 3、启动容器</span><span class="token punctuation">[</span>root@iZitgsup0vfxnqZ ~<span class="token punctuation">]</span><span class="token comment"># docker ps</span>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES<span class="token punctuation">[</span>root@iZitgsup0vfxnqZ ~<span class="token punctuation">]</span><span class="token comment"># docker images</span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEnginx               latest              4bb46517cac3        <span class="token number">2</span> weeks ago         133MBcentos              latest              0d120b6ccaa8        <span class="token number">3</span> weeks ago         215MBtomcat              <span class="token number">9.0</span>                 2ae23eb477aa        <span class="token number">4</span> weeks ago         647MB<span class="token punctuation">[</span>root@iZitgsup0vfxnqZ ~<span class="token punctuation">]</span><span class="token comment"># docker run -d --name nginx -p 8082:80 nginx</span>1485108ac9923bbaceb0cb306265467622cf71f08a588c28013ff5c231d006ba<span class="token punctuation">[</span>root@iZitgsup0vfxnqZ ~<span class="token punctuation">]</span><span class="token comment"># docker ps</span>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES1485108ac992        nginx               <span class="token string">"/docker-entrypoint.…"</span>   <span class="token number">5</span> seconds ago       Up <span class="token number">4</span> seconds        <span class="token number">0.0</span>.0.0:8082-<span class="token operator">></span><span class="token number">80</span>/tcp   nginx<span class="token punctuation">[</span>root@iZitgsup0vfxnqZ ~<span class="token punctuation">]</span><span class="token comment"># curl 182.92.159.117:8082</span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>Welcome to nginx<span class="token operator">!</span><span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span>    body <span class="token punctuation">&#123;</span>        width: 35em<span class="token punctuation">;</span>        margin: <span class="token number">0</span> auto<span class="token punctuation">;</span>        font-family: Tahoma, Verdana, Arial, sans-serif<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>/style<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>Welcome to nginx<span class="token operator">!</span><span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token operator">&lt;</span>p<span class="token operator">></span>If you see this page, the nginx web server is successfully installed andworking. Further configuration is required.<span class="token operator">&lt;</span>/p<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>For online documentation and support please refer to<span class="token operator">&lt;</span>a <span class="token assign-left variable">href</span><span class="token operator">=</span><span class="token string">"http://nginx.org/"</span><span class="token operator">></span>nginx.org<span class="token operator">&lt;</span>/a<span class="token operator">></span>.<span class="token operator">&lt;</span>br/<span class="token operator">></span>Commercial support is available at<span class="token operator">&lt;</span>a <span class="token assign-left variable">href</span><span class="token operator">=</span><span class="token string">"http://nginx.com/"</span><span class="token operator">></span>nginx.com<span class="token operator">&lt;</span>/a<span class="token operator">></span>.<span class="token operator">&lt;</span>/p<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span>em<span class="token operator">></span>Thank you <span class="token keyword">for</span> using nginx.<span class="token operator">&lt;</span>/em<span class="token operator">></span><span class="token operator">&lt;</span>/p<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="commit-镜像"><a href="#commit-镜像" class="headerlink" title="commit 镜像"></a>commit 镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker commit 提交容器成为一个新的副本<span class="token comment">#与git类似</span>docker commit -m <span class="token string">"提交的描述信息"</span> -a<span class="token operator">=</span><span class="token string">"作者"</span> 容器id 目标镜像名:<span class="token punctuation">[</span>tag<span class="token punctuation">]</span>通过commit镜像来进行版本的迭代，会直接生成一个新的镜像<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h2><blockquote><p><strong>问题</strong>：mysql 容器删除的时候会把数据一起删掉</p><p><strong>容器数据卷</strong>：容器之间可以进行数据共享的技术，docker 容器中产生的数据同步到本地，卷技术，目录的挂载，把容器中的内容挂载到 linux 中</p></blockquote><p><img src="https://s1.ax1x.com/2020/09/06/werpm4.png" alt="数据卷挂载"></p><h3 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -it -v 主机目录:容器内目录<span class="token comment"># 测试</span>docker run -it -v /home/ceshi:/home/ceshi centos00000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s1.ax1x.com/2020/09/06/wegMWR.png" alt="wegMWR.png"><br><img src="https://s1.ax1x.com/2020/09/06/weglS1.png" alt="weglS1.png"></p><p><strong>二者实现了双向绑定</strong></p><blockquote><p>以后修改只需要在本地修改即可，容器内会自动同步</p></blockquote><p><strong>测试 mysql 挂载</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装mysql</span>docker pull mysql:5.7<span class="token comment"># 启动mysql</span><span class="token comment"># -e 配置环境</span><span class="token comment"># MYSQL_ROOT_PASSOWRD=root 初始化root用户密码为root</span>docker run -d -p <span class="token number">8082</span>:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>root --name mysql01 mysql:5.7<span class="token comment">#然后就能用navicat访问了，进行任何操作都可以对linux和docker容器进行同步</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="具名挂载和匿名挂载"><a href="#具名挂载和匿名挂载" class="headerlink" title="具名挂载和匿名挂载"></a>具名挂载和匿名挂载</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 匿名挂载</span>-v 容器内路径docker run -d -P --name nginx01 -v /etc/nginx nginx<span class="token comment"># 匿名挂载的缺点，就是不好维护，通常使用命令 docker volume维护</span>docker volume <span class="token function">ls</span><span class="token comment"># 具名挂载</span>-v 卷名:/容器内路径docker run -d -P --name nginx02 -v nginxconfig:/etc/nginx nginx<span class="token comment"># 查看挂载的路径</span><span class="token punctuation">[</span>root@kuangshen ~<span class="token punctuation">]</span><span class="token comment"># docker volume inspect nginxconfig</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"CreatedAt"</span><span class="token builtin class-name">:</span> <span class="token string">"2020-05-13T17:23:00+08:00"</span>,<span class="token string">"Driver"</span><span class="token builtin class-name">:</span> <span class="token string">"local"</span>,<span class="token string">"Labels"</span><span class="token builtin class-name">:</span> null,<span class="token string">"Mountpoint"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/volumes/nginxconfig/_data"</span>,<span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"nginxconfig"</span>,<span class="token string">"Options"</span><span class="token builtin class-name">:</span> null,<span class="token string">"Scope"</span><span class="token builtin class-name">:</span> <span class="token string">"local"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token comment"># 怎么判断挂载的是卷名而不是本机目录名？</span>不是/开始就是卷名，是/开始就是目录名<span class="token comment"># 改变文件的读写权限</span><span class="token comment"># ro: readonly</span><span class="token comment"># rw: readwrite</span><span class="token comment"># 指定容器对我们挂载出来的内容的读写权限</span>docker run -d -P --name nginx02 -v nginxconfig:/etc/nginx:ro nginxdocker run -d -P --name nginx02 -v nginxconfig:/etc/nginx:rw nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><blockquote><p><strong>Dockerfile</strong>就是用来构建 docker 镜像的构建文件,命令脚本</p><p>通过脚本可以生成对象，脚本是一个个的命令</p><p>流程：开发应用=&gt;DockerFile=&gt;打包为镜像=&gt;上传到仓库（私有仓库，公有仓库）=&gt; 下载镜像 =&gt; 启动运行</p></blockquote><h3 id="DockerFile-构建流程"><a href="#DockerFile-构建流程" class="headerlink" title="DockerFile 构建流程"></a>DockerFile 构建流程</h3><p><strong>基础知识</strong></p><ol><li>每条保留字指令都必须为大写字母且后面要跟随至少一个参数</li><li>指令按照从上到下，顺序执行</li><li>#表示注释</li><li>每条指令都会创建一条新的镜像层，并对镜像层进行提交</li></ol><p><strong>流程</strong></p><ol><li>docker 从基础镜像运行一个容器</li><li>执行一条指令并对容器做出修改</li><li>执行类似 docker commit 的操作提交一个新的镜像层</li><li>Docker 基于刚提交的镜像运行一个新的容器</li><li>执行下一条 dockerFile 指令直到所有的都执行完成</li></ol><p><strong>dockerFile</strong>,<strong>镜像</strong>,<strong>容器</strong>:</p><ul><li>DockerFile 是软件的原材料 (源代码)</li><li>Docker 镜像则是软件的交付品 (.apk)</li><li>Docker 容器则是软件的运行状态 （客户下载安装执行）</li></ul><p>DockerFile 面向开发，Docker 镜像成为交付标准，Docker 容器则涉及部署与运维，三者缺一不可！</p><p><img src="https://s1.ax1x.com/2020/09/07/wuVYfx.png" alt="三者关系"></p><p><strong>DockerFile</strong>：需要定义一个 DockerFile,DockerFile 定义了进程需要的一切东西。DockerFile 涉及的内容包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进<br>程和内核进程（当引用进行需要和系统服务和内核进程打交道，这时需要考虑如何设计 namespace 的权<br>限控制）等等。</p><p><strong>Docker 镜像</strong>：在 DockerFile 定义了一个文件之后，Docker build 时会产生一个 Docker 镜像，当运行 Docker 镜像时，会真正开始提供服务；<br><strong>Docker 容器</strong>：容器是直接提供服务的。</p><h3 id="DockerFile-指令"><a href="#DockerFile-指令" class="headerlink" title="DockerFile 指令"></a>DockerFile 指令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM              <span class="token comment">#基础镜像，当前镜像基于哪个环境</span>MAINTAINER        <span class="token comment"># 镜像维护者的姓名混合邮箱地址</span>RUN               <span class="token comment"># 容器构建时需要运行的命令</span>EXPOSE            <span class="token comment"># 当前容器对外保留出的端口</span>WORKDIR           <span class="token comment"># 指定在创建容器后，终端默认登录的进来工作目录，一个落脚点</span>ENV               <span class="token comment"># 用来在构建镜像过程中设置环境变量</span>ADD               <span class="token comment"># 将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包</span>COPY              <span class="token comment"># 类似ADD，拷贝文件和目录到镜像中！</span>VOLUME            <span class="token comment"># 容器数据卷，用于数据保存和持久化工作</span>CMD               <span class="token comment"># 指定一个容器启动时要运行的命令，dockerFile中可以有多个CMD指令，但只有最后一个生效！</span>ENTRYPOINT        <span class="token comment"># 指定一个容器启动时要运行的命令！和CMD一样</span>ONBUILD           <span class="token comment"># 当构建一个被继承的DockerFile时运行命令，父镜像在被子镜像继承后，父镜像的被触发</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>编写一个 centos</strong></p><blockquote><p>官方默认的 centos 镜像没有 vim ifconfig 等功能，我们给他加上</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建一个dockerfile-centos，名称可以随便取</span><span class="token comment"># 编写以下代码</span>FROM centosMAINTAINER zhy<span class="token operator">&lt;</span><span class="token number">869994221</span>@qq.com<span class="token operator">></span>ENV MYPATH /usr/localWORKDIR <span class="token variable">$MYPATH</span>RUN yum <span class="token function">install</span> -y <span class="token function">vim</span>RUN yum <span class="token function">install</span> -y net-toolsEXPOSE <span class="token number">80</span>CMD <span class="token builtin class-name">echo</span> <span class="token variable">$MYPATH</span>CMD <span class="token builtin class-name">echo</span> <span class="token string">"===========end=========="</span>CMD /bin/bash<span class="token comment"># 保存并build ↓格式</span><span class="token comment"># docker build -f dockerfile文件名 -t 名称:版本 .</span><span class="token comment"># 注意别忘了最后有个.  . 表示当前目录</span>docker build -f dockerfile-centos -t mycentos:1.0 <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s1.ax1x.com/2020/09/07/wuu3Js.png" alt="build"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看本地镜像仓库,发现已经打包成功</span><span class="token punctuation">[</span>root@iZitgsup0vfxnqZ DockerFileDir<span class="token punctuation">]</span><span class="token comment"># docker images</span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEmycentos            <span class="token number">1.0</span>                 a38375cb8526        <span class="token number">2</span> minutes ago       295MBcentos              latest              0d120b6ccaa8        <span class="token number">3</span> weeks ago         215MB<span class="token comment"># 运行自己的镜像</span>docker run -it mycentos:1.0<span class="token comment"># 可以发现工作空间被切换成了/usr/local</span><span class="token comment"># 测试vim 和ifconfig功能，发现可以使用，证明成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>自定义镜像 tomcat</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Docker-网络"><a href="#Docker-网络" class="headerlink" title="Docker 网络"></a>Docker 网络</h2><blockquote><p>查看本地 ip <code>ip addr</code></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lo <span class="token number">127.0</span>.0.1 <span class="token comment"># 本机回环地址</span>eth0 <span class="token number">172.17</span>.90.138 <span class="token comment"># 阿里云的私有IP</span>docker0 <span class="token number">172.18</span>.0.1 <span class="token comment"># docker网桥</span><span class="token comment"># 问题：Docker 是如何处理容器网络访问的？</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>原理</p></blockquote><ol><li>每一个安装了 Docker 的 linux 主机都有一个 docker0 的虚拟网卡。这是个桥接网卡，使用了<code>veth-pair</code>技术！</li><li>每启动一个容器，linux 主机就会多了一个虚拟网卡。</li></ol><blockquote><p>结论：镜像 和 镜像之间共用一个路由器。就是 docker0。任何一个容器启动默认都是 docker0 网络。docker 默认会给容器分配一个可用 ip。</p></blockquote><p><img src="https://s1.ax1x.com/2020/09/08/wQF09x.png" alt="原理示意图"></p><blockquote><p>小结</p></blockquote><p>Docker 使用 Linux 桥接，在宿主机虚拟一个 Docker 容器网桥(docker0)，Docker 启动一个容器时会根据 Docker 网桥的网段分配给容器一个 IP 地址，称为 Container-IP，同时 Docker 网桥是每个容器的默认网关。因为在同一宿主机内的容器都接入同一个网桥，这样容器之间就能够通过容器的 Container-IP 直接通信。</p><p><img src="https://s1.ax1x.com/2020/09/08/wQFTKS.png"><br>Docker 容器网络就很好的利用了 Linux 虚拟网络技术，在本地主机和容器内分别创建一个虚拟接口，并<br>让他们彼此联通（这样一对接口叫 veth pair）；</p><p>Docker 中的网络接口默认都是虚拟的接口。虚拟接口的优势就是转发效率极高（因为 Linux 是在内核中<br>进行数据的复制来实现虚拟接口之间的数据转发，无需通过外部的网络设备交换），对于本地系统和容<br>器系统来说，虚拟接口跟一个正常的以太网卡相比并没有区别，只是他的速度快很多。</p><h3 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h3><blockquote><p>官方的 docker0 有很大的局限性: <strong>不支持容器名连接访问</strong></p><p><strong>–link</strong> 的方式原理其实是<strong>在 host 中配置了另一方容器的 ip</strong>，方法太过于笨重也不推荐</p><p>这里我们使用<strong>自定义网络:</strong><br>docker network –help 查看相关的命令</p></blockquote><p>所有的网络模式</p><table><thead><tr><th align="center">网络模式</th><th align="center">配置</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">bridge 模式</td><td align="center">–net=bridge</td><td align="center">默认值，在 Docker 网桥 docker0 上为容器创建新的网络栈</td></tr><tr><td align="center">none 模式</td><td align="center">–net=none</td><td align="center">不配置网络，用户可以稍后进入容器，自行配置</td></tr><tr><td align="center">container 模式</td><td align="center">–net=container:name/id</td><td align="center">容器和另外一个容器共享 Network namespace。kubernetes 中的 pod 就是多个容器共享一个 Network namespace。</td></tr><tr><td align="center">host 模式</td><td align="center">–net=host</td><td align="center">容器和宿主机共享 Network namespace</td></tr><tr><td align="center">用户自定义</td><td align="center">–net=自定义网络</td><td align="center">用户自己使用 network 相关命令定义网络，创建容器的时候可以指定为自己定义的网络</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 这里的 --net bridge 是默认参数，我们不写也存在</span>docker run -d -P --name tomcat01  --net bridge tomcat<span class="token comment"># docker0的特点：默认，域名不能访问，--link可以打通</span><span class="token comment"># 自定义网络</span><span class="token comment"># --driver 控制网络模式</span><span class="token comment"># --subnet 192.168.0.0/16子网地址  范围是:192.168.0.2  ~ 192.168.255.254</span><span class="token comment"># --gateway 192.168.0.1网关</span><span class="token comment">#</span><span class="token punctuation">[</span>root@iZitgsup0vfxnqZ ~<span class="token punctuation">]</span><span class="token comment"># docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span>0eb3d858e34963ff9442b4e3290e7954e6c6233bed364af57820472b8e02b295<span class="token punctuation">[</span>root@iZitgsup0vfxnqZ ~<span class="token punctuation">]</span><span class="token comment"># docker network ls</span>NETWORK ID          NAME                DRIVER              SCOPE6c820a2a1f08        bridge              bridge              <span class="token builtin class-name">local</span>ebc0fc48ebb0        <span class="token function">host</span>                <span class="token function">host</span>                <span class="token builtin class-name">local</span>0eb3d858e349        mynet               bridge              <span class="token builtin class-name">local</span>d872bbcd6c68        none                null                <span class="token builtin class-name">local</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s1.ax1x.com/2020/09/08/wQT3Kf.png" alt="自定义网络"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#设置网络模式为mynet启动一个tomcat</span><span class="token punctuation">[</span>root@iZitgsup0vfxnqZ ~<span class="token punctuation">]</span><span class="token comment"># docker run -d -P --name tomcat01 --net mynet tomcat</span>150349e401d9436d8828218d53d9005c02ad2b5909cf2ab892b3bc03b03a4872<span class="token comment">#设置网络模式为mynet再次启动一个tomcat</span><span class="token punctuation">[</span>root@iZitgsup0vfxnqZ ~<span class="token punctuation">]</span><span class="token comment"># docker run -d -P --name tomcat02 --net mynet tomcat</span>ad65e04a7131dc40f430e53bdc6de96d1319f4ef177346b7701b64b7f864023a<span class="token punctuation">[</span>root@iZitgsup0vfxnqZ ~<span class="token punctuation">]</span><span class="token comment"># docker exec -it tomcat01 ip addr</span><span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo       valid_lft forever preferred_lft forever<span class="token number">35</span>: eth0@if36: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc noqueue state UP group default    link/ether 02:42:c0:a8:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid <span class="token number">0</span>    inet <span class="token number">192.168</span>.0.2/16 brd <span class="token number">192.168</span>.255.255 scope global eth0 <span class="token comment"># ip被分配到了新创建的子网中</span>       valid_lft forever preferred_lft forever<span class="token punctuation">[</span>root@iZitgsup0vfxnqZ ~<span class="token punctuation">]</span><span class="token comment"># docker exec -it tomcat02 ip addr</span><span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo       valid_lft forever preferred_lft forever<span class="token number">37</span>: eth0@if38: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc noqueue state UP group default    link/ether 02:42:c0:a8:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid <span class="token number">0</span>    inet <span class="token number">192.168</span>.0.3/16 brd <span class="token number">192.168</span>.255.255 scope global eth0 <span class="token comment"># ip被分配到了新创建的子网中</span>       valid_lft forever preferred_lft forever<span class="token punctuation">[</span>root@iZitgsup0vfxnqZ ~<span class="token punctuation">]</span><span class="token comment"># docker exec -it tomcat02 ping tomcat01  # 二者相互可以通过名称ping通</span>PING tomcat01 <span class="token punctuation">(</span><span class="token number">192.168</span>.0.2<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.<span class="token number">64</span> bytes from tomcat01.mynet <span class="token punctuation">(</span><span class="token number">192.168</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.113</span> ms<span class="token number">64</span> bytes from tomcat01.mynet <span class="token punctuation">(</span><span class="token number">192.168</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.087</span> ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优缺点</strong></p><blockquote><p>不同的集群使用不同的网络，保证集群是安全的</p></blockquote><blockquote><p>如果 redis 是一个集群，mysql 是一个集群，那么两个集群之间是有壁障的（网段不同），我们接下来就要取解决网络连通的问题</p></blockquote><p><img src="https://s1.ax1x.com/2020/09/08/wQHQnf.png" alt="网关不同"></p><h3 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># docker0 下有一个docker_tomcat01</span><span class="token comment"># mynet 下有两个 tomcat01和tomcat02</span><span class="token comment"># 测试打通docker_tomcat01和mynet</span>docker network connect mynet docker_tomcat01<span class="token comment"># 查看mynet的详细信息</span><span class="token punctuation">[</span>root@iZitgsup0vfxnqZ ~<span class="token punctuation">]</span><span class="token comment"># docker network inspect mynet</span><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"mynet"</span>,        <span class="token string">"Id"</span><span class="token builtin class-name">:</span> <span class="token string">"0eb3d858e34963ff9442b4e3290e7954e6c6233bed364af57820472b8e02b295"</span>,        <span class="token string">"Created"</span><span class="token builtin class-name">:</span> <span class="token string">"2020-09-08T18:07:28.409882695+08:00"</span>,        <span class="token string">"Scope"</span><span class="token builtin class-name">:</span> <span class="token string">"local"</span>,        <span class="token string">"Driver"</span><span class="token builtin class-name">:</span> <span class="token string">"bridge"</span>,        <span class="token string">"EnableIPv6"</span><span class="token builtin class-name">:</span> false,        <span class="token string">"IPAM"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"Driver"</span><span class="token builtin class-name">:</span> <span class="token string">"default"</span>,            <span class="token string">"Options"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>,            <span class="token string">"Config"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token string">"Subnet"</span><span class="token builtin class-name">:</span> <span class="token string">"192.168.0.0/16"</span>,                    <span class="token string">"Gateway"</span><span class="token builtin class-name">:</span> <span class="token string">"192.168.0.1"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>,        <span class="token string">"Internal"</span><span class="token builtin class-name">:</span> false,        <span class="token string">"Attachable"</span><span class="token builtin class-name">:</span> false,        <span class="token string">"Ingress"</span><span class="token builtin class-name">:</span> false,        <span class="token string">"ConfigFrom"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"Network"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>        <span class="token punctuation">&#125;</span>,        <span class="token string">"ConfigOnly"</span><span class="token builtin class-name">:</span> false,        <span class="token string">"Containers"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"150349e401d9436d8828218d53d9005c02ad2b5909cf2ab892b3bc03b03a4872"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"tomcat01"</span>,                <span class="token string">"EndpointID"</span><span class="token builtin class-name">:</span> <span class="token string">"d1c9dd70443e27017e413a5be8babebc91cff460754e5e39e6a0b5a637f57ce1"</span>,                <span class="token string">"MacAddress"</span><span class="token builtin class-name">:</span> <span class="token string">"02:42:c0:a8:00:02"</span>,                <span class="token string">"IPv4Address"</span><span class="token builtin class-name">:</span> <span class="token string">"192.168.0.2/16"</span>,                <span class="token string">"IPv6Address"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>            <span class="token punctuation">&#125;</span>,            <span class="token comment">###### docker_tomcat01被加入到了容器中，可以进行网络通信了</span>            <span class="token string">"44eeb6cf00bafc1a8838d631531ebb543470286605ebf3bed1f858b98e1b9a3b"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"docker_tomcat01"</span>,                <span class="token string">"EndpointID"</span><span class="token builtin class-name">:</span> <span class="token string">"4fc2a9afad58cc9fdd015e1b1483adba92f3a34a4a1f94514fb1a5bddc9448b2"</span>,                <span class="token string">"MacAddress"</span><span class="token builtin class-name">:</span> <span class="token string">"02:42:c0:a8:00:04"</span>,                <span class="token string">"IPv4Address"</span><span class="token builtin class-name">:</span> <span class="token string">"192.168.0.4/16"</span>,                <span class="token string">"IPv6Address"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>            <span class="token punctuation">&#125;</span>,            <span class="token string">"ad65e04a7131dc40f430e53bdc6de96d1319f4ef177346b7701b64b7f864023a"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"tomcat02"</span>,                <span class="token string">"EndpointID"</span><span class="token builtin class-name">:</span> <span class="token string">"61621c213e50cc4746837acff797abc4b25886c93eab18bd5c27a2f985a4820f"</span>,                <span class="token string">"MacAddress"</span><span class="token builtin class-name">:</span> <span class="token string">"02:42:c0:a8:00:03"</span>,                <span class="token string">"IPv4Address"</span><span class="token builtin class-name">:</span> <span class="token string">"192.168.0.3/16"</span>,                <span class="token string">"IPv6Address"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>,        <span class="token string">"Options"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>,        <span class="token string">"Labels"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token comment">## 一个容器，两个ip地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dubbo遇到的问题</title>
      <link href="2020/08/10/dubbo-yu-dao-de-wen-ti/"/>
      <url>2020/08/10/dubbo-yu-dao-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>问题产生环境：  </p><ul><li>dubbo 2.7.6</li><li>springboot 2.2.6</li></ul><p><strong>问题</strong>：</p><blockquote><p>启用dubbo后, 没有配置dubbo.application.name,启动应用将会抛出异常.</p></blockquote><pre class="line-numbers language-log" data-language="log"><code class="language-log">java.lang.IllegalStateException: Invalid name&#x3D;&quot;org.apache.dubbo.config.ApplicationConfig#0&quot; contains illegal character, only digit, letter, &#39;-&#39;, &#39;_&#39; or &#39;.&#39; is legal.at org.apache.dubbo.config.utils.ConfigValidationUtils.checkProperty(ConfigValidationUtils.java:588) ~[dubbo-2.7.6.jar:2.7.6]at org.apache.dubbo.config.utils.ConfigValidationUtils.checkName(ConfigValidationUtils.java:546) ~[dubbo-2.7.6.jar:2.7.6]at org.apache.dubbo.config.utils.ConfigValidationUtils.validateApplicationConfig(ConfigValidationUtils.java:386) ~[dubbo-2.7.6.jar:2.7.6]at org.apache.dubbo.config.bootstrap.DubboBootstrap.checkGlobalConfigs(DubboBootstrap.java:526) ~[dubbo-2.7.6.jar:2.7.6]at org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize(DubboBootstrap.java:513) ~[dubbo-2.7.6.jar:2.7.6]at org.apache.dubbo.config.bootstrap.DubboBootstrap.start(DubboBootstrap.java:740) ~[dubbo-2.7.6.jar:2.7.6]at org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onContextRefreshedEvent(DubboBootstrapApplicationListener.java:59) ~[dubbo-2.7.6.jar:2.7.6]at org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener.onApplicationContextEvent(DubboBootstrapApplicationListener.java:52) ~[dubbo-2.7.6.jar:2.7.6]at org.apache.dubbo.config.spring.context.OneTimeExecutionApplicationContextEventListener.onApplicationEvent(OneTimeExecutionApplicationContextEventListener.java:40) ~[dubbo-2.7.6.jar:2.7.6]at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) ~[spring-context-5.2.5.RELEASE.jar:5.2.5.RELEASE]at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) ~[spring-context-5.2.5.RELEASE.jar:5.2.5.RELEASE]at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) ~[spring-context-5.2.5.RELEASE.jar:5.2.5.RELEASE]at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:403) ~[spring-context-5.2.5.RELEASE.jar:5.2.5.RELEASE]at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:360) ~[spring-context-5.2.5.RELEASE.jar:5.2.5.RELEASE]at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:897) ~[spring-context-5.2.5.RELEASE.jar:5.2.5.RELEASE]at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553) ~[spring-context-5.2.5.RELEASE.jar:5.2.5.RELEASE]at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.6.RELEASE.jar:2.2.6.RELEASE]at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.6.RELEASE.jar:2.2.6.RELEASE]at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.6.RELEASE.jar:2.2.6.RELEASE]at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.6.RELEASE.jar:2.2.6.RELEASE]at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.6.RELEASE.jar:2.2.6.RELEASE]at com.bjsxt.provider.ProviderApplication.main(ProviderApplication.java:17) [classes&#x2F;:na]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解决方法</strong>：</p><blockquote><p>配置dubbo的时候没有配置dubbo.application.name，配置上即可</p></blockquote><p><img src="https://s1.ax1x.com/2020/08/10/aHGKiR.png" alt="配置文件"></p><blockquote><p>也有人说可以给protocol配置上一个id，如果没有id的话会自动用spring的，就会出现#0的情况，但我试了不行</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表_模拟ArrayList的实现</title>
      <link href="2020/08/08/xian-xing-biao-mo-ni-arraylist-de-shi-xian/"/>
      <url>2020/08/08/xian-xing-biao-mo-ni-arraylist-de-shi-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>线性表属于最基本、最简单、也是最常用的一种数据结构，从逻辑上划分它属于线性结构。一个线性表是由 n 个具有相同特性的数据元素组成的有限序列，数据元素之间具有一种线性的或“一对一”的逻辑关系，如下图所示：<br><img src="https://s1.ax1x.com/2020/08/08/aINGkR.png" alt="线性表"></p><p>从严谨的角度上来讲，线性表应该满足以下三个要求：</p><ol><li>第一个数据元素没有直接前驱，这个数据元素被称为开始节点；</li><li>最后一个数据元素没有直接后继，这个数据元素被称为终端节点；</li><li>除了第一个和最后一个数据元素外，其它数据元素有且仅有一个直接前驱和一个直接后继。</li></ol><h2 id="线性表的特点"><a href="#线性表的特点" class="headerlink" title="线性表的特点"></a>线性表的特点</h2><ol><li><strong>顺序性</strong><br>在线性表中，相邻数据元素之间存在着序偶关系，也就是存在着先后关系。</li><li><strong>相同数据类型</strong><br>在线性表中，每一个数据元素都属于相同数据类型。相同数据类型意味着在内存中存储时，每<br>个元素会占用相同的内存空间，便于后续的查询定位。</li><li><strong>有限性</strong><br>在线性表中，数据元素的个数 n 就是为线性表的长度，n 是一个有限值。当 n=0 时线性表为空<br>表。在非空的线性表中每个数据元素在线性表中都有唯一确定的序号，例如第一个元素的序号是 0，<br>第 i 个元素的序号为 i-1。在一个具有 n &gt; 0 个数据元素的线性表中，数据元素序号的范围是[0, n-1]。</li></ol><h2 id="线性表的存储结构"><a href="#线性表的存储结构" class="headerlink" title="线性表的存储结构"></a>线性表的存储结构</h2><ol><li><p>顺序存储结构 (<strong>顺序表</strong>)</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">顺序表是采用一组地址连续的存储单元来依次存放线性表中的各个元素。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s1.ax1x.com/2020/08/08/aIUP9x.png" alt="顺序表"></p></li><li><p>链式存储结构 (<strong>链表</strong>)</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">链表中的存储元素的地址不一定是连续的，元素节点中存放数据元素以及相邻元素的地址信息<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s1.ax1x.com/2020/08/08/aIUEuD.png" alt="链表"></p></li></ol><h1 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h1><h2 id="顺序表的特点"><a href="#顺序表的特点" class="headerlink" title="顺序表的特点"></a>顺序表的特点</h2><ul><li><p><strong>顺序表根据索引查询元素的特点</strong><br>因为顺序表（此处，也就是数组）的内存空间是连续的，并且存储的数据属于相同数据类型。因此，我们可以通过数组的“首地址+索引”就能快速的找到数组中对应索引的元素值，从而得出数组的优点：查找快。<br><img src="https://s1.ax1x.com/2020/08/08/aIUvxf.png" alt="顺序表"></p></li><li><p><strong>顺序表删除元素的特点</strong></p><ul><li>如果删除的是最后一位，直接设置成默认值</li><li>如果删除的是中间的某一位，从这一位开始往后的所有元素往前挪一位，最后一位设置为默认值<br><img src="https://img-blog.csdnimg.cn/20190919192451529.gif" alt="顺序表删除"></li></ul></li><li><p><strong>顺序表插入元素的特点</strong></p><ul><li>先检查数组是否需要扩容。如果数组的空间长度和数组添加元素个数相等，则需做<strong>扩容操作</strong><ul><li>定义一个空间长度更大的新数组</li><li>把原数组中的元素全部拷贝到新数组中</li><li>让原数组指向新数组，也就是让原数组保存新数组的地址值</li></ul></li><li>把<strong>插入索引及其之后的元素</strong>往后挪动一位(<strong>从后往前挪动</strong>)</li><li>把插入的元素赋值到插入索引的位置中<br><img src="https://img-blog.csdnimg.cn/20190919191026970.gif" alt="顺序表插入"></li></ul></li></ul><h2 id="顺序表优劣势的总结"><a href="#顺序表优劣势的总结" class="headerlink" title="顺序表优劣势的总结"></a>顺序表优劣势的总结</h2><ul><li>优点：<br>无须关心表中元素之间的关系，所以不用增加额外的存储空间；<strong>可以根据索引快速地操作表中任意位置的元素</strong>，并且操作任何一个元素的<strong>耗时都是一样</strong>。</li><li>缺点：<br><strong>插入和删除操作需要移动大量元素</strong>。使用前需事先分配好内存空间，当线性表长度变化较大时，难以确定存储空间的容量。分配空间过大会造成存储空间的巨大浪费，分配的空间过小，难以适应问题的需求。</li></ul><h2 id="模拟-ArrayList-实现"><a href="#模拟-ArrayList-实现" class="headerlink" title="模拟 ArrayList 实现"></a>模拟 ArrayList 实现</h2><p><strong>需求</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 需要实现以下几个方法* 1)添加元素的方法 --> add(Object element)* 2)根据索引获取元素的方法 --> get(int index)* 3)根据索引删除元素的方法 --> remove(int index)* 4)根据索引插入元素的方法 --> add(int index,Object element)*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>书写 ArrayList 类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 用来保存值     */</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span>    <span class="token comment">/**     * 集合的元素个数     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token comment">/**     * 获取数组中实际存放元素的个数     *     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token comment">/**     * 无参构造，默认设置数组的空间长度     */</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 指定设置数组的空间长度     *     * @param cap 需要设置的数组长度     */</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 判断cap是否合法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cap <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"参数不合法，cap:"</span> <span class="token operator">+</span> cap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 实例化数组</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>cap<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 添加元素     *     * @param element 元素     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Object</span> element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1.判断数组是否需要扩容</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2.把element添加进入数组中</span>        elementData<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token comment">// 3.更新size值</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 根据索引返回元素值     *     * @param index 索引值     * @return 索引对应的元素值     */</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 判断索引是否合法 范围是 0 &lt;---> size-1</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 根据索引返回对应的元素值</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 移除索引位置的元素     *     * @param index     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 判断元素的合法性</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//index ==>size的元素往前移 i 取不到size</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> elementData<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// size大小调整</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> index<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 检查索引的合法性，适用与get和remove     *     * @param index 索引位置     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rangeCheck</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">>=</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"索引越界，index = "</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 根据索引插入元素     *     * @param index   索引     * @param element 元素     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Object</span> element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 判断索引是否合法 [0,size] ==>插入元素可以添加到实际元素的最末尾</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"索引异常，index = "</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 判断数组是否需要扩容</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 插入索引及其以后的元素往后挪动一位 (倒着往后挪动)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> index<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            elementData<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// index对应的位置插入element</span>        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token comment">// size大小调整</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 判断数组是否需要执行扩容操作     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">.</span>length <span class="token operator">==</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 1当数组的空间长度与实际存放的元素个数相同时，需要扩容</span>            <span class="token comment">// 2创建一个比原数组空间长度更大的新数组</span>            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>elementData<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 3把原数组中的元素copy进入新数组</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                newArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 4让原数组保存新数组的地址值</span>            elementData <span class="token operator">=</span> newArr<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 线性表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线性表 </tag>
            
            <tag> ArrayList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-router传参的一些问题</title>
      <link href="2020/08/06/vue-router-chuan-can-de-yi-xie-wen-ti/"/>
      <url>2020/08/06/vue-router-chuan-can-de-yi-xie-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="query-方式传参和接收参数"><a href="#query-方式传参和接收参数" class="headerlink" title="query 方式传参和接收参数"></a>query 方式传参和接收参数</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 传参</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  path<span class="token operator">:</span> <span class="token string">'/xxx'</span><span class="token punctuation">,</span>  query<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    id<span class="token operator">:</span> id<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 接收参数:</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意！传参是<code>$router</code>,接收参数是<code>$route</code></strong></p><h1 id="route和-router-的区别"><a href="#route和-router-的区别" class="headerlink" title="$route和 $router 的区别"></a>$route和 $router 的区别</h1><p><img src="https://segmentfault.com/img/bVbbI7f?w=652&h=425"></p><ul><li><code>$router</code>为 VueRouter 实例，想要导航到不同 URL，则使用<code>$router.push</code>方法</li><li><code>$route</code>为当前 router 跳转对象，里面可以获取 name、path、query、params 等</li></ul><h1 id="params-方式传参和接收参数"><a href="#params-方式传参和接收参数" class="headerlink" title="params 方式传参和接收参数"></a>params 方式传参和接收参数</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 传参</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'xxx'</span><span class="token punctuation">,</span>  params<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    id<span class="token operator">:</span> id<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 接收参数</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意:params 传参，push 里面只能是 <code>name:&#39;xxxx&#39;</code>,不能是<code>path:&#39;/xxx&#39;</code>,因为 params 只能用 name 来引入路由，如果这里写成了 path，接收参数页面会是 undefined！</strong></p><blockquote><p>query 相当于 get 请求，而 params 相当于 post 请求</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql数据库导入SQL报错</title>
      <link href="2020/08/06/mysql-shu-ju-ku-dao-ru-sql-bao-cuo/"/>
      <url>2020/08/06/mysql-shu-ju-ku-dao-ru-sql-bao-cuo/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>mysql 导入 sql 文件的时候报错,1273- Unknown collation: utf8mb4_0900_ai_ci</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200624135840489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTM2NzUyMw==,size_16,color_FFFFFF,t_70" alt="1"></p><blockquote><p>原因是因为 MySQL 5.7 使用的默认为<code>utf8mb4_unicode_ci</code>，但是从 MySQL8.0 开始使用的已经改<code>utf8mb4_0900_ai_ci</code>了<br>所以当我们<strong>从 mysql8 往 mysql5 导入 sql 文件的时候会报错</strong><br>解决办法：<br>将所有的 <code>utf8mb4_0900_ai_ci</code> 替换为 <code>utf8mb4_unicode_ci</code> 即可以将 8.x 版本数据库排序改成 5.x 版本的<br>反过来也可以将 5.x 版本的排序规则改成 8.x</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo学习和实战</title>
      <link href="2020/08/01/dubbo-xue-xi-he-shi-zhan/"/>
      <url>2020/08/01/dubbo-xue-xi-he-shi-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="Dubbo-学习与实战"><a href="#Dubbo-学习与实战" class="headerlink" title="Dubbo 学习与实战"></a>Dubbo 学习与实战</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>Dubbo 是什么</strong><br><img src="https://s1.ax1x.com/2020/08/01/a3lwc9.png" alt="Duboo"></p><p>Dubbo 官网地址：<a href="http://dubbo.apache.org/zh-cn/">http://dubbo.apache.org/zh-cn/</a></p><blockquote><p>Dubbo 最早是 Alibaba 开源的分布式服务框架，它最大的特点是按照分层的方式来架构，使用这种方式可以使各个层之间解耦合（或者最大限度地松耦合）。从服务模型的角度来看， Dubbo 采用的是一种非常简单的模型，要么是提供方提供服务，要么是消费方消费服务，所以基于这一点可以抽象出服务提供方（Provider）和服务消费方（Consumer）两个角色。</p></blockquote><p><strong>发展历史</strong></p><ul><li>Dubbo 是最开始是阿里巴巴内部使用的 RPC 框架</li><li>2011 年对外提供</li><li>2012 年停止更新</li><li>2017 年开始继续更新</li><li>2019 年捐献给 Apache，由 Apache 维护 2.7 以上版本</li></ul><p><strong>Dubbo 能做什么</strong></p><ul><li>Dubbo 可实现透明化的远程方法调用，就像调用本地方法一样调用远程方法，只需简单配置即可，没有任何 API 侵入</li><li>软负载均衡及容错机制，可在内网替代 F5 等硬件负载均衡器，降低成本，减少单点</li><li>服务自动注册与发现，不再需要写死服务提供方地址，注册中心基于接口名查询服务提供者的 IP 地址，并且能够平滑添加或删除服务提供者</li></ul><p><strong>产生背景</strong><br><img src="https://s1.ax1x.com/2020/08/01/a31eD1.png" alt="架构发展历程"></p><ul><li><p>单一应用架构（单体架构）</p><blockquote><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM) 是关键。</p></blockquote></li><li><p>垂直应用架构</p><blockquote><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的 Web 框架(MVC) 是关键。</p></blockquote></li><li><p>分布式服务架构（RPC 架构）</p><blockquote><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。<br>此时，用于提高业务复用及整合的分布式服务框架(RPC) 是关键</p></blockquote></li><li><p>流动计算架构（SOA 架构）</p><blockquote><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。<br>此时，用于提高机器利用率的资源调度和治理中心(SOA) 是关键</p></blockquote></li></ul><h2 id="Dubbo-架构讲解"><a href="#Dubbo-架构讲解" class="headerlink" title="Dubbo 架构讲解"></a>Dubbo 架构讲解</h2><p><img src="https://dubbo.apache.org/img/architecture.png" alt="Dubbo官方架构图"></p><ul><li><p>线条</p><blockquote><p>虚线表示异步，实现表示同步。异步不阻塞线程性能高，同步阻塞线程必须等待响应结束才能继续执行，相对性较低</p></blockquote></li><li><p>Provider</p><blockquote><p>暴露服务的服务提供方</p></blockquote></li><li><p>Container</p><blockquote><p>服务运行容器，Dubbo 完全基于 Spring 实现</p></blockquote></li><li><p>Registry</p><blockquote><p>服务注册与发现的注册中心。注册中心，放置所有 Provider 对外提供的信息。包含 Provider 的 IP，访问端口，访问遵守的协议，对外提供的接口，接口中有哪些方法等相关信息</p></blockquote></li><li><p>Consumer</p><blockquote><p>调用远程服务的服务消费方。</p></blockquote></li><li><p>Monitor</p><blockquote><p>统计服务的调用次调和调用时间的监控中心。<br>监控中心，监控 Provider 的压力情况等。每隔 2 分钟 Consumer 和 Provider 会把调用次数发送给 Monitor，由 Monitor 进行统计。</p></blockquote></li></ul><p><strong>执行流程</strong></p><ol start="0"><li>start：启动 Spring 容器时会把 Provider 启动</li><li>register：把 Provider 相关信息注册到 Registry 里</li><li>subscribe：Consumer 从 Registry 中订阅 Provider 的信息</li><li>notify：通知给 Consumer</li><li>invoke：Consumer 根据 Registry 通知的信息进行调用 Provider 中方法。</li><li>count:Consumer 和 Provider 把调用次数信息异步发送给 Monitor 进行统计。</li></ol><h2 id="Dubbo-支持的协议"><a href="#Dubbo-支持的协议" class="headerlink" title="Dubbo 支持的协议"></a>Dubbo 支持的协议</h2><ol><li><p>Dubbo 协议(官方推荐协议)</p><ul><li><p>优点：采用 NIO 复用单一长连接，并使用线程池并发处理请求，减少握手和加大并发效率，性能较好（推荐使用）</p></li><li><p>缺点：大文件上传时,可能出现问题(不使用 Dubbo 文件上传)</p></li></ul></li><li><p>RMI(Remote Method Invocation)协议</p><ul><li>优点：jdk 自带的协议</li><li>缺点：偶尔连接失败</li></ul></li><li><p>Hessian 协议</p><ul><li>优点：可与原生 Hessian 互操作，基于 HTTP 协议</li><li>缺点：需 hessian.jar 支持，http 短连接的开销大</li></ul></li></ol><h2 id="Dubbo-支持的注册中心"><a href="#Dubbo-支持的注册中心" class="headerlink" title="Dubbo 支持的注册中心"></a>Dubbo 支持的注册中心</h2><ol><li>Zookeeper(官方推荐)<ul><li>优点：支持分布式.很多周边产品</li><li>缺点：受限于 Zookeeper 软件的稳定性。Zookeeper 是一款专门为分布式架构提供辅助型处理的软件，稳定较优</li></ul></li><li>Multicast<ul><li>优点：去中心化,不需要单独安装软件.</li><li>缺点：2.2.1 Provider 和 Consumer 和 Registry 不能跨机房(路由)</li></ul></li><li>Redis<ul><li>优点：支持集群,性能高</li><li>缺点：要求服务器时间同步.否则可能出现集群失败问题</li></ul></li><li>Simple<ul><li>优点：标准 RPC 服务.没有兼容问题</li><li>缺点：不支持集群</li></ul></li></ol><h2 id="Spring-整合-Dubbo"><a href="#Spring-整合-Dubbo" class="headerlink" title="Spring 整合 Dubbo"></a>Spring 整合 Dubbo</h2><blockquote><p><strong>这里采用 maven 聚合工程</strong>方便对依赖和项目进行管理，为了减少代码量，我们把 provider 方和 consumer 方公用的接口放在一个公共项目中，再分别引用。provider 是服务端，应该是个 jar 工程，consumer 是 web 端，应该是 war 工程。而父工程应该是 pom 类型</p></blockquote><p><img src="https://s1.ax1x.com/2020/08/01/a3BXnK.png" alt="项目结构"></p><ol><li><p>建立父工程</p><ul><li><p>导入依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.bjsxt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>provider<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>consumer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">></span></span>5.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dubbo.version</span><span class="token punctuation">></span></span>2.7.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dubbo.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>curator.version</span><span class="token punctuation">></span></span>4.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>curator.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>registry-zookeeper.version</span><span class="token punctuation">></span></span>2.7.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>registry-zookeeper.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet.version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jsp.version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jsp.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jstl.version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jstl.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--Spring Context Dependence--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--Spring MVC Dependence--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--Apache Dubbo Dependence--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;dubbo.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--Registry Zookeeper Dependence--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-registry-zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;registry-zookeeper.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--Apache Curator Dependence--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.curator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>curator-framework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;curator.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--Servlet Dependence--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;servlet.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--JSP Dependence--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;jsp.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--JSTL Dependence--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp.jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;jstl.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--Tomcat Plugin--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>创建 common 工程<br><img src="https://s1.ax1x.com/2020/08/01/a3D3uV.png" alt="common"></p><ul><li>创建 provider 要暴露的接口，并写入测试案例<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DemoDubboService</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**  *  测试  * @param str 字符串  * @return String  */</span>  <span class="token class-name">String</span> <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>创建 provider 工程<br><img src="https://s1.ax1x.com/2020/08/01/a35cOe.png" alt="provider"></p><ul><li><p>创建项目，添加依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">     <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.bjsxt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>provider<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.bjsxt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--spring context--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--dubbo core--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--dubbo zookeeper registry--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-registry-zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--Apache Curator Dependence--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.curator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>curator-framework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加接口实现类(实现 common 工程里暴露的接口)</p><blockquote><p><strong>重点要注意的是这里用的@Service 是 Dubbo 的</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>bjsxt<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>bjsxt<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">DemoDubboService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token comment">/*** @author ZhangHaoyu* @description 实现common中的dubbo接口* @date 2020/7/31 21:53** @Service 是dubbo的注解 重点注意*/</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoDubboServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DemoDubboService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"hello Dubbo "</span><span class="token operator">+</span>str<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加 Dubbo 配置文件</p><blockquote><p>Dubbo 的配置文件必须放在<code>resources/META-INF/spring/*.xml</code>中</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>dubbo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://dubbo.apache.org/schema/dubbo<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans-4.3.xsdhttp://dubbo.apache.org/schema/dubbohttp://dubbo.apache.org/schema/dubbo/dubbo.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--provider名称--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>application</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myProvide<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--      配置注册中心      adress如果是集群需要的格式是：          ip:port,ip:prot,ip:prot    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>registry</span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>182.92.159.117:2181,182.92.159.117:2182,182.92.159.117:2183<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zookeeper<span class="token punctuation">"</span></span> <span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--配置服务协议 和注册端口--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>protocol</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dubbo<span class="token punctuation">"</span></span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20880<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--实例化接口实现类--></span><span class="token comment">&lt;!--    &lt;bean id="service" class="com.bjsxt.dubbo.service.impl.DemoDubboServiceImpl"/>--></span>    <span class="token comment">&lt;!--注册接口--></span><span class="token comment">&lt;!--    &lt;dubbo:service interface="com.bjsxt.dubbo.service.DemoDubboService" ref="service"/>--></span>    <span class="token comment">&lt;!--      扫描接口的位置指定@Service，不是Spring下的是Dubbo下的      放入spring容器中让spring接管      --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>annotation</span> <span class="token attr-name">package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjsxt.dubbo.service.impl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建 Dubbo 启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>bjsxt<span class="token punctuation">.</span>dubbo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>container<span class="token punctuation">.</span></span><span class="token class-name">Main</span><span class="token punctuation">;</span><span class="token comment">/*** @author ZhangHaoyu* @description Dubbo的启动类* @date 2020/7/31 22:33*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Start</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Main是Dubbo包下的</span>        <span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动可能会出现的问题：</p><ul><li>warn log4j xxx:</li></ul><blockquote><p>这个时候我们需要导入一个 log4j.properties 就能看到启动时候的日志输出</p></blockquote></li></ul><p><img src="https://s1.ax1x.com/2020/08/01/a3TUeg.png" alt="启动成功"></p></li></ol><ul><li><p>用 linux 观察节点下有什么东西</p><blockquote><p>程序启动后，provider 会去 Registry 注册节点</p></blockquote><p><img src="https://s1.ax1x.com/2020/08/01/a3TvtA.png" alt="注册成功"></p>   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">###注册信息：######</span>    <span class="token comment"># 解码前</span><span class="token punctuation">[</span>dubbo%3A%2F%2F192.168.111.1%3A20880%2Fcom.bjsxt.dubbo.service.DemoDubboService%3Fanyhost%3Dtrue%26application%3DmyProvide%26deprecated%3Dfalse%26dubbo%3D2.0.2%26dynamic%3Dtrue%26generic%3Dfalse%26interface%3Dcom.bjsxt.dubbo.service.DemoDubboService%26methods%3DshowMsg%26pid%3D19116%26release%3D2.7.6%26side%3Dprovider%26timestamp%3D1596258937758<span class="token punctuation">]</span>    <span class="token comment"># 解码后</span>   <span class="token punctuation">[</span>dubbo://192.168.111.1:20880/com.bjsxt.dubbo.service.DemoDubboService?anyhost<span class="token operator">=</span>true<span class="token operator">&amp;</span><span class="token assign-left variable">application</span><span class="token operator">=</span>myProvide<span class="token operator">&amp;</span><span class="token assign-left variable">deprecated</span><span class="token operator">=</span>false<span class="token operator">&amp;</span><span class="token assign-left variable">dubbo</span><span class="token operator">=</span><span class="token number">2.0</span>.2<span class="token operator">&amp;</span><span class="token assign-left variable">dynamic</span><span class="token operator">=</span>true<span class="token operator">&amp;</span><span class="token assign-left variable">generic</span><span class="token operator">=</span>false<span class="token operator">&amp;</span><span class="token assign-left variable">interface</span><span class="token operator">=</span>com.bjsxt.dubbo.service.DemoDubboService<span class="token operator">&amp;</span><span class="token assign-left variable">methods</span><span class="token operator">=</span>showMsg<span class="token operator">&amp;</span><span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token number">19116</span><span class="token operator">&amp;</span><span class="token assign-left variable">release</span><span class="token operator">=</span><span class="token number">2.7</span>.6<span class="token operator">&amp;</span><span class="token assign-left variable">side</span><span class="token operator">=</span>provider<span class="token operator">&amp;</span><span class="token assign-left variable">timestamp</span><span class="token operator">=</span><span class="token number">1596258937758</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="4"><li><p>创建 consumer 工程(是一个 war 工程)</p><p><img src="https://s1.ax1x.com/2020/08/01/a3j0z9.png" alt="consumer项目结构"></p><ul><li><p>创建项目添加依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.bjsxt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>consumer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.bjsxt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp.jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-registry-zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--Apache Curator Dependence--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.curator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>curator-framework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>8080<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写配置文件</p><blockquote><p><strong>applicationContext-service.xml</strong></p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans      http://www.springframework.org/schema/beans/spring-beans.xsd      http://www.springframework.org/schema/context      http://www.springframework.org/schema/context/spring-context.xsd      http://www.springframework.org/schema/aop      http://www.springframework.org/schema/aop/spring-aop.xsd      http://www.springframework.org/schema/util      http://www.springframework.org/schema/util/spring-util.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjsxt.service<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>spring-dubbo.xml</strong></p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>dubbo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://dubbo.apache.org/schema/dubbo<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>dubbot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://dubbo.apache.org/schema/dubbo<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans-4.3.xsdhttp://dubbo.apache.org/schema/dubbohttp://dubbo.apache.org/schema/dubbo/dubbo.xsdhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置服务名称--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>application</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myConsumer<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--配置注册中心地址以及访问协议--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>registry</span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>182.92.159.117:2181,182.92.159.117:2182,182.92.159.117:2183<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zookeeper<span class="token punctuation">"</span></span> <span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--dubbo 扫描自己@Reference 注解  给用的接口写上--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>annotation</span> <span class="token attr-name">package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjsxt.service.impl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>springmvc.xml</strong></p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsdhttp://www.springframework.org/schema/aophttp://www.springframework.org/schema/aop/spring-aop.xsdhttp://www.springframework.org/schema/utilhttp://www.springframework.org/schema/util/spring-util.xsdhttp://www.springframework.org/schema/mvchttp://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token comment">&lt;!--注解扫描--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjsxt.web.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--springmvc注解扫描--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--视图解析器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>web.xml</strong></p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaeehttp://java.sun.com/xml/ns/javaee/web-app_3_0.xsd<span class="token punctuation">"</span></span>        <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:spring/applicationContext-*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:spring/springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--SpringMVC 中的编码过滤器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodeFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodeFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建业务层</p><blockquote><p>这里的业务层是自己写的</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DemoService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**    *  测试    * @param str 字符串    * @return String    */</span>    <span class="token class-name">String</span> <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>实现类:</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>bjsxt<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>bjsxt<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">DemoDubboService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>bjsxt<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">DemoService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Reference</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token comment">/*** @author ZhangHaoyu* @description Consumer的业务层 service要弄成spring里的* @date 2020/7/31 23:44*/</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DemoService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**    *  Reference是dubbo的注解，    *      扫描这个注解去Registery中找对应的信息    */</span>    <span class="token annotation punctuation">@Reference</span>    <span class="token keyword">private</span> <span class="token class-name">DemoDubboService</span> demoDubboService<span class="token punctuation">;</span>    <span class="token comment">/**    *  看似是调用了自己的方法，    *      实则通过@Reference注入到的对象生成了一个代理对象    *          执行的是另一个服务器的方法    * @param str 字符串    * @return String    */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> demoDubboService<span class="token punctuation">.</span><span class="token function">showMsg</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建 controller 层</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>bjsxt<span class="token punctuation">.</span>web<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>bjsxt<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">DemoService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token comment">/*** @author ZhangHaoyu* @description* @date 2020/7/31 23:59*/</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">DemoService</span> demoService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/getMsg"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> demoService<span class="token punctuation">.</span><span class="token function">showMsg</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动项目测试结果<br><img src="https://s1.ax1x.com/2020/08/01/a8S5h8.png" alt="启动项目"><br><img src="https://s1.ax1x.com/2020/08/01/a8S66H.png" alt="测试结果"></p></li></ul></li></ol><h2 id="springboot-整合-Dubbo"><a href="#springboot-整合-Dubbo" class="headerlink" title="springboot 整合 Dubbo"></a>springboot 整合 Dubbo</h2><ol><li>创建服务接口，添加接口<br><img src="https://s1.ax1x.com/2020/08/08/aIBvDK.png" alt="服务接口模块"></li><li>创建 provider 模块<br><img src="https://s1.ax1x.com/2020/08/08/aIDjRs.png" alt="提供者模块"></li></ol><blockquote><p>修改 pom 文件,添加依赖</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.bjsxt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springbootdubbo_api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo-spring-boot-starter --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--dubbo for zookeeper registry--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-registry-zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 去除logging包防止多个日志依赖冲突 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在配置文件中配置 Dubbo</p></blockquote><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">dubbo</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> myProvider <span class="token comment"># 指定服务的名称</span>  <span class="token key atrule">registry</span><span class="token punctuation">:</span>    <span class="token comment"># spring的配置方式在这里依旧适用</span>    <span class="token comment">#    address: 182.92.159.117:2181,182.92.159.117:2182,182.92.159.117:2183</span>    <span class="token comment">#    protocol: zookeeper</span>    <span class="token comment"># springboot的配置方式</span>    <span class="token key atrule">address</span><span class="token punctuation">:</span> zookeeper<span class="token punctuation">:</span>//182.92.159.117<span class="token punctuation">:</span>2181<span class="token punctuation">?</span>backup=182.92.159.117<span class="token punctuation">:</span><span class="token number">2182</span><span class="token punctuation">,</span>182.92.159.117<span class="token punctuation">:</span><span class="token number">2183</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">10000</span> <span class="token comment">#10s</span>  <span class="token key atrule">protocol</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> dubbo <span class="token comment"># 配置协议名称</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">20880</span> <span class="token comment"># 配置端口</span>  <span class="token key atrule">scan</span><span class="token punctuation">:</span>    <span class="token key atrule">base-packages</span><span class="token punctuation">:</span> com.bjsxt.springbootdubbo_provider.service.impl <span class="token comment">#配置扫描包的位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>书写实现类，提供给其他服务器使用</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author ZhangHaoyu * @description  provider的实现类，将来要放到注册中心上的 *                  2.7.7中用的是@DubboService @Service被弃用 * @date 2020/8/1 18:44 */</span><span class="token annotation punctuation">@DubboService</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoDubboServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DemoDubboService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"hello dubbo "</span><span class="token operator">+</span>str<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>启动 provider</p></blockquote><blockquote><p><strong>问题</strong>:<br>如果在项目中添加的是 spring-boot-starter-web 启动器，那么在启动 dubbo 后还会监听一个端口，因为在 web 启动器中内置了一个 Tomcat，Tomcat 的启动不会影响 dubbo 的运行，但是会多占用一个端口，未来在其他的 Provider 中还需要考虑端口分配的问题，避免端口抢占。</p></blockquote><blockquote><p><strong>解决</strong>:<br>可以使用 spring-boot-starter 起来启动 Dubbo，在该启动器中并未包含 Tomcat 所以并不会监听端口。</p></blockquote><ol><li><p>创建 consumer 模块<br> <img src="https://s1.ax1x.com/2020/08/09/ao4BcT.png" alt="ao4BcT.png"></p><blockquote><p><strong>consumer 应该是一个 web 项目</strong></p></blockquote></li></ol><blockquote><p>创建项目导入依赖</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.bjsxt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springbootdubbo_api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-registry-zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>书写业务层接口</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DemoService</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>书写业务层接口实现类</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*这里的service是spring自己的*/</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DemoService</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**    * Dubbo2.7.7以后改成了@DubboReference    * 之前版本中是@Reference    */</span>    <span class="token annotation punctuation">@DubboReference</span>    <span class="token keyword">private</span> <span class="token class-name">DemoDubboService</span> demoDubboService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> demoDubboService<span class="token punctuation">.</span><span class="token function">showMsg</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>配置 application.yml</p></blockquote><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">dubbo</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> myConsumer <span class="token comment">#服务名称</span>  <span class="token key atrule">registry</span><span class="token punctuation">:</span>    <span class="token key atrule">address</span><span class="token punctuation">:</span> zookeeper<span class="token punctuation">:</span>//182.92.159.117<span class="token punctuation">:</span>2181<span class="token punctuation">?</span>backup=182.92.159.117<span class="token punctuation">:</span><span class="token number">2182</span><span class="token punctuation">,</span>182.92.159.117<span class="token punctuation">:</span><span class="token number">2183</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">10000</span> <span class="token comment">#10s</span>  <span class="token key atrule">protocol</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> dubbo <span class="token comment">#配置协议名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>编写 controller</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">DemoService</span> demoService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getMsg"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> demoService<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>启动 consumer 模块</p></blockquote><p><img src="https://s1.ax1x.com/2020/08/09/aobmKx.png" alt="访问结果"></p><h2 id="Dubbo-监控与管理"><a href="#Dubbo-监控与管理" class="headerlink" title="Dubbo 监控与管理"></a>Dubbo 监控与管理</h2><blockquote><p>通过 Dubbo Monitor 来统计服务的调用次数和调用时间，服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心，监控中心则使用数据绘制图表来显示</p></blockquote><p><strong>修改 dubbo.properties</strong></p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">dubbo.container</span><span class="token punctuation">=</span><span class="token attr-value">log4j,spring,registry,jetty</span><span class="token attr-name">dubbo.application.name</span><span class="token punctuation">=</span><span class="token attr-value">simple-monitor</span><span class="token attr-name">dubbo.application.owner</span><span class="token punctuation">=</span><span class="token comment">#dubbo.registry.address=multicast://224.5.6.7:1234</span><span class="token comment"># zookeeper的注册中心，需要写入zookeeper的地址，如果是集群都要写入</span><span class="token attr-name">dubbo.registry.address</span><span class="token punctuation">=</span><span class="token attr-value">zookeeper://182.92.159.117:2181?backup=182.92.159.117:2182,182.92.159.117:2183</span><span class="token comment">#dubbo.registry.address=redis://127.0.0.1:6379</span><span class="token comment">#dubbo.registry.address=dubbo://127.0.0.1:9090</span><span class="token attr-name">dubbo.protocol.port</span><span class="token punctuation">=</span><span class="token attr-value">7070</span><span class="token comment"># 注册中心服务监听端口</span><span class="token attr-name">dubbo.jetty.port</span><span class="token punctuation">=</span><span class="token attr-value">7777</span><span class="token attr-name">dubbo.jetty.directory</span><span class="token punctuation">=</span><span class="token attr-value">$&#123;user.home&#125;/monitor</span><span class="token attr-name">dubbo.charts.directory</span><span class="token punctuation">=</span><span class="token attr-value">$&#123;dubbo.jetty.directory&#125;/charts</span><span class="token attr-name">dubbo.statistics.directory</span><span class="token punctuation">=</span><span class="token attr-value">$&#123;user.home&#125;/monitor/statistics</span><span class="token attr-name">dubbo.log4j.file</span><span class="token punctuation">=</span><span class="token attr-value">logs/dubbo-monitor-simple.log</span><span class="token attr-name">dubbo.log4j.level</span><span class="token punctuation">=</span><span class="token attr-value">WARN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>启动 Dubbo Monitor</strong><br><img src="https://s1.ax1x.com/2020/08/09/aT9NVA.png" alt="启动"><br>一个是 Windows 的一个是 Linux 的</p><p><img src="https://s1.ax1x.com/2020/08/09/aT9R5q.png" alt="启动成功"></p><p>访问端口 ip:(dubbo.jetty.prot) 我的是 localhost:7777<br><img src="https://s1.ax1x.com/2020/08/09/aT942T.png" alt="访问成功"></p><blockquote><p>通过 Dubbo-Admin<br>主要包含：路由规则、动态配置、服务降级、访问控制、权重调整、负载均衡等管理功能。</p></blockquote><p><img src="https://s1.ax1x.com/2020/08/09/aTiiCt.png" alt="application.properties"></p><p><strong>修改 application.properites</strong></p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 注册地址</span><span class="token attr-name">admin.registry.address</span><span class="token punctuation">=</span><span class="token attr-value">zookeeper://182.92.159.117:2181?backup=182.92.159.117:2182,182.92.159.117:2183</span><span class="token comment"># 配置中心</span><span class="token attr-name">admin.config-center</span><span class="token punctuation">=</span><span class="token attr-value">zookeeper://182.92.159.117:2181?backup=182.92.159.117:2182,182.92.159.117:2183</span><span class="token comment"># 元数据报表</span><span class="token attr-name">admin.metadata-report.address</span><span class="token punctuation">=</span><span class="token attr-value">zookeeper://182.92.159.117:2181?backup=182.92.159.117:2182,182.92.159.117:2183</span><span class="token comment"># dubbo-admin的监听端口</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">9999</span><span class="token comment"># 以下不需要修改</span><span class="token attr-name">admin.registry.group</span><span class="token punctuation">=</span><span class="token attr-value">dubbo</span><span class="token attr-name">admin.apollo.token</span><span class="token punctuation">=</span><span class="token attr-value">e16e5cd903fd0c97a116c873b448544b9d086de9</span><span class="token attr-name">admin.apollo.appId</span><span class="token punctuation">=</span><span class="token attr-value">test</span><span class="token attr-name">admin.apollo.env</span><span class="token punctuation">=</span><span class="token attr-value">dev</span><span class="token attr-name">admin.apollo.cluster</span><span class="token punctuation">=</span><span class="token attr-value">default</span><span class="token attr-name">admin.apollo.namespace</span><span class="token punctuation">=</span><span class="token attr-value">dubbo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>启动 Dubbo-Admin</strong><br><code>java -jar dubbo-admin-server.jar</code></p><p><a href="https://imgchr.com/i/aTiDxK"><img src="https://s1.ax1x.com/2020/08/09/aTiDxK.png" alt="启动项目"></a></p><p><strong>访问端口</strong><br><img src="https://s1.ax1x.com/2020/08/09/aTiLIs.png" alt="访问端口"></p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><blockquote><p>负载均衡（Load Balance），是指将负载（工作任务，访问请求）进行平衡、分摊到多个操作单元（服务器，组件）上进行执行。</p></blockquote><p><img src="https://s1.ax1x.com/2020/08/10/ab2Zb4.png" alt="典型的一个例子"></p><blockquote><p>这一种古老的方式，通过入口提供不同线路、不同服务器链接的方式，来实现负载均衡，一般在提供下载业务的网站比较常见。</p></blockquote><h3 id="负载均衡解决方案分类及特征"><a href="#负载均衡解决方案分类及特征" class="headerlink" title="负载均衡解决方案分类及特征"></a>负载均衡解决方案分类及特征</h3><p><strong>集中式负载均衡</strong></p><blockquote><p>即在客户端和服务端之间使用独立的负载均衡设施(可以是硬件，如 F5, 也可以是软件，如 nginx), 由该设施负责<strong>把访问请求通过某种策略转发至服务端</strong></p></blockquote><p><strong>常见的集中式负载均衡方式</strong></p><ul><li><p>DNS 轮询</p><blockquote><p>大多域名注册商都支持 DNS 轮询，DNS 服务器将解析请求按照配置顺序，逐一分配到不同的 IP 上，这样就完成了简单的负载均衡</p></blockquote></li><li><p>反向代理负载均衡<br><img src="https://s1.ax1x.com/2020/08/10/abRW0e.png" alt="反向代理"></p><blockquote><p>使用代理服务器，可以将请求转发给内部的服务器。Nginx 是比较常见的服务反向代理技术。在 Nginx 中是支持对代理的服务的负载均衡处理的。</p></blockquote></li><li><p>基于硬件的负载均衡<br><img src="https://s1.ax1x.com/2020/08/10/abhypn.png" alt="硬件负载均衡器"></p><blockquote><p>硬件负载均衡解决方案是直接在服务器和外部网络间安装负载均衡设备，这种设备我们通常称之为负载均衡器，由于专门的设备完成专门的任务，独立于操作系统，整体性能得到大量提高，加上多样化的负载均衡策略，智能化的流量管理，可达到最佳的负载均衡需求。</p></blockquote></li><li><p>进程内负载均衡<br><img src="https://s1.ax1x.com/2020/08/10/abhRmT.png" alt="进程内负载均衡"></p><blockquote><p>将负载均衡逻辑集成到服务组件中，服务组件从服务注册中心获知有哪些地址可用，然后根据指定的负载均衡策略选择出一个合适的服务来调用。</p></blockquote></li></ul><h3 id="Dubbo-的内置负载均衡策略"><a href="#Dubbo-的内置负载均衡策略" class="headerlink" title="Dubbo 的内置负载均衡策略"></a>Dubbo 的内置负载均衡策略</h3><ul><li><p>Random</p><blockquote><p>随机访问集群中节点。访问概率和权重有关。是 Dubbo 的默认负载均衡策略<br>权重（weight）：占有比例。集群中每个项目部署的服务器的性能可能是不同，性能好的服务器权重应该高一些。</p></blockquote></li><li><p>RoundRobin</p><blockquote><p>轮询。访问频率和权重有关。</p></blockquote></li><li><p>LeastActive</p><blockquote><p>最少活跃调用数，相同活跃数的随机。<br>如果某个机器性能越差，那么接收的请求越少，越不活跃，此时就会给不活跃的性能差的机器分配更少的请求。</p></blockquote></li><li><p>ConsistentHash</p><blockquote><p>一致性 Hash 算法，相同参数的请求一定分发到同一个 Provider 如果需要某一类请求都到一个节点，那么可以使用一致性 Hash 策略。</p></blockquote></li></ul><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">Dubbo 的负载均衡可以在 Consumer 或者 Provider中通过配置文件或者注解来配置<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="在-Consumer-中配置负载均衡"><a href="#在-Consumer-中配置负载均衡" class="headerlink" title="在 Consumer 中配置负载均衡"></a>在 Consumer 中配置负载均衡</h3><p>前提：有一个集群或者伪集群<br>$\color{red}{在 Dubbo 中，如果没有指定负载均衡策略，那么 Dubbo 默认的使用随机策略调用<br>Provider。}$</p><p><a href="http://dubbo.apache.org/zh-cn/blog/dubbo-loadbalance.html">dubbo 负载均衡官方文档</a></p><ul><li><p><strong>通过注解配置负载均衡</strong></p><ul><li>指定负载均衡策略<ul><li><code>@Reference(loadbalance =&quot;负载均衡策略&quot;)</code></li><li>修改<code>@Refrence</code> 注解添加 loadbalance 属性指定负载均衡策略</li></ul></li><li>通过 Provider 的<code>@Service</code>注解配置权重<ul><li><code>@Service(weight = 权重数)</code></li></ul></li></ul></li><li><p><strong>通过配置文件配置配置负载均衡</strong></p><ul><li>注解配置方式：局部，只针对当前业务层生效</li><li>配置文件方式：全局，对所有业务层生效</li></ul><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">dubbo</span><span class="token punctuation">:</span>  <span class="token key atrule">consumer</span><span class="token punctuation">:</span>  <span class="token key atrule">loadbalance</span><span class="token punctuation">:</span> random<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="在-Provider-中配置负载均衡"><a href="#在-Provider-中配置负载均衡" class="headerlink" title="在 Provider 中配置负载均衡"></a>在 Provider 中配置负载均衡</h3></li><li><p>在 Dubbo 的<code>@Service</code> 注解中配置负载均衡以及权重</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>loadbalance <span class="token operator">=</span> <span class="token string">"roundrobin"</span><span class="token punctuation">,</span>weight<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>通过配置文件配置负载均衡</p></li><li><pre><code class="yml">dubbo:  provider:  loadbalance: aoundrobin</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper学习</title>
      <link href="2020/07/27/zookeeper-xue-xi/"/>
      <url>2020/07/27/zookeeper-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Zookeeper-学习与实战"><a href="#Zookeeper-学习与实战" class="headerlink" title="Zookeeper 学习与实战"></a>Zookeeper 学习与实战</h1><p>前置知识：</p><ul><li>掌握 Linux 操作系统的使用</li><li>掌握 Maven、SpringBoot 的使用</li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>Zookeeper 官网：<a href="http://zookeeper.apache.org/">http://zookeeper.apache.org/</a></p></blockquote><blockquote><p>Zookeeper 是 Apache 的一个分布式服务框架，是 Apache Hadoop 的一个子项目。官方文档上这么解释 Zookeeper，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。</p></blockquote><blockquote><p>简单来说 zookeeper=文件系统+监听通知机制。</p></blockquote><h2 id="Zookeeper-存储结构"><a href="#Zookeeper-存储结构" class="headerlink" title="Zookeeper 存储结构"></a>Zookeeper 存储结构</h2><p><img src="https://s1.ax1x.com/2020/07/30/aK7mUx.png" alt="aK7mUx.png"></p><ol><li>Znode<blockquote><p>在 Zookeeper 中，znode 是一个跟 Unix 文件系统路径相似的节点，可以向节点存储数据或者获取数据。<br>Zookeeper 底层是一套数据结构。这个存储结构是一个树形结构，其上的每一个节点，我们称之为“znode”<br>Zookeeper 中的数据是按照“树”结构进行存储的。而且 znode 节点还分为 4 中不同的类型。<br>每一个 znode 默认能够存储 1MB 的数据（对于记录状态性质的数据来说，够了）<br>可以使用 zkCli 命令，登录到 Zookeeper 上，并通过 ls、create、delete、get、set 等命令操作这些 znode 节点。</p></blockquote></li><li>Znode 节点类型<ul><li><code>persistent</code> 持久化目录节点<ul><li>客户端与 zookeeper 断开连接后，该节点依旧存在。</li></ul></li><li><code>persistent_sequential</code> 持久化顺序编号目录节点<ul><li>客户端与 zookeeper 断开连接后，该节点依旧存在，只是 Zookeeper 给该节点名称进行顺序编号</li></ul></li><li><code>ephemeral</code> 临时目录节点<ul><li>客户端与 zookeeper 断开连接后，该节点被删除。</li></ul></li><li><code>ephemeral_sequential</code> 临时顺序编号目录节点<ul><li>客户端与 zookeeper 断开连接后，该节点被删除，只是 Zookeeper 给该节点名称进行顺序编号。</li></ul></li></ul></li></ol><h2 id="监听通知机制"><a href="#监听通知机制" class="headerlink" title="监听通知机制"></a>监听通知机制</h2><blockquote><p>Zookeeper 是使用观察者设计模式来设计的。当客户端注册监听它关心的目录节点时，当目录节点发生变化（数据改变、被删除、子目录节点增加删除）时，Zookeeper 会通知客户端。</p></blockquote><h2 id="安装-zookeeper-流程"><a href="#安装-zookeeper-流程" class="headerlink" title="安装 zookeeper 流程"></a>安装 zookeeper 流程</h2><h3 id="单机版-zookeeper"><a href="#单机版-zookeeper" class="headerlink" title="单机版 zookeeper"></a>单机版 zookeeper</h3><p>前置条件：<strong>Linux 操作系统，并且安装有 JDK</strong></p><ul><li><p>上传 Zookeeper 到 linux 系统<br><img src="https://s1.ax1x.com/2020/07/30/aKzT1I.png" alt="aKzT1I.png"></p></li><li><p>解压 Zookeeper 压缩包,并把 copy 到<code>/usr/local/下</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf zookeeper-3.6.0.tar.gz<span class="token function">cp</span> zookeeper-3.6.0 /usr/local/zookeeper -r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Zookeeper 目录结构：</p><p><img src="https://s1.ax1x.com/2020/07/30/aMEGUx.png" alt="目录结构"></p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">1. bin：放置运行脚本和工具脚本，2. conf：zookeeper 默认读取配置的目录，里面会有默认的配置文件3. docs：zookeeper 相关的文档4. lib：zookeeper 核心的 jar5. logs：zookeeper 日志<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置 Zookeeper</p><blockquote><p><strong>Zookeeper 在启动时默认的去 conf 目录下查找个名称为 zoo.cfg 的配置文件</strong><br>conf 目录下有一个 zoo_simple.cfg 的文件，我们只需要把他 copy 一份，改名为 zoo.cfg 即可。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> zoo_sample.cfg zoo.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>修改 zoo.cfg 的配置</strong></p><ul><li><p>设置缓存路径<br><img src="https://s1.ax1x.com/2020/07/30/aMZunJ.png" alt="zoo.cfg"></p><p>dataDir 设置数据缓存路径<br>可以在根目录下创建一个 data 目录，用于存放数据缓存</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>启动 Zookeeper</p><ul><li><code>./zkServer.sh start</code> <strong>默认的会去 conf 目录下加载 zoo.cfg 配置文件</strong></li><li><code>./zkServer.sh start</code> <strong>配置文件的路径</strong></li></ul></li><li><p>停止 Zookeeper</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./zkServer.sh stop <span class="token comment">#停止当前zookeeper</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看 Zookeeper 状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./zkServer.sh status <span class="token comment"># 查看zookeeper状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用客户端连接单机版 Zookeeper</p><ul><li><code>bin/zkCli.sh</code> 默认连接本地地址，默认端口 2181</li><li><code>bin/zkCli.sh -server ip:port</code> 连接指定 IP 地址与端口</li></ul></li></ul><h3 id="zookeeper-集群安装与脚本"><a href="#zookeeper-集群安装与脚本" class="headerlink" title="zookeeper 集群安装与脚本"></a>zookeeper 集群安装与脚本</h3><ol><li>Zookeeper 集群说明</li></ol><ul><li>zookeeper 集群中的角色<blockquote><p>Zookeeper 集群中的角色主要有以下三类:<br><img src="https://s1.ax1x.com/2020/07/30/aMlGOf.png" alt="zookeeper集群角色"></p></blockquote></li></ul><ol start="2"><li>集群安装</li></ol><blockquote><p>为了方便演示，我们用 3 个 zookeeper 搭建一个伪集群，应用部署地址是你的本机，客户端监听的端口分别是 2181、2182、2183 ，投票选举端口分别为 2881/3881、2882/3882、2883/3883</p></blockquote><ul><li><p>在/usr/local 下创建一个目录<br><img src="https://s1.ax1x.com/2020/07/30/aM14Ug.png" alt="zookeeperCluster"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /usr/local/zookeeperCluster<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>把解压后的 zookeeper 目录分别 copy 到这个目录下，并改名</p><p><img src="https://s1.ax1x.com/2020/07/30/aM3NGj.png" alt="集群"><br>复制两份 Zookeeper 应用。用于模拟集群中的 3 个节点。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> -r zookeeper-3.6.0 /usr/local/zookeeperCluster/<span class="token function">mv</span> zookeeper-3.6.0 zookeeper01<span class="token function">cp</span> -r zookeeper01 zookeeper02<span class="token function">cp</span> -r zookeeper01 zookeeper03<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提供配置文件</p><ul><li>给每一个的 conf 目录下添加一个 zoo.cfg</li><li>在每一个的根目录下创建 data 目录用于存放缓存</li><li>修改 zoo.cfg 中的 dataDir 参数指向 data 目录</li></ul></li><li><p>提供唯一标识</p><ul><li><p>在 data 目录中创建文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">myid:touch myid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>为应用提供唯一标识。本环境中使用 1、2、3 作为每个节点的唯一标识。<br><img src="https://s1.ax1x.com/2020/07/30/aM8t0K.png" alt="唯一标识"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token punctuation">[</span>唯一标识<span class="token punctuation">]</span> <span class="token operator">>></span> myid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>修改配置文件<code>zoo.cfg</code> 设置监听客户端、投票、选举端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">clientPort</span><span class="token operator">=</span><span class="token number">2181</span> <span class="token comment">#服务端口根据应用做对应修改,zk01-2181,zk02-2182,zk03-2183</span>server.1<span class="token operator">=</span><span class="token number">192.168</span>.233.130:2881:3881server.2<span class="token operator">=</span><span class="token number">192.168</span>.233.130:2882:3882server.3<span class="token operator">=</span><span class="token number">192.168</span>.233.130:2883:3883<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s1.ax1x.com/2020/07/30/aM8ONF.png" alt="举例"></p></li><li><p>编写启动、关闭集群脚本<br><img src="https://s1.ax1x.com/2020/07/30/aMGBUU.png" alt="编写脚本"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在zookeeperCluster下创建一个文件</span><span class="token function">touch</span> shutdownAll.sh<span class="token comment"># 使用 chmod 命令为文件授权</span><span class="token function">chmod</span> <span class="token number">777</span> <span class="token punctuation">[</span>文件名<span class="token punctuation">]</span> <span class="token comment"># 777 表示为文件分配可读，可写，可执行权限。</span><span class="token comment"># 编写</span>zookeeper01/bin/zkServer.sh stopzookeeper02/bin/zkServer.sh stopzookeeper03/bin/zkServer.sh stop<span class="token comment"># 同理创建startAll.sh，并授权</span><span class="token function">touch</span> startAll.sh<span class="token function">chmod</span> <span class="token number">777</span> <span class="token punctuation">[</span>文件名<span class="token punctuation">]</span><span class="token comment"># 编写</span>zookeeper01/bin/zkServer.sh startzookeeper02/bin/zkServer.sh startzookeeper03/bin/zkServer.sh start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>连接集群<br><strong>可以使用任何节点中的客户端工具连接集群中的任何节点。</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./zkCli.sh -server <span class="token number">182.92</span>.159.117:2183<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Zookeeper-常用命令"><a href="#Zookeeper-常用命令" class="headerlink" title="Zookeeper 常用命令"></a>Zookeeper 常用命令</h2></li></ul><ol><li><p><code>ls</code></p><ul><li><code>ls /path</code></li><li>使用 ls 命令查看 zookeeper 中的内容。在 ZooKeeper 控制台客户端中，没有默认列表功能，必须指定要列表资源的位置。 如： <code>ls /</code> 或者 <code>ls /path</code></li></ul></li><li><p><code>create</code></p><blockquote><p>使用 create 命令创建一个新的 Znode。<code>create [-e] [-s] path data</code> 创建节点，如： <code>create /test 123</code> 创建一个/test 节点，节点携带数据信息 123。 <code>create -e /test 123</code> 创建一个临时节点/test，携带数据为 123，临时节点只在当前会话生命周期中有效，会话结束节点自动删除。<code>create -s /test 123</code> 创建一个顺序节点/test，携带数据 123，创建的顺序节点由 ZooKeeper 自动为节点增加后缀信息，如-/test00000001 等。-e 和-s 参数可以联合使用。</p></blockquote></li><li><p><code>get</code></p><ul><li><code>get [-s] /path</code></li><li>get 命令获取 Znode 中的数据。</li></ul></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>zk: <span class="token number">182.92</span>.159.117:2183<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">]</span> get -s /bjsxt <span class="token comment"># 执行语句，获取bjsxt节点的详细信息</span><span class="token number">123123123</span> <span class="token comment"># 存放的数据</span>cZxid <span class="token operator">=</span> 0x200000004 <span class="token comment">#创建时 zxid(znode 每次改变时递增的事务 id)</span>ctime <span class="token operator">=</span> Mon Jul <span class="token number">27</span> <span class="token number">20</span>:48:56 CST <span class="token number">2020</span> <span class="token comment">#创建时间戳</span>mZxid <span class="token operator">=</span> 0x200000009 <span class="token comment"># 最近一次更近的 zxid</span>mtime <span class="token operator">=</span> Mon Jul <span class="token number">27</span> <span class="token number">21</span>:14:54 CST <span class="token number">2020</span> <span class="token comment"># 最近一次更新的时间戳</span>pZxid <span class="token operator">=</span> 0x30000001c <span class="token comment"># 子节点的zxid</span>cversion <span class="token operator">=</span> <span class="token number">7</span> <span class="token comment"># 子节点更新次数</span>dataVersion <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment"># 节点数据更新次数</span>aclVersion <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># 节点 ACL(授权信息)的更新次数</span>ephemeralOwner <span class="token operator">=</span> 0x0 <span class="token comment"># :如果该节点为ephemeral 节点(临时，生命周期与 session 一样),</span>dataLength <span class="token operator">=</span> <span class="token number">9</span> <span class="token comment"># 节点数据字节数</span>numChildren <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment"># 子节点数量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p><code>set</code></p><ul><li><code>set /path [data]</code></li><li>添加或修改 Znode 中的值<br><img src="https://s1.ax1x.com/2020/07/31/aMJazd.png" alt="示例"></li></ul></li><li><p><code>delete</code></p><ul><li><code>delete /path</code></li><li>删除 Znode。</li></ul></li></ol><h2 id="Java-操作-Zookeeper"><a href="#Java-操作-Zookeeper" class="headerlink" title="Java 操作 Zookeeper"></a>Java 操作 Zookeeper</h2><p><strong>以 maven 项目为例</strong></p><ol><li><p>创建项目导入 zookeeper 依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>步骤</p><ul><li><p>新建类，实现 Wather，重写方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZnodeDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Watcher</span> <span class="token punctuation">&#123;</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">WatchedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 获取链接事件</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Event<span class="token punctuation">.</span>KeeperState<span class="token punctuation">.</span>SyncConnected</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建连接 Zookeeper 的对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @param connectString : 连接的端口，如果是集群需要都写上 * @param sessionTimeout : 设置超时时间 * @param watcher : 监视者对象，本例就用自己了*/</span><span class="token class-name">ZooKeeper</span> zooKeeper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span><span class="token string">"182.92.159.117:2181,182.92.159.117:2182,182.92.159.117:2183"</span><span class="token punctuation">,</span><span class="token number">1500000</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ZnodeDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建一个 Znode</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** @param path*                创建节点的路径* @param data*                节点要存放的数据* @param acl*                访问控制列表* @param createMode*                类型，是持久的还是短暂的，是否右zookeeper自动排序*/</span> <span class="token class-name">String</span> path <span class="token operator">=</span> zooKeeper<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"/bjsxt/test"</span><span class="token punctuation">,</span> <span class="token string">"zs"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ZooDefs<span class="token punctuation">.</span>Ids</span><span class="token punctuation">.</span>OPEN_ACL_UNSAFE<span class="token punctuation">,</span> <span class="token class-name">CreateMode</span><span class="token punctuation">.</span>EPHEMERAL_SEQUENTIAL<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回类型是个地址，我们输出一下</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取 Znode 中的数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取指定节点的值</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> zooKeeper<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ZnodeDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>获取所有字节中的数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> children <span class="token operator">=</span> zooKeeper<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ZnodeDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> zooKeeper<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">"/"</span> <span class="token operator">+</span> child<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ZnodeDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">KeeperException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置 Znode 中的值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//设置 Znode 中的值</span><span class="token class-name">Stat</span> stat <span class="token operator">=</span> zooKeeper<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"/bjsxt/test0000000001"</span><span class="token punctuation">,</span><span class="token string">"bjsxt"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stat<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>删除 Znode</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">zooKeeper<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"/bjsxt/test0000000001"</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="基于-RMI-实现远程方法调用"><a href="#基于-RMI-实现远程方法调用" class="headerlink" title="基于 RMI 实现远程方法调用"></a>基于 RMI 实现远程方法调用</h2></li></ul></li><li><p>RMI 介绍</p><blockquote><p>RMI(Remote Method Invocation) 远程方法调用<br>RMI 是 jdk1.2 推出的功能，它可以实现一个 Java 应用像调用本地项目方法一样调用另一个服务器 Java 应用中的方法<br><strong>RMI 是 Java 语言的远程调用，无法实现跨语言</strong></p></blockquote></li><li><p>执行流程<br><img src="https://s1.ax1x.com/2020/07/31/alW3v9.png" alt="RMI执行流程"></p><blockquote><p>Registry(注册表)是放置所有服务器对象的命名空间。 每次服务端创建一个对象时，它都会使用 bind()或 rebind()方法注册该对象。 这些是使用称为绑定名称的唯一名称注册的。<br>要调用远程对象，客户端需要该对象的引用。即通过服务端绑定的名称从注册表中获取对象(lookup()方法)。</p></blockquote></li><li><p>RMI 接口介绍</p></li></ol><ul><li><p>Remote 接口</p><blockquote><p><code>java.rmi.Remote</code> 定义了此接口为远程调用接口。如果接口被外部调用，需要继承此接口。</p></blockquote></li><li><p>RemoteException 类</p><blockquote><p><code>java.rmi.RemoteException</code> 继承了 Remote 接口的接口，如果方法是允许被远程调用的，需要抛出此异常。</p></blockquote></li><li><p>UnicastRemoteObject 类</p><blockquote><p><code>java.rmi.server.UnicastRemoteObject</code> 此类实现了 Remote 接口和 Serializable 接口。<strong>自定义接口实现类除了实现自定义接口还需要继承此类</strong>。</p></blockquote></li><li><p>LocateRegistry 类</p><blockquote><p><code>java.rmi.registry.LocateRegistry</code>可以通过 LocateRegistry 在本机上创建 Registry，通过特定的端口就可以访问这个 Registry。</p></blockquote></li><li><p>Naming 类</p><blockquote><p><code>java.rmi.Naming</code>Naming 定义了发布内容可访问 RMI 名称。也是通过 Naming 获取到指定的远程方法。</p></blockquote></li></ul><ol start="4"><li>代码实现</li></ol><ul><li><p>创建 Server 端</p><ul><li><p>创建接口<br><img src="https://s1.ax1x.com/2020/07/31/al7YtI.png" alt="service"></p><ul><li>要继承<code>Rempte</code>接口，并且该接口下的所有被远程调用的方法要抛出<code>RemoteException</code>异常</li></ul></li><li><p>实现接口<br><img src="https://s1.ax1x.com/2020/07/31/al7XjO.png" alt="实现类"></p><ul><li>实现 <code>Remote</code> 接口的同时必须继承 <code>UnicastRemoteObject</code> 类</li></ul></li><li><p>创建主方法<br><img src="https://s1.ax1x.com/2020/07/31/alHB26.png" alt="启动类"></p><ul><li>要先实例化对象，再创建本地注册表<code>LocateRegistry</code> 参数是监听本地的端口，看看有没有人去访问者 <code>Registry</code>。最后用 <code>Naming.bind</code> 把注册内容发布出去，可以供其他 RMI 访问</li></ul></li></ul></li><li><p>创建客户端</p><ul><li>复制服务端接口，同上</li><li>创建主方法<br><img src="https://s1.ax1x.com/2020/07/31/alblod.png" alt="alblod.png"><ul><li>主方法中用 Naming 的 lookup 方法访问那个地址，把获取到的对象强转就能调用该对象下的方法了</li></ul></li></ul></li></ul><h2 id="基于-Zookeeper-实现远程方法调用"><a href="#基于-Zookeeper-实现远程方法调用" class="headerlink" title="基于 Zookeeper 实现远程方法调用"></a>基于 Zookeeper 实现远程方法调用</h2><blockquote><p>道理跟 RMI 一样，方便了端口的寻找，服务端将暴露出来的端口信息放到 Zookeeper 的一个节点上，客户端去访问这些节点，获取到 path 后用 Naming 的 lookup 获取对应的对象，就能使用远程的方法了</p></blockquote><ol><li><p>创建服务端</p><ul><li><p>创建项目放入 zookeeper 依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建接口，步骤 RMI 一样</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UsersService</span> <span class="token keyword">extends</span> <span class="token class-name">Remote</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> <span class="token function">findUsers</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>创建实现类，步骤跟 RMI 的一样</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UsersServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">UnicastRemoteObject</span> <span class="token keyword">implements</span> <span class="token class-name">UsersService</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token class-name">UsersServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">&#123;</span>   <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">findUsers</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token string">"Hello Zookeeper "</span><span class="token operator">+</span>str<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>主方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Watcher</span> <span class="token punctuation">&#123;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span><span class="token class-name">AlreadyBoundException</span><span class="token punctuation">,</span> <span class="token class-name">KeeperException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// new出要暴露的对象</span>   <span class="token class-name">UsersService</span> usersService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsersServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 开启本地监听8888</span>   <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 设置url</span>   <span class="token class-name">String</span> url <span class="token operator">=</span><span class="token string">"rmi://localhost:8888/user"</span><span class="token punctuation">;</span>   <span class="token comment">// Naming 绑定他们</span>   <span class="token class-name">Naming</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>usersService<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 创建Zookeeper对象</span>   <span class="token class-name">ZooKeeper</span> zooKeeper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span><span class="token string">"182.92.159.117:2181,182.92.159.117:2182,182.92.159.117:2183"</span><span class="token punctuation">,</span><span class="token number">150000</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ServerDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 把url信息放入到zookeeper节点中</span>   zooKeeper<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"/bjsxt/service"</span><span class="token punctuation">,</span>url<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">ZooDefs<span class="token punctuation">.</span>Ids</span><span class="token punctuation">.</span>OPEN_ACL_UNSAFE<span class="token punctuation">,</span><span class="token class-name">CreateMode</span><span class="token punctuation">.</span>PERSISTENT<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 打印服务发布成功</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务发布成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>创建客户端</p><ul><li><p>创建项目放入 zookeeper 依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UsersService</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> <span class="token function">findUsers</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建主方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 要使用zookeeper，需要一个watcher监控，本例就用自己。 要重写process方法*/</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Watcher</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span><span class="token class-name">KeeperException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span><span class="token class-name">NotBoundException</span><span class="token punctuation">&#123;</span>     <span class="token comment">// 创建zookeeper对象</span>     <span class="token class-name">ZooKeeper</span> zooKeeper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span><span class="token string">"182.92.159.117:2181,182.92.159.117:2182,182.92.159.117:2183"</span><span class="token punctuation">,</span><span class="token number">150000</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ClientDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 从zookeeper上获取节点信息，是字节数组</span>     <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> zooKeeper<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">"/bjsxt/service"</span><span class="token punctuation">,</span><span class="token function">newClientDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 字节数组转换成字符串</span>     <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 通过Naming类的lookup方法获取到对象</span>     <span class="token class-name">UsersService</span> usersService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UsersService</span><span class="token punctuation">)</span><span class="token class-name">Naming</span><span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 调用远程的方法</span>     <span class="token class-name">String</span> result <span class="token operator">=</span> usersService<span class="token punctuation">.</span><span class="token function">findUsers</span><span class="token punctuation">(</span><span class="token string">"zhy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 输出结果</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">/*     实现Watcher接口要重写的方法     用于监听zookeeper是否连接成功，可以进一步操作   */</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">WatchedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Event<span class="token punctuation">.</span>KeeperState<span class="token punctuation">.</span>SyncConnected</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式技术 </tag>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis学习</title>
      <link href="2020/07/04/redis-xue-xi/"/>
      <url>2020/07/04/redis-xue-xi/</url>
      
        <content type="html"><![CDATA[<p><strong>写在前</strong>：学习笔记是结合尚学堂的课程和狂神的redis课程写的，狂神的视频地址：<a href="https://www.bilibili.com/video/BV1S54y1R7SB?p=1">https://www.bilibili.com/video/BV1S54y1R7SB?p=1</a></p><h1 id="redis学习"><a href="#redis学习" class="headerlink" title="redis学习"></a>redis学习</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><img src="https://s1.ax1x.com/2020/07/04/NxbaA1.png" alt="经典"><br>在以前一个基本的网站访问量不会太大，单个数据库完全足够了</p><p><img src="https://s1.ax1x.com/2020/07/04/NxqcxU.png" alt="缓存"><br>我们希望去减轻数据的压力，可以用缓存来保证效率</p><h2 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h2><h3 id="NoSQL概述"><a href="#NoSQL概述" class="headerlink" title="NoSQL概述"></a>NoSQL概述</h3><blockquote><p>NoSQL = not only sql<br>非关系型数据库<br>随着互联网web2.0网站的兴起，传统的关系数据库在处理web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，出现了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。Redis就是其中之一。</p></blockquote><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>方便拓展（数据之间没有关系，很好拓展）</li><li>大量数据高性能（Redis一秒写8w次，读取11w，性能高)</li><li>数据库类型是多样性的（不需要设计数据库，随取随用）</li><li>传统的RDBMS和NoSQL  <pre class="line-numbers language-none"><code class="language-none">传统的RDBMS- 结构化组织- SQL- 数据和关系都存在单独的表中- 操作数据定义语言- 严格的一致性- 基础的事务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <pre class="line-numbers language-none"><code class="language-none">NoSQL- 不仅仅是数据- 没有固定的查询语言- 键值对存储，列存储，文档存储，，，图像数据库，社交关系- 最终一致性- CAP定理和BASE（异地多活）- 高性能，高可用，高可扩<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3></li><li>KV键值对<ul><li>redis</li><li>tair</li><li>memecache</li></ul></li><li>文档型数据库（bson格式和json格式）<ul><li>mongoDB</li></ul></li><li>列存储数据库<ul><li>HBase</li><li>分布式文件系统</li></ul></li><li>图关系数据库<ul><li>Neo4j</li><li>InfoGrid</li></ul></li></ul><h2 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>介绍  </p></blockquote><p>Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><blockquote><p>用途</p></blockquote><ul><li>内存存储，持久化（rdb，aof）</li><li>效率高，可以用于高速缓存</li><li>发布订阅系统</li><li>地图信息分析</li><li>计时器，计数器，浏览量</li><li>……</li></ul><blockquote><p>特性</p></blockquote><ul><li>多样的数据类型</li><li>持久化</li><li>集群</li><li>事务</li><li>……<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3>官网下载好.tar.gz压缩包，放入~目录中  </li></ul><blockquote><p>解压.tar.gz  </p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s1.ax1x.com/2020/07/05/US6fpR.png" alt="解压"></p><blockquote><p>需要安装gcc  </p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y gcc-c++<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>编译 redis，进入解压完成的目录中  </p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入根目录执行</span><span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>安装 redis，在根目录中执行  </p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token function">install</span> <span class="token assign-left variable">PREFIX</span><span class="token operator">=</span>/usr/local/redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>还在这个根目录中，把redis.conf复制到/usr/local/redis/bin中  </p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> redis.conf /usr/local/redis/bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>修改redis.conf中的内容</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/redis/bin<span class="token function">vim</span> redis.conf<span class="token comment"># 1、修改</span><span class="token builtin class-name">bind</span> <span class="token number">127.0</span>.0.1 为bind <span class="token number">0.0</span>.0.0<span class="token comment"># 2、修改daemonize</span>daemonize no 改为 daemonize <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>去usr/local/redis/bin中后台启动redis  </p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./redis-server redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="测试性能"><a href="#测试性能" class="headerlink" title="测试性能"></a>测试性能</h3><p><strong>redis-benchmark</strong>是官方自带的测试性能的工具，在bin目录中<br><img src="https://s1.ax1x.com/2020/07/04/NzEA3D.png" alt="参数配置"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#测试100个并发连接，10w请求</span>redis-benchmark -h localhost -p <span class="token number">6379</span> -c <span class="token number">100</span> -n <span class="token number">100000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://s1.ax1x.com/2020/07/04/NzAvjJ.png" alt="测试图"></p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>redis默认有16个数据库（0-15），可以使用<code>select num</code>进行切换</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token keyword">select</span> <span class="token number">2</span> <span class="token comment">#切换数据库</span>OK<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token number">0</span>OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看数据库大小：<code>dbsize</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> dbsize <span class="token comment"># 查看数据库大小</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加键值对：<code>set key value</code>和<code>get key</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> name zhy <span class="token comment"># 添加值</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> dbsize<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get name <span class="token comment"># 获取值</span><span class="token string">"zhy"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看当前数据库下的所有键：<code>keys *</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> keys * <span class="token comment">#查看当前数据库下的所有键</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"mylist"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"counter:__rand_int__"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"key:__rand_int__"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>清空数据库：<code>flushdb</code>和<code>flushall</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> flushdb <span class="token comment">#清空当前数据库</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> flushall <span class="token comment"># 清空所有数据库</span>OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>Redis是单线程的</strong>  </p></blockquote><p>Redis是基于内存操作的，CPU不是Redis的瓶颈，而是机器内存和网络带宽。<br>Redis6.0以后好像有了多线程的功能</p><h3 id="Redis-Key"><a href="#Redis-Key" class="headerlink" title="Redis-Key"></a>Redis-Key</h3><blockquote><p>这些常用指令要熟记，在java中也是这些</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> keys * <span class="token comment">#查看当前数据库的所有key</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> exists name <span class="token comment">#判断当前key是否存在</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span> <span class="token comment">#存在时返回1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> exists qwe<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> move name <span class="token number">1</span> <span class="token comment">#移动当前key到其他数据库</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> keys *<span class="token punctuation">(</span>empty list or <span class="token builtin class-name">set</span><span class="token punctuation">)</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> name zhy <span class="token comment">#设置一个key value</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> age <span class="token number">20</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get name <span class="token comment">#获取key的value</span><span class="token string">"zhy"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> expire name <span class="token number">10</span> <span class="token comment">#设置有效时长，单位second</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ttl name <span class="token comment">#查看key的剩余时长</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ttl name <span class="token comment"># key过期后时长为-2</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -2<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get name<span class="token punctuation">(</span>nil<span class="token punctuation">)</span> <span class="token comment">#过期后获取不到了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果有不会的命令可以去<a href="http://www.redis.cn/commands.html">redis中文网</a>查看学习</p><h3 id="string类型"><a href="#string类型" class="headerlink" title="string类型"></a>string类型</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> key1 v1 <span class="token comment"># 设置值</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get key1 <span class="token comment"># 获得值</span><span class="token string">"v1"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> keys * <span class="token comment"># 获取所有的key</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"key1"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> exists key1 <span class="token comment"># 判断是否存在</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> append key1 hello <span class="token comment"># 追加字符串</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">7</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get key1 <span class="token string">"v1hello"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> append name zs <span class="token comment"># 如果当前key不存在，就会新建一个key</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> strlen key1 <span class="token comment"># 获取字符串长度</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">7</span><span class="token comment">###########################################################</span><span class="token comment">#自增和自减：incr/decr/incrby/decrby</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> views <span class="token number">0</span> <span class="token comment"># 初始浏览量为0</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get views<span class="token string">"0"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> incr views <span class="token comment"># 自增1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> incr views<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get views<span class="token string">"2"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> decr views <span class="token comment"># 自减1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> decr views<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get views<span class="token string">"0"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> incrby views <span class="token number">10</span> <span class="token comment"># 设置增长值</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">10</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> decrby views <span class="token number">5</span> <span class="token comment"># 设置自减值</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get views<span class="token string">"5"</span><span class="token comment">###########################################################</span><span class="token comment">#字符串范围：getrange key start end</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> key hello,redis <span class="token comment"># 设置key值</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get key<span class="token string">"hello,redis"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> getrange key <span class="token number">2</span> <span class="token number">6</span> <span class="token comment"># 截取字符串 [2,6]</span><span class="token string">"llo,r"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> getrange key <span class="token number">0</span> -1 <span class="token comment"># 直接返回全部字符串，有的python的味道</span><span class="token string">"hello,redis"</span><span class="token comment">#替换：setrange key start string</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> key2 abcdefg <span class="token comment"># 设置值</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get ket2<span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get key2<span class="token string">"abcdefg"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setrange key2 <span class="token number">1</span> xxx 替换指定位置开始的字符串<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">7</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get key2<span class="token string">"axxxefg"</span><span class="token comment"># del 删除</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get k2<span class="token string">"v2"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> del k2 <span class="token comment"># 删除指定的key</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get k2<span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token comment">###########################################################</span><span class="token comment"># setex (set with expire)  设置过期时间</span><span class="token comment"># setnx (set if not exist)  不存在设置，，常常用于分布式锁中</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setex key3 <span class="token number">30</span> hello <span class="token comment"># 设置key3的值30秒后过期</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ttl key3 <span class="token comment"># 查看key3剩余时间</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">20</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setnx mykey redis <span class="token comment">#如果mykey不存在，创建并设置</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setnx mykey mysql <span class="token comment"># 因为mykey存在了，所以不成功</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get mykey<span class="token string">"redis"</span><span class="token comment">###########################################################</span><span class="token comment">#mset</span><span class="token comment">#mget</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> mset k1 v1 k2 v2 k3 v3 <span class="token comment"># 同时设置多个值</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> keys *<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"k3"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"k1"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"k2"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> mget k1 k2 k3 <span class="token comment"># 同时获取多个值</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"v1"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"v2"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"v3"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> msetnx k1 v1 k4 v4 <span class="token comment"># msetnx是原子性操作，一起成功或一起失败</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> keys *<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"k3"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"k1"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"k2"</span><span class="token comment">###########################################################</span><span class="token comment"># 对象</span><span class="token builtin class-name">set</span> user:1 <span class="token punctuation">&#123;</span>name:zhangsan,age:3<span class="token punctuation">&#125;</span> <span class="token comment">#设置一个user:1对象值为json字符串保存</span><span class="token comment"># 这里的key是 user:&#123;id&#125;:&#123;field&#125;，在redis中完全ok</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> mset user:10001:name zhangsan user:10001:age <span class="token number">20</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> mget user:10001:name user:10001:age<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"zhangsan"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"20"</span><span class="token comment">###########################################################</span><span class="token comment">#getset  先get再set</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> getset db mysql <span class="token comment">#如果不存在值，则返回nil，并设置</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> getset db redis <span class="token comment">#如果存在，获取并设置新的值</span><span class="token string">"mysql"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get db<span class="token string">"redis"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用场景</p></blockquote><ul><li>计数器</li><li>统计多单位的数量</li></ul><h3 id="list类型"><a href="#list类型" class="headerlink" title="list类型"></a>list类型</h3><p>在redis中list可以被玩成栈，队列等等<br><img src="https://s1.ax1x.com/2020/07/04/NzwZY6.png" alt="双向链表"><br>所有list命令都是以<code>l</code>开头的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">###########################################################</span><span class="token comment"># lpush 左插入</span><span class="token comment"># rpush 右插入</span><span class="token comment"># lrange 根据区间取值</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpush list <span class="token number">1</span> <span class="token comment">#将一个值或者多个值，插入列表头部（左）</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpush list <span class="token number">2</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpush list <span class="token number">3</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange list <span class="token number">0</span> -1 <span class="token comment">#获取所有值</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"3"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"2"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"1"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange list <span class="token number">0</span> <span class="token number">1</span> <span class="token comment">#根据start和end获取值</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"3"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"2"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> rpush list right 将一个值或者多个值插入到列表尾部（右）<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange list <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"3"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"2"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"1"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"right"</span><span class="token comment">###########################################################</span><span class="token comment"># lpop  左移除第一个</span><span class="token comment"># rpop  右移除第一个</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange list <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"3"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"2"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"1"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"right"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpop list <span class="token comment"># 左移除第一个</span><span class="token string">"3"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> rpop list <span class="token comment"># 右移除第一个</span><span class="token string">"right"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange list <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"2"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1"</span><span class="token comment">###########################################################</span><span class="token comment"># lindex 通过下标获取值</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lindex list <span class="token number">1</span> <span class="token comment">#获取下标是1的值</span><span class="token string">"1"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lindex list <span class="token number">0</span><span class="token string">"2"</span><span class="token comment">###########################################################</span><span class="token comment"># llen 获取列表的长度</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> llen list<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token comment">###########################################################</span><span class="token comment"># lrem key num value  移除指定的值</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange list <span class="token number">0</span> -1 <span class="token comment">#获取所有的值</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"bbb"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"bbb"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"aaa"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"aaa"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"aaa"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrem list <span class="token number">1</span> aaa <span class="token comment"># 移除一个aaa，并且是第一个</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange list <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"bbb"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"bbb"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"aaa"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"aaa"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrem list <span class="token number">2</span> bbb <span class="token comment"># 移除两个bbb</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange list <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"aaa"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"aaa"</span><span class="token comment">###########################################################</span><span class="token comment"># ltrim key start end 截取，裁断，并储存在key中</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpush list hello<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpush list hello1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpush list hello2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpush list hello3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ltrim list <span class="token number">1</span> <span class="token number">2</span> <span class="token comment">#通过下标截取指定的元素，list里只剩下了截取的元素</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange list <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"hello2"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"hello1"</span><span class="token comment">###########################################################</span><span class="token comment">#rpoplpush  移除列表尾部的一个元素，并移动到一个新的列表中</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpush list hello<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpush list hello1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpush list hello2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get list2 <span class="token comment">#list2一开始不存在</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> rpoplpush list list2 <span class="token comment"># 移除尾部第一个，放到list2的头部，不存在就创建</span><span class="token string">"hello"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange list <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"hello2"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"hello1"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange list2 <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"hello"</span><span class="token comment">###########################################################</span><span class="token comment"># lset 一切基于存在的前提下操作，把下角标对应的值替换掉</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpush list a<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> LRANGE list <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"a"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> LSET list <span class="token number">0</span> bbbb <span class="token comment"># 把下标是0的值替换掉</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> LRANGE list <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"bbbb"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> LSET list <span class="token number">1</span> bbbb <span class="token comment"># 如果不存在就会报错</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR index out of range<span class="token comment">###########################################################</span><span class="token comment"># linsert key before/after value newValue  把某个值插入到某个元素的前面/后面</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange list <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"4"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"3"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"2"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"1"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> linsert list before <span class="token number">3</span> before <span class="token comment"># 在3的前面插入一个before</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> linsert list after <span class="token number">3</span> after <span class="token comment"># 在3的后面插入一个after</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange list <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"4"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"before"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"3"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"after"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"2"</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"1"</span><span class="token comment">###########################################################</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>小结  </p></blockquote><ul><li>List实际上是一个链表，双向链表，before node after,left,right 都可以插入值</li><li>如果key不存在就创建新的链表</li><li>如果key存在，新增内容</li><li>如果移除所有值，链表就不存在了</li><li>在两边插入和改动值效率高，在中间插入效率低</li></ul><blockquote><p>用途</p></blockquote><ul><li>消息队列，消息排队</li></ul><h3 id="set类型"><a href="#set类型" class="headerlink" title="set类型"></a>set类型</h3><p>set中的值是唯一的，无序的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">###########################################################</span><span class="token comment"># sadd key value 添加set值</span><span class="token comment"># smembers key  获取key中所有值</span><span class="token comment"># sismembers key value  判断value是不是key中的</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sadd myset hello <span class="token comment">#添加值</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sadd myset redis<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sadd myset world<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> smembers myset <span class="token comment">#查看所有值</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"hello"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"world"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"redis"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sismember myset hello <span class="token comment"># 判断是不是成员</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> sismember myset he<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token comment">###########################################################</span><span class="token comment"># scard key 获取key中的元素个数</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> scard myset <span class="token comment">#获取个数</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token comment">###########################################################</span><span class="token comment"># srem key value  移除元素</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> srem myset hello<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token comment">###########################################################</span><span class="token comment"># srandmember key [num=1] 随机取出指定个数的，默认1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> smembers <span class="token builtin class-name">set</span> <span class="token comment">#查看所有</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"2"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"3"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"4"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"5"</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"6"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> srandmember <span class="token builtin class-name">set</span> <span class="token comment">#随机取一个</span><span class="token string">"4"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> srandmember <span class="token builtin class-name">set</span><span class="token string">"1"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> srandmember <span class="token builtin class-name">set</span> <span class="token number">3</span> <span class="token comment"># 随机抽取指定个数的</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"6"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"4"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"5"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> srandmember <span class="token builtin class-name">set</span> <span class="token number">3</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"3"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"4"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"2"</span><span class="token comment">###########################################################</span><span class="token comment"># spop key  随机移除一个</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> smembers <span class="token builtin class-name">set</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"2"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"3"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"4"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"5"</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"6"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> spop <span class="token builtin class-name">set</span> <span class="token comment"># 随机移除一个</span><span class="token string">"5"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> spop <span class="token builtin class-name">set</span><span class="token string">"4"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> smembers <span class="token builtin class-name">set</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"2"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"3"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"6"</span><span class="token comment">###########################################################</span><span class="token comment"># smove key1 key2 value将一个指定的值移动到另外一个key中</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> smembers <span class="token builtin class-name">set</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"2"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"3"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> exists set3 <span class="token comment">#key3不存在</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> smove <span class="token builtin class-name">set</span> set3 <span class="token number">1</span> <span class="token comment">#将1从set移动到key3</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> exists set3 <span class="token comment"># 自动创建了key3</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> SMEMBERS <span class="token builtin class-name">set</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"2"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"3"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> SMEMBERS set3<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1"</span><span class="token comment">###########################################################</span><span class="token comment"># 交集 intersection</span><span class="token comment"># 差集 Difference</span><span class="token comment"># 并集 Union</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> SMEMBERS user1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"2"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"3"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> SMEMBERS user2<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"3"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"4"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"5"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> SDIFF user1 user2 <span class="token comment">#差集 user1中有的user2中没有</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"2"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> SDIFF user2 user1 <span class="token comment">#差集 user2中有的user1中没有</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"4"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"5"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> SINTER user1 user2 <span class="token comment">#交集</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"3"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> SUNION user1 user2 <span class="token comment">#并集</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"1"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"2"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"3"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"4"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"5"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以用于做共同关注的功能，把好友，关注都封装到一个set中，存入redis</p><h3 id="hash类型"><a href="#hash类型" class="headerlink" title="hash类型"></a>hash类型</h3><p>Map集合，key-map，这时候的值是一个map，本质与string类型没太大区别<br><strong>大key 小key field</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">###########################################################</span><span class="token comment"># hset map key value 添加值</span><span class="token comment"># hget map key 获取值</span><span class="token comment"># hmset map key1 value1 key2 value2 ... 添加多个值</span><span class="token comment"># hmget map key1 key2 ...  获取多个值</span><span class="token comment"># hmgetall 获取所有信息，一键一值出现</span><span class="token comment"># hdel map key 删除指定的key</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hset myhash username zhangsan <span class="token comment">#添加值</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hget myhash username <span class="token comment">#获取值</span><span class="token string">"zhangsan"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hmset myhash age <span class="token number">20</span> sex <span class="token number">0</span> <span class="token comment">#添加多个</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hmget myhash username age sex <span class="token comment">#获取多个</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"zhangsan"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"20"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"0"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hgetall myhash <span class="token comment">#获取所有信息，一键一值出现</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"username"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"zhangsan"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"age"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"20"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"sex"</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"0"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hdel myhash sex <span class="token comment">#删除指定的key</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hgetall myhash<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"username"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"zhangsan"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"age"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"20"</span><span class="token comment">###########################################################</span><span class="token comment"># hlen map  获取表的key数量</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hlen myhash<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token comment">###########################################################</span><span class="token comment"># hexists map key 判断key是否存在</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hexists myhash username<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token comment">###########################################################</span><span class="token comment"># hvals map 只获得所有的value</span><span class="token comment"># hkeys map 只获得所有的key</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hkeys myhash <span class="token comment">#获取所有key</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"username"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"age"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hvals myhash <span class="token comment">#获取所有value</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"zhangsan"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"20"</span><span class="token comment">###########################################################</span><span class="token comment"># hincr 自增 hincrby 指定自增</span><span class="token comment"># hdecr 自减 hincrby 指定自减</span><span class="token comment"># hsetnx 如果不存在创建，存在就不创建</span><span class="token comment"># ...可以去string类型里查找</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hsetnx myhash num <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hsetnx myhash num <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hincrby myhash num <span class="token number">5</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> hincrby myhash num -25<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -19<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>小结  </p></blockquote><p>hash适合存储经常变更的数据，比如用户对象，username,age什么的，<code>hset user:100001 username zhangsan age 20</code>，string更适合存储字符串</p><h3 id="zset类型"><a href="#zset类型" class="headerlink" title="zset类型"></a>zset类型</h3><p>在set的基础上增加了一个值，用于排序<br>格式是：<strong>key weight value</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">###########################################################</span><span class="token comment"># zadd key weight value key2 weight value2 添加</span><span class="token comment"># zRange key start end 遍历 从小到大</span><span class="token comment"># zRevRange key start end 从大到小</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zadd zset <span class="token number">1</span> one <span class="token comment"># 添加一个值</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zadd zset <span class="token number">1</span> two<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zadd zset <span class="token number">99</span> thr<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zadd zset <span class="token number">10</span> four <span class="token number">6</span> five <span class="token comment"># 添加多个值</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ZRANGE zset <span class="token number">0</span> -1 <span class="token comment"># 遍历所有，从小到大</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"one"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"two"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"five"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"four"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"thr"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zRevRange zset <span class="token number">0</span> -1 <span class="token comment"># 遍历从大到小</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"thr"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"four"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"five"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"two"</span><span class="token comment">###########################################################</span><span class="token comment"># zRangeByScore key min max [withScores]</span><span class="token comment"># -inf 无穷小 +inf 无穷大</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ZRANGEBYSCORE zset -inf +inf<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"one"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"two"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"five"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"four"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"thr"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ZRANGEBYSCORE zset -inf +inf withscores <span class="token comment">#附带权值</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"one"</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1"</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"two"</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"1"</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"five"</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"6"</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token string">"four"</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token string">"10"</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token string">"thr"</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token string">"99"</span><span class="token comment">###########################################################</span><span class="token comment"># zrem 移除key中的元素</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zrem zset one <span class="token comment"># 移除</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token comment">###########################################################</span><span class="token comment"># zcard 显示key有多少值</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zcard zset<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span><span class="token comment">###########################################################</span><span class="token comment"># zcount key start end 显示区间中的个数</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zcount zset <span class="token number">1</span> <span class="token number">50</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token comment">###########################################################</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结</p></blockquote><ul><li>存储班级成绩表，工资表</li><li>排行榜</li><li>普通消息，重要消息，带权重进行判断</li></ul><h3 id="geospatial-地理位置-类型"><a href="#geospatial-地理位置-类型" class="headerlink" title="geospatial(地理位置)类型"></a>geospatial(地理位置)类型</h3><blockquote><p>朋友圈定位，附近的人，打车距离计算</p></blockquote><h4 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h4><ul><li>geoAdd</li><li>geoDist</li><li>geoHash</li><li>geoPos</li><li>geoRadius</li><li>geoRadiusByMember<blockquote><p>geoAdd  </p></blockquote></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># geoadd key  经度 维度 名称</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> geoadd china:city <span class="token number">112.83</span> <span class="token number">36.83</span> wuxiang<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> geoadd china:city <span class="token number">116.46</span> <span class="token number">39.92</span> beijing <span class="token number">117.2</span> <span class="token number">39.13</span> tianjin<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>geoPos  </p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># getpos key name1 name2 name 3</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> geopos china:city beijing changzhi taiyuan <span class="token comment">#获取值</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"116.45999997854232788"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"39.9199990416181052"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"113.0799981951713562"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"36.18000022796537252"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"112.53000050783157349"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"37.87000021374301895"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>geodist 返回两个位置间的距离</p></blockquote><p>单位：</p><ul><li>m</li><li>km</li><li>mi 英里</li><li>ft 英尺<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> geodist china:city beijing taiyuan <span class="token comment"># 北京到太原的距离</span><span class="token string">"409485.2048"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>georadius 以给定的经度纬度为中心，，找出某一半径内的元素  </p></blockquote></li></ul><p>附近的人（获得所有附近的人的定位通过半径查询）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># georadius key 你的经度 你的维度 半径 单位 [withdist withcoord count 限定显示的数]</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> georadius china:city <span class="token number">112</span> <span class="token number">37</span> <span class="token number">10</span> km <span class="token comment"># 寻找半径10km</span><span class="token punctuation">(</span>empty array<span class="token punctuation">)</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> georadius china:city <span class="token number">112</span> <span class="token number">37</span> <span class="token number">120</span> km<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"wuxiang"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"taiyuan"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> georadius china:city <span class="token number">112</span> <span class="token number">37</span> <span class="token number">200</span> km<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"changzhi"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"wuxiang"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"taiyuan"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> georadius china:city <span class="token number">112</span> <span class="token number">37</span> <span class="token number">200</span> km withdist withcoord count <span class="token number">1</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"wuxiang"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"76.1938"</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"112.83000022172927856"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"36.82999905262392559"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>geohash 返回一个或多个位置的geohash表示</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># geohash key name1 name2 name3</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> geohash china:city changzhi taiyuan beijing <span class="token comment">#将二维的经纬度转换成字符串，字符串越长越精准，两个字符串越接近地理位置也就越接近</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"ww2mv4q7fb0"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"ww8p2wjbep0"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"wx4g455wfe0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="geo底层原理"><a href="#geo底层原理" class="headerlink" title="geo底层原理"></a>geo底层原理</h4><blockquote><p>geo底层的实现原理就算Zset！我们可以用Zset的命令来操作geo  </p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zrange china:city <span class="token number">0</span> -1 <span class="token comment"># 查看范围中的元素</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"changzhi"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"wuxiang"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"taiyuan"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"tianjin"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"beijing"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> zrem china:city tianjin <span class="token comment"># 移除一个元素</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Hyperloglog"><a href="#Hyperloglog" class="headerlink" title="Hyperloglog"></a>Hyperloglog</h3><blockquote><p>什么是基数？===》一个数据集内不重复的元素的个数</p></blockquote><p>统计网站的浏览量，一个id访问多次还是一次</p><p>Hyperloglog的优点：占用的内存是固定的，2^64不同的元素的技术只需要12KB的内存。而传统的方式用set保存用户的id来统计，占用的内存大，还有很大的误差</p><blockquote><p>测试使用</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># pfadd key value1 ...添加元素</span><span class="token comment"># pfcount key 获取数量</span><span class="token comment"># pfmerge newKey oldKey1 oldKey2 合并到newKey，去除重复</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> pfadd key a b c d e f g h i j <span class="token comment"># 创建第一组元素</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> pfcount key <span class="token comment">#统计第一组元素中的基数数量</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">10</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> pfadd key2 abc bca as se <span class="token comment">#创建第二组</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> pfcount key2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> pfmerge key3 key key2 <span class="token comment">#合并两组到key3中，是并集，没有重复的</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> pfcount key3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BitMaps"><a href="#BitMaps" class="headerlink" title="BitMaps"></a>BitMaps</h3><blockquote><p>按位存储  </p></blockquote><p>统计用户信息：活跃不活跃，登录未登录，打卡未打卡！两个状态的码，都可以用bitmaps</p><p>Bitmaps位图，数据结构，只有0，1两个状态。<br>比如存一个员工一年的打卡情况，需要365byte,1字节是8byte,则需要46左右byte就可以。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用bitmaps记录周一到周日的打卡</span><span class="token comment"># setbit key  num1 num2</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setbit sign <span class="token number">0</span> <span class="token number">1</span> 设置0的值<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setbit sign <span class="token number">1</span> <span class="token number">0</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setbit sign <span class="token number">2</span> <span class="token number">0</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setbit sign <span class="token number">3</span> <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setbit sign <span class="token number">4</span> <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setbit sign <span class="token number">5</span> <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setbit sign <span class="token number">6</span> <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token comment"># getbit key num1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> getbit sign <span class="token number">2</span> <span class="token comment">#获取2的值</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> getbit sign <span class="token number">4</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token comment"># bitcount key [start end]统计为1的天数</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> bitcount sign<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h3><p><strong>redis单条命令是保证原子性的，但事务不保证原子性</strong></p><p>redis事务：</p><ul><li>开启事务(multi)</li><li>命令入队(…)</li><li>执行事务(exec)</li></ul><p>锁：</p><ul><li>redis实现乐观锁</li></ul><blockquote><p>正常执行事务</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> multi <span class="token comment">#开启事务</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k1 v1 <span class="token comment">#命令入队</span>QUEUED<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k2 v2QUEUED<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get k2QUEUED<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k3 v3QUEUED<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">exec</span> <span class="token comment">#执行事务</span><span class="token number">1</span><span class="token punctuation">)</span> OK<span class="token number">2</span><span class="token punctuation">)</span> OK<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"v2"</span><span class="token number">4</span><span class="token punctuation">)</span> OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>discard 放弃事务 ，中间的都不执行</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> multi <span class="token comment">#开启事务</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k1 v1QUEUED<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k2 v2QUEUED<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> discard <span class="token comment">#放弃事务</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get k1<span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>编译时异常，所有事务都不会执行</p></blockquote><blockquote><p>运行时异常，正常的会执行</p></blockquote><ul><li><p>悲观锁</p><ul><li>悲观锁，正如其名，具有强烈的独占和排他特性。它指的是对数据被外界（包括本系统当前的其他事务，以及来自外部系统的事务处理）修改持保守态度，因此，在整个数据处理过程中，将数据处于锁定状态</li></ul></li><li><p>乐观锁</p><ul><li>乐观锁机制采取了更加宽松的加锁机制。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性。但随之而来的就是数据库 性能的大量开销，特别是对长事务而言，这样的开销往往无法承受。相对悲观锁而言，乐观锁更倾向于开发运用</li><li>获取version</li><li>更新的时候比较version</li></ul></li></ul><p><strong>用watch来加锁，本身就相当于乐观锁</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> money <span class="token number">10</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> post <span class="token number">0</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token function">watch</span> money <span class="token comment">#监视，加锁，如果是多线程操作的话，会提示失败</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> multi <span class="token comment">#开启事务</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> decrby money <span class="token number">3</span>QUEUED<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> incrby post <span class="token number">3</span>QUEUED<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">exec</span> <span class="token comment">#执行事务</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">7</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> UNWATCH <span class="token comment">#释放锁，停止监视</span>OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><blockquote><p>Jedis是官方推荐的java连接开发工具，使用java操作redis的中间件，如果要用java操作redis的话，我们一定要对Jedis非常熟悉</p></blockquote><ul><li><p>导入对应的依赖</p>  <pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--导入Jedis包--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--fastjson--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.60<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>连接测试</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// new Jedis对象</span>    <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"182.92.159.117"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// jedis所有命令都是学过的指令</span>    <span class="token comment">// 输出pong证明连接成功</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://s1.ax1x.com/2020/07/05/U9343Q.png" alt="redis连接成功"></p></li><li><p>常用api：就是我们上边的8个类型的语法指令</p></li></ul><h2 id="SpringBoot-整合"><a href="#SpringBoot-整合" class="headerlink" title="SpringBoot 整合"></a>SpringBoot 整合</h2><blockquote><p>在spring2.x之后，原来的Jedis变成了lettuce</p></blockquote><p>jedis：底层采用的直连，多个线程操作，不安全，如果要避免不安全的需要使用jedis pool连接池</p><p>lettuce：底层采用netty，实例可以在多个线程中共享，不存在线程不安全的情况，减少线程数量</p><p>redis自动配置类源码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span> <span class="token comment">// 代表我们可以自己写一个来替换他</span><span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">UnknownHostException</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// redis对象都需要序列化，默认的RedisTemplate没有过多的设置</span>       <span class="token comment">// 两个泛型都是object，需要强制转换</span><span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> template<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span>   <span class="token comment">// string类型是redis中最常使用的，单独提取出来的</span><span class="token keyword">public</span> <span class="token class-name">StringRedisTemplate</span> <span class="token function">stringRedisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">UnknownHostException</span> <span class="token punctuation">&#123;</span><span class="token class-name">StringRedisTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> template<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>修改配置文件</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 182.92.159.117    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试连接</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// opsForValue就是操作字符串，其他同理</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// redisTemplate 操作不同的数据类型，api和我们的指令是一样的</span>    <span class="token comment">// opsForValue 操作字符串 类似String</span>    <span class="token comment">// opsForList 操作List 类似List</span>    <span class="token comment">// opsForSet</span>    <span class="token comment">// opsForHash</span>    <span class="token comment">// opsForZSet</span>    <span class="token comment">// opsForGeo</span>    <span class="token comment">// opsForHyperLogLog</span>    <span class="token comment">// 除了进本的操作，我们常用的方法都可以直接通过redisTemplate操作，比如事务，和基本的CRUD</span>    <span class="token comment">// 获取redis的连接对象</span>    <span class="token comment">// RedisConnection connection =</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">getConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// connection.flushDb();</span>    <span class="token comment">// connection.flushAll();</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>新建配置类：原生的RedisTemplate功能太少，不能传入中文</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">UnknownHostException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>      // Json序列化配置      Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);      ObjectMapper om = new ObjectMapper();      om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);      om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);      jackson2JsonRedisSerializer.setObjectMapper(om);      // String 的序列化      StringRedisSerializer stringRedisSerializer = new              StringRedisSerializer();      // key采用String的序列化方式      template.setKeySerializer(stringRedisSerializer);      // hash的key也采用String的序列化方式      template.setHashKeySerializer(stringRedisSerializer);      // value序列化方式采用jackson      template.setValueSerializer(jackson2JsonRedisSerializer);      // hash的value序列化方式采用jackson      template.setHashValueSerializer(jackson2JsonRedisSerializer);      template.afterPropertiesSet();      return template;  &#125;</code></pre><p>  }</p>  <pre class="line-numbers language-none"><code class="language-none">- 封装RedisTemplate工具类参考网上## 进阶### Redis.conf详解&gt;单位![不区分大小写](https:&#x2F;&#x2F;s1.ax1x.com&#x2F;2020&#x2F;07&#x2F;06&#x2F;UCerrT.png)&gt;包含![像spring一样可以导入其他配置文件](https:&#x2F;&#x2F;s1.ax1x.com&#x2F;2020&#x2F;07&#x2F;06&#x2F;UCeWGR.png)&gt;网络&#96;&#96;&#96;bashbind 127.0.0.1 # 绑定的ipprotected-mode yes # 保护模式port 6379 # 端口设置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通用 GENERAL</p></blockquote></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">daemonize <span class="token function">yes</span> <span class="token comment"># 以守护进程的方式运行，默认是 no，我们需要自己开启为yes！</span>pidfile /var/run/redis_6379.pid <span class="token comment"># 如果以后台的方式运行，我们就需要指定一个 pid 文件！</span><span class="token comment"># 日志</span><span class="token comment"># Specify the server verbosity level.</span><span class="token comment"># This can be one of:</span><span class="token comment"># debug (a lot of information, useful for development/testing) 开发测试环境</span><span class="token comment"># verbose (many rarely useful info, but not a mess like the debug level)</span><span class="token comment"># notice (moderately verbose, what you want in production probably) 生产环境</span><span class="token comment"># warning (only very important / critical messages are logged)</span>loglevel noticelogfile <span class="token string">""</span> <span class="token comment"># 日志的文件位置名</span>databases <span class="token number">16</span> <span class="token comment"># 数据库的数量，默认是 16 个数据库</span>always-show-logo <span class="token function">yes</span> <span class="token comment"># 是否总是显示LOGO</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>快照  </p></blockquote><p>持久化， 在规定的时间内，执行了多少次操作，则会持久化到文件 .rdb. aof<br>redis 是内存数据库，如果没有持久化，那么数据断电及失！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果900s内，如果至少有一个1 key进行了修改，我们及进行持久化操作</span>save <span class="token number">900</span> <span class="token number">1</span><span class="token comment"># 如果300s内，如果至少10 key进行了修改，我们及进行持久化操作</span>save <span class="token number">300</span> <span class="token number">10</span><span class="token comment"># 如果60s内，如果至少10000 key进行了修改，我们及进行持久化操作</span>save <span class="token number">60</span> <span class="token number">10000</span><span class="token comment"># 我们之后学习持久化，会自己定义这个测试！</span>stop-writes-on-bgsave-error <span class="token function">yes</span> <span class="token comment"># 持久化如果出错，是否还需要继续工作！</span>rdbcompression <span class="token function">yes</span> <span class="token comment"># 是否压缩 rdb 文件，需要消耗一些cpu资源！</span>rdbchecksum <span class="token function">yes</span> <span class="token comment"># 保存rdb文件的时候，进行错误的检查校验！</span><span class="token function">dir</span> ./ <span class="token comment"># rdb 文件保存的目录！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>REPLICATION 复制，我们后面讲解主从复制的，时候再进行讲解</p></blockquote><blockquote><p>SECURITY</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token function">ping</span>PONG<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> config get requirepass <span class="token comment"># 获取redis的密码</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"requirepass"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">""</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> config <span class="token builtin class-name">set</span> requirepass <span class="token string">"123456"</span> <span class="token comment"># 设置redis的密码</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> config get requirepass <span class="token comment"># 发现所有的命令都没有权限了</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> NOAUTH Authentication required.<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token function">ping</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> NOAUTH Authentication required.<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> auth <span class="token number">123456</span> <span class="token comment"># 使用密码进行登录！</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> config get requirepass<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"requirepass"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"123456"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>修改完要记得重启redis</strong></p><blockquote><p>限制 CLIENTS</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">maxclients <span class="token number">10000</span> <span class="token comment"># 设置能连接上redis的最大客户端的数量</span>maxmemory <span class="token operator">&lt;</span>bytes<span class="token operator">></span> <span class="token comment"># redis 配置最大的内存容量</span>maxmemory-policy noeviction <span class="token comment"># 内存到达上限之后的处理策略</span><span class="token number">1</span>、volatile-lru：只对设置了过期时间的key进行LRU（默认值）<span class="token number">2</span>、allkeys-lru ： 删除lru算法的key<span class="token number">3</span>、volatile-random：随机删除即将过期key<span class="token number">4</span>、allkeys-random：随机删除<span class="token number">5</span>、volatile-ttl ： 删除即将过期的<span class="token number">6</span>、noeviction ： 永不过期，返回错误<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>APPEND ONLY 模式 aof配置</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">appendonly no <span class="token comment"># 默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分所有的情况下，</span>rdb完全够用！appendfilename <span class="token string">"appendonly.aof"</span> <span class="token comment"># 持久化的文件的名字</span><span class="token comment"># appendfsync always # 每次修改都会 sync。消耗性能</span>appendfsync everysec <span class="token comment"># 每秒执行一次 sync，可能会丢失这1s的数据！</span><span class="token comment"># appendfsync no # 不执行 sync，这个时候操作系统自己同步数据，速度最快！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h3><blockquote><p>Redis 是内存数据库，如果不将内存中的数据库状态保存到磁盘，那么一旦服务器进程退出，服务器中的数据库状态也会消失。所以 Redis 提供了持久化功能！</p></blockquote><h4 id="RDB-Redis-DataBase"><a href="#RDB-Redis-DataBase" class="headerlink" title="RDB(Redis DataBase)"></a>RDB(Redis DataBase)</h4><blockquote><p>在主从复制中，rdb就是备用了！从机上面！</p></blockquote><p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程<br>都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的。<br>这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那<br>RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。我们默认的就是<br>RDB，一般情况下不需要修改这个配置！</p><p><strong>rdb保存的文件是dump.rdb</strong> 都是在我们的配置文件中快照中进行配置的！</p><p><img src="https://s1.ax1x.com/2020/07/06/UC1oUf.png" alt="test"></p><blockquote><p>触发机制</p></blockquote><ol><li>save的规则满足的情况下，会自动触发rdb规则</li><li>执行 flushall 命令，也会触发我们的rdb规则！</li><li>退出redis，也会产生 rdb 文件！  </li></ol><p><strong>备份就自动生成一个 dump.rdb</strong></p><blockquote><p>恢复rdb文件</p></blockquote><ol><li>只需要将rdb文件放在我们redis启动目录就可以，redis启动的时候会自动检查dump.rdb 恢复其中的数据</li><li>查看需要存在的位置<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> config get <span class="token function">dir</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"dir"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"/usr/local/bin"</span> <span class="token comment"># 如果在这个目录下存在dump.rdb 文件，启动就会自动恢复其中的数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>优点：<ol><li>适合大规模的数据恢复</li><li>对数据的完整性要不高</li></ol></li><li>缺点：<ol><li>需要一定的时间间隔进程操作！如果redis意外宕机了，这个最后一次修改数据就没有的了！</li><li>fork进程的时候，会占用一定的内容空间</li></ol></li></ol><h4 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h4><blockquote><p>将我们的所有命令都记录下来，类似于history，恢复的时候就把这个文件全部在执行一遍！</p></blockquote><p>以日志的形式来记录每个写操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p><p><strong>Aof保存的是 appendonly.aof 文件</strong></p><p>默认是不开启的，我们需要手动进行配置！我们只需要将 appendonly 改为yes就开启了 aof，然后重启，redis 就可以生效了<br><img src="https://s1.ax1x.com/2020/07/06/UCURBQ.png" alt="开启aof"></p><p>如果aof文件有问题，redis就会报错，我们可以用自带的修复工具 redis-check-aof –fix</p><p><code>redis-check-aof --fix appendonly.aof</code>即可修复</p><p><img src="https://s1.ax1x.com/2020/07/06/UCUvNR.png" alt="check"></p><blockquote><p>重写规则说明</p></blockquote><p>如果aof文件大于64m，就会开辟一个新的进程把我们的文件进行重写<br><img src="https://s1.ax1x.com/2020/07/06/UCacP1.png" alt="重写规则"></p><blockquote><p>优缺点</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">appendonly no <span class="token comment"># 默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分所有的情况下，</span>rdb完全够用！appendfilename <span class="token string">"appendonly.aof"</span> <span class="token comment"># 持久化的文件的名字</span><span class="token comment"># appendfsync always # 每次修改都会 sync。消耗性能</span>appendfsync everysec <span class="token comment"># 每秒执行一次 sync，可能会丢失这1s的数据！</span><span class="token comment"># appendfsync no # 不执行 sync，这个时候操作系统自己同步数据，速度最快！</span><span class="token comment"># rewrite 重写，</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优点：<ul><li>每一次修改都同步，文件的完整会更加好</li><li>每秒同步一次，可能会丢失一秒的数据</li><li>从不同步，效率最高的</li></ul></li><li>缺点：<ul><li>相对于数据文件来说，aof远远大于 rdb，修复的速度也比 rdb慢</li><li>Aof 运行效率也要比 rdb 慢，所以我们redis默认的配置就是rdb持久化</li></ul></li></ul><p>扩展：</p><ol><li>RDB 持久化方式能够在指定的时间间隔内对你的数据进行快照存储</li><li>AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF命令以Redis 协议追加保存每次写的操作到文件末尾，Redis还能对AOF文件进行后台重写，使得AOF文件的体积不至于过大。</li><li><strong>只做缓存，如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化</strong></li><li>同时开启两种持久化方式<ol><li>在这种情况下，当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF<br>文件保存的数据集要比RDB文件保存的数据集要完整。</li><li>RDB 的数据不实时，同时使用两者时服务器重启也只会找AOF文件，那要不要只使用AOF呢？作者建议不要，因为RDB更适合用于备份数据库（AOF在不断变化不好备份），快速重启，而且不会有AOF可能潜在的Bug，留着作为一个万一的手段。</li></ol></li><li>性能建议<ol><li>因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留 save 900 1 这条规则。</li><li>如果Enable AOF ，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了，代价一是带来了持续的IO，二是AOF rewrite 的最后将 rewrite 过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上，默认超过原大小100%大小重写可以改到适当的数值。</li><li>如果不Enable AOF ，仅靠 Master-Slave Repllcation 实现高可用性也可以，能省掉一大笔IO，也减少了rewrite时带来的系统波动。代价是如果Master/Slave 同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个 Master/Slave 中的 RDB文件，载入较新的那个，微博就是这种架构。</li></ol></li></ol><h3 id="Redis-发布订阅"><a href="#Redis-发布订阅" class="headerlink" title="Redis 发布订阅"></a>Redis 发布订阅</h3><blockquote><p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。微信、微博、关注系统！</p></blockquote><p>Redis 客户端可以订阅任意数量的频道</p><p><img src="https://s1.ax1x.com/2020/07/06/UP8xJK.png" alt="流程图"></p><blockquote><p>这些命令被广泛用于构建即时通信应用，比如网络聊天室(chatroom)和实时广播、实时提醒等。</p></blockquote><table><thead><tr><th align="center">序号</th><th align="center">命令及描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><code>Psubscribe pattern [parrten2 ....]</code><br>订阅一个或多个符合给定模式的频道</td></tr><tr><td align="center">2</td><td align="center"><code>Pubsub &lt;subcommand&gt; [argument [argument ...]]</code><br>查看订阅与发布系统状态</td></tr><tr><td align="center">3</td><td align="center"><code>Publish channel message</code><br>将信息发送到指定的频道</td></tr><tr><td align="center">4</td><td align="center"><code>Punsubscribe [pattern [pattern ...]]</code><br>退订所有给定模式的频道</td></tr><tr><td align="center">5</td><td align="center"><code>Subscribe channel [channel ...]</code><br>订阅给定的一个或多个频道的信息</td></tr><tr><td align="center">6</td><td align="center"><code>Unsubscribe [channel [channel ...]]</code><br>指退订给定的频道</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> subscribe zhy <span class="token comment"># 订阅一个频道</span>Reading messages<span class="token punctuation">..</span>. <span class="token punctuation">(</span>press Ctrl-C to quit<span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"subscribe"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"zhy"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token comment"># 等待读取推送的信息</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span> <span class="token comment"># 消息</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"zhy"</span> <span class="token comment"># 推送频道</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"nihao"</span> <span class="token comment"># 具体内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> publish zhy nihao <span class="token comment"># 发布者发布消息到频道</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span> <span class="token comment"># 这个地方显示的是发送给了多少人</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> PUBLISH zhy <span class="token builtin class-name">test</span> <span class="token comment"># 一旦退订或者退出，这个消息就接收不到了</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用场景：</p></blockquote><ol><li>实时消息系统！</li><li>事实聊天！（频道当做聊天室，将信息回显给所有人即可！）</li><li>订阅，关注系统都是可以的！<br>稍微复杂的场景我们就会使用消息中间件</li></ol><h3 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master/leader)，后者称为从节点(slave/follower)；数据的复制是单向的，只能由主节点到从节点。Master以写为主，Slave 以读为主。</p><p>主从复制的作用主要包括：</p><ol><li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</li><li>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。</li><li>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</li><li>高可用（集群）基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础。</li></ol><p><img src="https://s1.ax1x.com/2020/07/06/UPBnN4.png" alt="一主三从"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># info replication 显示当前redis的主从信息</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> info replication<span class="token comment"># Replication</span>role:masterconnected_slaves:0master_replid:d49ac9bced0770f85ae058fd82de58d218ada58emaster_replid2:0000000000000000000000000000000000000000master_repl_offset:0second_repl_offset:-1repl_backlog_active:0repl_backlog_size:1048576repl_backlog_first_byte_offset:0repl_backlog_histlen:0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置需要修改的地方：</p><ol><li>端口</li><li>pid名字</li><li>log名字</li><li>dump.rdb名字</li></ol><p>修改完毕之后启动<br><img src="https://s1.ax1x.com/2020/07/06/UPyYQA.png" alt="看后台进程"></p><h4 id="一主二从"><a href="#一主二从" class="headerlink" title="一主二从"></a>一主二从</h4><p><strong>默认情况下，每台Redis服务器都是主节点</strong>； 我们一般情况下只用配置从机就好了！</p><p>语法:<code>slaveof host port</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:638<span class="token operator"><span class="token file-descriptor important">0</span>></span> SLAVEOF <span class="token number">127.0</span>.0.1 <span class="token number">6379</span> <span class="token comment"># SLAVEOF host 6379 绑定主机</span>OK<span class="token number">127.0</span>.0.1:638<span class="token operator"><span class="token file-descriptor important">0</span>></span> info replication <span class="token comment"># 查看信息</span><span class="token comment"># Replication</span>role:slave <span class="token comment"># 当前角色是从机</span>master_host:127.0.0.1 <span class="token comment"># 可以的看到主机的信息</span>master_port:6379<span class="token comment">###主机的视角</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> info replication<span class="token comment"># Replication</span>role:masterconnected_slaves:1 <span class="token comment"># 多了从机的配置</span>slave0:ip<span class="token operator">=</span><span class="token number">127.0</span>.0.1,port<span class="token operator">=</span><span class="token number">6380</span>,state<span class="token operator">=</span>online,offset<span class="token operator">=</span><span class="token number">42</span>,lag<span class="token operator">=</span><span class="token number">1</span> <span class="token comment"># 多了从机的配置</span>master_replid:a81be8dd257636b2d3e7a9f595e69d73ff03774emaster_replid2:0000000000000000000000000000000000000000master_repl_offset:42second_repl_offset:-1repl_backlog_active:1repl_backlog_size:1048576repl_backlog_first_byte_offset:1repl_backlog_histlen:42<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s1.ax1x.com/2020/07/06/UPcvxH.png" alt="主机信息"></p><p><strong>注意：</strong>命令配置是暂时的，要想永久性配置需要去修改配置文件！</p><blockquote><p><strong>主机设置值</strong></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> user zhangsanOK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>从机会自动同步主机写入的值</strong></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:638<span class="token operator"><span class="token file-descriptor important">0</span>></span> get user<span class="token string">"zhangsan"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>但是从机不可以写入</strong></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:638<span class="token operator"><span class="token file-descriptor important">1</span>></span> <span class="token builtin class-name">set</span> k2 <span class="token number">2</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> READONLY You can't <span class="token function">write</span> against a <span class="token builtin class-name">read</span> only replica.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>主机宕机后，从机依旧连接到主机执行读操作，但是没有写操作，如果主机恢复，，从机依旧可以直接获取到主机写的信息</strong></p></blockquote><blockquote><p><strong>如果是使用命令行，来配置的主从，这个时候如果重启了，就会变回主机！只要变为从机，立马就会从主机中获取值</strong></p></blockquote><blockquote><p>复制原理</p></blockquote><ul><li>Slave 启动成功连接到 master 后会发送一个sync同步命令</li><li>Master 接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，并完成一次完全同步。</li><li>全量复制：slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</li><li>增量复制：Master继续将新的所有收集到的修改命令依次传给slave，完成同步</li></ul><h3 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h3><blockquote><p>概述<br>主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑哨兵模式。Redis从2.8开始正式提供了Sentinel（哨兵） 架构来解决这个问题。</p></blockquote><p><img src="https://s1.ax1x.com/2020/07/06/UPbCct.png" alt="UPbCct.png"></p><p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主观的认<br>为主服务器不可用，这个现象成为<strong>主观下线</strong>。当后面的哨兵也检测到主服务器不可用，并且数量达到一<br>定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover <strong>故障转移</strong> 操作。<br>切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为客观下线。</p><ul><li>优点：<ul><li>哨兵集群，基于主从复制模式，所有的主从配置优点，它全有</li><li>主从可以切换，故障可以转移，系统的可用性就会更好</li><li>哨兵模式就是主从模式的升级，手动到自动，更加健壮</li></ul></li><li>缺点：<ul><li>Redis不好在线扩容，集群容量一旦到达上限，在线扩容就十分麻烦</li><li>实现哨兵模式的配置其实是很麻烦，里面有很多选择</li></ul></li></ul><blockquote><p>哨兵模式的全部配置</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Example sentinel.conf</span><span class="token comment"># 哨兵sentinel实例运行的端口 默认26379</span>port <span class="token number">26379</span><span class="token comment"># 哨兵sentinel的工作目录</span><span class="token function">dir</span> /tmp<span class="token comment"># 哨兵sentinel监控的redis主节点的 ip port</span><span class="token comment"># master-name 可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符".-_"组成。</span><span class="token comment"># quorum 配置多少个sentinel哨兵统一认为master主节点失联 那么这时客观上认为主节点失联了</span><span class="token comment"># sentinel monitor &lt;master-name> &lt;ip> &lt;redis-port> &lt;quorum></span>sentinel monitor mymaster <span class="token number">127.0</span>.0.1 <span class="token number">6379</span> <span class="token number">2</span><span class="token comment"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span><span class="token comment"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span><span class="token comment"># sentinel auth-pass &lt;master-name> &lt;password></span>sentinel auth-pass mymaster MySUPER--secret-0123passw0rd<span class="token comment"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒</span><span class="token comment"># sentinel down-after-milliseconds &lt;master-name> &lt;milliseconds></span>sentinel down-after-milliseconds mymaster <span class="token number">30000</span><span class="token comment"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，这个数字越小，完成failover所需的时间就越长，但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。</span><span class="token comment"># sentinel parallel-syncs &lt;master-name> &lt;numslaves></span>sentinel parallel-syncs mymaster <span class="token number">1</span><span class="token comment"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面：</span><span class="token comment">#1. 同一个sentinel对同一个master两次failover之间的间隔时间。</span><span class="token comment">#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。</span><span class="token comment">#3.当想要取消一个正在进行的failover所需要的时间。</span><span class="token comment">#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</span><span class="token comment"># 默认三分钟</span><span class="token comment"># sentinel failover-timeout &lt;master-name> &lt;milliseconds></span>sentinel failover-timeout mymaster <span class="token number">180000</span><span class="token comment"># SCRIPTS EXECUTION</span><span class="token comment">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。</span><span class="token comment">#对于脚本的运行结果有以下规则：</span><span class="token comment">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span><span class="token comment">#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span><span class="token comment">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span><span class="token comment">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span><span class="token comment">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，一个是事件的类型，一个是事件的描述。如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。</span><span class="token comment">#通知脚本</span><span class="token comment"># shell编程</span><span class="token comment"># sentinel notification-script &lt;master-name> &lt;script-path></span>sentinel notification-script mymaster /var/redis/notify.sh<span class="token comment"># 客户端重新配置主节点参数脚本</span><span class="token comment"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span><span class="token comment"># 以下参数将会在调用脚本时传给脚本:</span><span class="token comment"># &lt;master-name> &lt;role> &lt;state> &lt;from-ip> &lt;from-port> &lt;to-ip> &lt;to-port></span><span class="token comment"># 目前&lt;state>总是“failover”,</span><span class="token comment"># &lt;role>是“leader”或者“observer”中的一个。</span><span class="token comment"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的</span><span class="token comment"># 这个脚本应该是通用的，能被多次调用，不是针对性的。</span><span class="token comment"># sentinel client-reconfig-script &lt;master-name> &lt;script-path>sentinel client-reconfig-script mymaster /var/redis/reconfig.sh # 一般都是由运维来配置！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Redis缓存穿透和雪崩"><a href="#Redis缓存穿透和雪崩" class="headerlink" title="Redis缓存穿透和雪崩"></a>Redis缓存穿透和雪崩</h3><h4 id="缓存穿透（查不到）"><a href="#缓存穿透（查不到）" class="headerlink" title="缓存穿透（查不到）"></a>缓存穿透（查不到）</h4><blockquote><p>概念</p></blockquote><p>用户想要查询一个数据，发现redis内存数据库没有，也就是缓存没有命中，于是向持久层数据库查询。发现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中（秒杀！），于是都去请求了持久层数据库。这会给持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透。<br><img src="https://s1.ax1x.com/2020/07/06/UiMpjA.png" alt="正常执行过程"></p><blockquote><p>解决方案</p></blockquote><p><strong>布隆过滤器</strong><br>布隆过滤器是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的查询压力；</p><p><img src="https://s1.ax1x.com/2020/07/06/UiMJCF.png" alt="布隆过滤器"></p><p><strong>缓存空对象</strong>  </p><p>当存储层不命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护了后端数据源；<br><img src="https://s1.ax1x.com/2020/07/06/UiMBE6.png" alt="缓存空对象"></p><p>但是这种方法会存在两个问题：</p><ol><li>如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多的空值的键；</li><li>即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响（当你的数据库内有了值，但是缓存里依旧是null）</li></ol><h4 id="缓存击穿（量太大，缓存过期！）"><a href="#缓存击穿（量太大，缓存过期！）" class="headerlink" title="缓存击穿（量太大，缓存过期！）"></a>缓存击穿（量太大，缓存过期！）</h4><blockquote><p>概述</p></blockquote><p>当某个key在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，并且回写缓存，会导使数据库瞬间压力过大。</p><blockquote><p>解决方案</p></blockquote><p><strong>设置热点数据永不过期</strong><br>从缓存层面来看，没有设置过期时间，所以不会出现热点 key 过期后产生的问题</p><p><strong>加互斥锁</strong><br>分布式锁：使用分布式锁，保证对于每个key同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考验很大</p><p><img src="https://s1.ax1x.com/2020/07/06/UiQFM9.png" alt="加一个锁来控制"></p><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><blockquote><p>概念</p></blockquote><p>缓存雪崩，是指在某一个时间段，缓存集中过期失效，然后Redis宕机</p><p><img src="https://s1.ax1x.com/2020/07/06/UiQYIf.png" alt="缓存雪崩"></p><p>比如马上就要到双11零点，很快就会迎来一波抢购，这波商品时间比较集中的放入了缓存，假设缓存一个小时。那么到了凌晨一点钟的时候，这批商品的缓存就都过期了。而对这批商品的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。于是所有的请求都会达到存储层，存储层的调用量会暴增，造成存储层也会挂掉的情况。</p><blockquote><p>解决方案</p></blockquote><p><strong>redis高可用</strong><br>这个思想的含义是，既然redis有可能挂掉，那我多增设几台redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群。（异地多活！）</p><p><strong>限流降级</strong><br>这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p><p><strong>数据预热</strong><br>数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swagger学习</title>
      <link href="2020/06/28/swagger/"/>
      <url>2020/06/28/swagger/</url>
      
        <content type="html"><![CDATA[<h1 id="Swagger学习"><a href="#Swagger学习" class="headerlink" title="Swagger学习"></a>Swagger学习</h1><h2 id="Swagger-简介"><a href="#Swagger-简介" class="headerlink" title="Swagger 简介"></a>Swagger 简介</h2><p>Swagger 是一套围绕 Open API 规范构建的开源工具，可以帮助设计，构建，记录和使用RESTAPI。</p><h2 id="Open-API-简介"><a href="#Open-API-简介" class="headerlink" title="Open API 简介"></a>Open API 简介</h2><p>Open API 规范(OpenAPI Specification)以前叫做 Swagger 规范，是RESTAPI的API描述格式。</p><p>Open API 文件允许描述整个 API，包括：</p><ul><li>每个访问地址的类型。POST 或 GET</li><li>每个操作的参数。包括输入输出参数</li><li>认证方法</li><li>连接信息，声明，使用团队和其他信息</li></ul><p><a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3">源码和说明参照点我查看</a></p><h2 id="Springfox"><a href="#Springfox" class="headerlink" title="Springfox"></a>Springfox</h2><p>使用 Swagger 时如果碰见版本更新或迭代时，只需要更改Swagger 的描述文件即可。但是在频繁的更新项目版本时很多开发人员认为即使修改描述文件（yml 或 json）也是一定的工作负担，久而久之就直接修改代码，而不去修改描述文件了，这样基于描述文件生成接口文档也失去了意义。</p><p>Marty Pitt 编写了一个基于 Spring 的组件 swagger-springmvc。Spring-fox 就是根据这个组件发展而来的全新项目。Spring-fox 是根据代码生成接口文档，所以正常的进行更新项目版本，修改代码即可，而不需要跟随修改描述文件。</p><p><a href="http://springfox.github.io/springfox/">官网地址</a></p><p><a href="https://github.com/springfox/springfox">官方源码</a></p><h2 id="Swgger-使用"><a href="#Swgger-使用" class="headerlink" title="Swgger 使用"></a>Swgger 使用</h2><h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><ul><li><p>编写 SpringBoot 项目，项目中 controller 中包含一个 Handler，测试项目，保证程序可以正确运行。</p></li><li><p>导入 Spring-fox 依赖</p>  <pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>书写配置类</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span> <span class="token comment">// springboot配置类</span><span class="token annotation punctuation">@EnableSwagger2</span> <span class="token comment">// 代表启用了swagger</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>访问 swagger-ui</p><blockquote><p>启动项目后在浏览器中输入<a href="http://ip:port/swagger-ui.html即可以">http://ip:port/swagger-ui.html即可以</a><br>访问到 swagger-ui 页面，在页面中可以可视化的进行操作项目中所有<br>接口。</p></blockquote></li></ul><h3 id="基本信息配置"><a href="#基本信息配置" class="headerlink" title="基本信息配置"></a>基本信息配置</h3><p>Docket：摘要对象，通过对象配置描述文件的信息</p><p>apiInfo:设置描述文件中 info。参数类型 ApiInfo</p><p>select():返回 ApiSelectorBuilder 对象，通过对象调用 build()可以创建 Docket 对象<br>（这里用来创造者模式）</p><p><strong>代码如下</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 配置swagger的docket bean实例     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ApiInfo</span> apiInfo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span>apiInfo<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 1、指定扫描的包，这些包下有用，其他的没用</span>                <span class="token comment">//.apis(RequestHandlerSelectors.basePackage("com.study.swagger.controller"))</span>                <span class="token comment">//.apis(RequestHandlerSelectors.basePackage("com.study.swagger.pojo"))</span>                <span class="token comment">// 2、配置过滤，这些路径都不使用</span>               <span class="token comment">// .paths(PathSelectors.ant("/hello"))</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ApiInfo</span> <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 作者信息</span>        <span class="token class-name">Contact</span> contact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"姓名"</span><span class="token punctuation">,</span> <span class="token string">"你的网站或者个人博客"</span><span class="token punctuation">,</span> <span class="token string">"邮箱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name">ApiInfo</span><span class="token punctuation">(</span><span class="token string">"zhy"</span>                <span class="token punctuation">,</span> <span class="token string">"description"</span>                <span class="token punctuation">,</span> <span class="token string">"0.1"</span><span class="token comment">//你的版本</span>                <span class="token punctuation">,</span> <span class="token string">"http://zhang_hao_yu123.gitee.io"</span>                <span class="token punctuation">,</span> contact <span class="token comment">//作者信息</span>                <span class="token punctuation">,</span> <span class="token string">"Apache 2.0"</span>                <span class="token punctuation">,</span> <span class="token string">"http://www.apache.org/licenses/LICENSE-2.0"</span> <span class="token comment">//阿帕奇自己的，不动</span>                <span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s1.ax1x.com/2020/07/02/NbKBRJ.png" alt="效果图"></p><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><ul><li><p><code>@NotIncludeSwagger</code></p><blockquote><p>在不需要生成接口文档的方法上面添加@NotIncludeSwagger 注解后，该方法将不会被 Swagger 进行生成在接口文档中。</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@NotIncludeSwagger</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/getPeople2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">People</span> <span class="token function">getPeople2</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> address<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">People</span> peo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    peo<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    peo<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    peo<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> peo<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li><li><p><code>@Api</code></p><blockquote><p>@Api 是类上注解。控制整个类生成接口信息的内容。</p></blockquote><ul><li><p>tags：类的名称。可以有多个值，多个值表示多个副本。</p></li><li><p>description:描述，已过时。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/people"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"mydemo"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>description <span class="token operator">=</span> <span class="token string">"描述"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 swagger-ui.html 中显示效果:<br><img src="https://s1.ax1x.com/2020/07/02/NbMuO1.png" alt="@Api"></p></li></ul></li><li><p><code>@ApiOperation</code></p><blockquote><p>@ApiOperation 写在方法上，对方法进行总体描述</p></blockquote><ul><li>value：接口描述</li><li>notes：提示信息<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"接口描述"</span><span class="token punctuation">,</span>notes <span class="token operator">=</span> <span class="token string">"接口提示信息"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>在 swagger-ui 中显示效果:<br><img src="https://s1.ax1x.com/2020/07/02/NbQ4KA.png" alt="@ApiOperation"></li></ul></li><li><p><code>@ApiParam</code></p><blockquote><p>@ApiParam 写在方法参数前面。用于对参数进行描述或说明是否为必添项等说明。</p></blockquote><ul><li>name：参数名称</li><li>value：参数描述</li><li>required：是否是必须<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">People</span> <span class="token function">getPeople</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"姓名"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>  <span class="token class-name">String</span> address<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>效果图：<br><img src="https://s1.ax1x.com/2020/07/02/NblJsA.png" alt="@ApiParam"></li></ul></li><li><p><code>@ApiModel</code></p><blockquote><p>@ApiModel是类上注解，主要应用 Model，也就是说这个注解一般都是写在实体类上。</p></blockquote><ul><li>value：名称</li><li>description：描述<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"人类"</span><span class="token punctuation">,</span>description <span class="token operator">=</span> <span class="token string">"描述"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>效果图：<br><img src="https://s1.ax1x.com/2020/07/02/Nbl4WF.png" alt="@ApiModel"></li></ul></li><li><p><code>@ApiModelProperty</code></p><blockquote><p>@ApiModelProperty 可以用在方法或属性上。用于当对象作为参数时定义这个字段的内容。</p></blockquote><ul><li>value：描述</li><li>name：重写属性名</li><li>required：是否是必须的</li><li>example：示例内容</li><li>hidden：是否隐藏<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>example <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>效果图：<br><img src="https://s1.ax1x.com/2020/07/02/NblXFK.png" alt="@ApiModelProperty"></li></ul></li><li><p><code>@ApiIgnore</code></p></li></ul><blockquote><p>@ApiIgnore 用于方法或类或参数上，表示这个方法或类被忽略。和之前讲解的自定义注解@NotIncludeSwagger 效果类似。只是这个注解是 Swagger 内置的注解，而@NotIncludeSwagger 是我们自定义的注解。</p></blockquote><ul><li><p><code>@ApiImplicitParam</code></p><blockquote><p>@ApiImplicitParam 用在方法上，表示单独的请求参数，总体功能和@ApiParam 类似。</p></blockquote><ul><li><p>name：属性名</p></li><li><p>value：描述</p></li><li><p>required：是否是必须的</p></li><li><p>paramType：属性类型</p></li><li><p>dataType：数据类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/getPeople"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"address"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"地址"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>paramType <span class="token operator">=</span><span class="token string">"query"</span><span class="token punctuation">,</span>dataType <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">People</span> <span class="token function">getPeople</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"姓名"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> address<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果图：<br><img src="https://s1.ax1x.com/2020/07/02/Nb1lT0.png" alt="@ApiImplicitParam"></p><p>如果希望在方法上配置多个参数时，使用@ApiImplicitParams 进行配置。示例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiImplicitParams</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"id"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"编号"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"name"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> swagger </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx学习</title>
      <link href="2020/06/25/nginx-xue-xi/"/>
      <url>2020/06/25/nginx-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx学习"><a href="#Nginx学习" class="headerlink" title="Nginx学习"></a>Nginx学习</h1><h2 id="相关简介"><a href="#相关简介" class="headerlink" title="相关简介"></a>相关简介</h2><h3 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h3><blockquote><p>Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是<font color = red>占有内存少，并发能力强</font>，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。</p></blockquote><p><strong>nginx最高并发支持50000个</strong></p><h3 id="正向代理和反向代理"><a href="#正向代理和反向代理" class="headerlink" title="正向代理和反向代理"></a>正向代理和反向代理</h3><p><img src="https://s1.ax1x.com/2020/06/25/NBCsMt.jpg" alt="二者区别"><br><strong>正向代理</strong></p><blockquote><p>在客户端（浏览器）配置代理服务器，通过代理服务器进行互联网访问</p></blockquote><p><strong>反向代理</strong></p><blockquote><p>客户端不知道实际提供服务的服务端，用户只需要将请求发送到nginx中，再由nginx去发送到对应的服务器，从而隐藏了真实的服务器，提高了服务器的安全性。</p></blockquote><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p><img src="https://s1.ax1x.com/2020/06/25/NBi3B6.png" alt="负载均衡案例图"></p><blockquote><p>负载均衡（Load Balance）其意思就是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。</p></blockquote><h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><p><img src="https://s1.ax1x.com/2020/06/25/NBFVKI.png" alt="动静分离"></p><blockquote><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力</p></blockquote><h2 id="nginx的安装"><a href="#nginx的安装" class="headerlink" title="nginx的安装"></a>nginx的安装</h2><ul><li>使用远程连接工具连接Linux操作系统  </li><li>安装nginx相关的依赖<ul><li>gcc<blockquote><p>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc环境 需要安装 gcc<br>  yum install gcc-c++</p></blockquote></li><li>PCRE<blockquote><p>PCRE(Perl Compatible Regular Expressions)是一个 Perl 库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库。<br>  yum install -y pcre pcre-deve</p></blockquote></li><li>zlib<blockquote><p>zlib 库提供了很多种压缩和解压缩的方式，nginx 使用 zlib 对 http 包的内容进行 gzip，所以需要在 linux 上安装 zlib 库。<br>  yum install -y zlib zlib-devel</p></blockquote></li><li>openssl<blockquote><p>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。<br>  nginx 不仅支持 http 协议，还支持 https（即在 ssl 协议上传输 http），所以需要在<br>  linux 安装 openssl 库。<br>  yum install -y openssl openssl-devel</p></blockquote></li></ul></li><li>nginx安装<ul><li>把在官网下载的压缩包放到linux系统中并解压</li><li>进入解压的目录中运行 ./configure</li><li>再执行编译和安装 make &amp;&amp; make install</li></ul></li></ul><h2 id="nginx的启动和停止"><a href="#nginx的启动和停止" class="headerlink" title="nginx的启动和停止"></a>nginx的启动和停止</h2><p><strong>nginx的启动</strong></p><blockquote><p>进入/usr/local目录下，会发现多了一个nginx的目录<br><img src="https://s1.ax1x.com/2020/06/25/NBEBRg.png" alt="nginx目录内容"></p></blockquote><blockquote><p>进入目录中的sbin目录，并执行 ./nginx即可运行<br>输入 ps aux | grep nginx可以看到已经启动了<br><img src="https://s1.ax1x.com/2020/06/25/NBViwt.png" alt="启动"></p></blockquote><blockquote><p>我们通过访问IP地址，就能看到效果<br><strong>如果不能访问的话，看看有没有放行端口</strong><br><img src="https://s1.ax1x.com/2020/06/25/NBVlT0.png" alt="访问"></p></blockquote><p><strong>nginx的停止</strong>  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin  .&#x2F;nginx -s quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="nginx的常用命令"><a href="#nginx的常用命令" class="headerlink" title="nginx的常用命令"></a>nginx的常用命令</h2><ul><li><code>./nginx -v</code> 查看版本</li><li><code>./nginx</code> 启动</li><li><code>./nginx -s -quit</code> 关闭</li><li><code>./nginx -s reload</code> 配置文件重加载</li></ul><h2 id="nginx配置文件"><a href="#nginx配置文件" class="headerlink" title="nginx配置文件"></a>nginx配置文件</h2><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p><strong>文件在../nginx/conf/nginx.conf</strong><br><img src="https://s1.ax1x.com/2020/06/25/NBKMm4.png" alt="nginx配置文件"></p><h3 id="配置文件组成"><a href="#配置文件组成" class="headerlink" title="配置文件组成"></a>配置文件组成</h3><ul><li><p>全局块</p><blockquote><p>从配置文件开始到events块之间的内容，主要设置一些影响nginx服务器整体运行的配置指令</p></blockquote></li><li><p>events块</p><blockquote><p>events块涉及的指令主要影响Nginx服务器与用户的网络连接</p></blockquote></li><li><p>http块</p><ul><li><p>http全局块</p><blockquote><p>最重要的部分</p></blockquote></li><li><p>server块</p><blockquote><p>这块与虚拟主机有密切关系</p></blockquote><ul><li><p>全局server块</p><blockquote><p>最常见的配置是本虚拟机主机的监听配置和本虚拟机主机的名称或者ip配置</p></blockquote></li><li><p>location块</p><blockquote><p>一个server块可以配置多个location块，主要作用是基于Nginx服务器接收到的请求字符串，对虚拟主机名称之外的字符串进行匹配，对特定的请求进行处理。</p></blockquote></li></ul></li></ul></li></ul><h2 id="nginx的使用"><a href="#nginx的使用" class="headerlink" title="nginx的使用"></a>nginx的使用</h2><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><h4 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h4><p><strong>配置反向代理，让本地访问<a href="http://www.123.com的时候跳转到Linux中的localhost:8080页面">www.123.com的时候跳转到Linux中的localhost:8080页面</a></strong></p><ul><li><p>修改本机host</p><blockquote><p>打开C盘下的<code>Windows\System32\drivers\etc</code>中的hosts，添加<code>虚拟机ip + www.123.com</code>，做一个自慰版的域名</p></blockquote><p>  <img src="https://s1.ax1x.com/2020/06/25/NBwY9O.png" alt="hosts"></p></li><li><p>配置Linux中的nginx.conf文件内容<br>  <img src="https://s1.ax1x.com/2020/06/25/NB0TeA.png" alt="NB0TeA.png"></p></li><li><p>本地访问 <a href="http://www.123.com,实现结果/">www.123.com，实现结果</a><br>  <img src="https://s1.ax1x.com/2020/06/25/NBBQFx.png" alt="NBBQFx.png"></p></li></ul><p><strong>总结</strong></p><blockquote><p>通过这个案例可以了解到nginx的反向代理机制和使用</p></blockquote><h4 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h4><p><strong>根据访问的路径跳转到不同端口的服务中,nginx监听端口9001</strong></p><blockquote><p>访问 192.168.111.130:9001/edu/a.html跳转到一个tomcat上<br>访问192.168.111.130:9001/dov/a.html跳转到另一个tomcat上</p></blockquote><ul><li><p>前期准备</p><ul><li><p>配置两个tomcat，一个8080端口一个8081端口，别忘了放行端口</p></li><li><p>分别在<code>/webapps</code>目录下创建<code>edu</code>和<code>vod</code>，并且随便写一个页面用于验证(我这里分别用虚拟机和阿里云跑两个tomcat)</p><p>  这是8080端口的<br>  <img src="https://s1.ax1x.com/2020/06/25/NBgc8I.png" alt="8080"></p><p>  这是8081端口的<br>  <img src="https://s1.ax1x.com/2020/06/25/NBgIaQ.png" alt="8081"></p></li></ul></li><li><p>修改配置文件<br>  <img src="https://s1.ax1x.com/2020/06/25/NBRikQ.png" alt="修改配置文件"></p></li><li><p>运行</p><p>  访问/vod/<br>  <img src="https://s1.ax1x.com/2020/06/25/NBfYdO.png" alt="NBfYdO.png"><br>  访问/edu/<br>  <img src="https://s1.ax1x.com/2020/06/25/NBfaJH.png" alt="NBfaJH.png"></p></li></ul><p><strong>总结</strong></p><blockquote><p>通过这个案例可以理解server监听端口的修改，location的一部分语法，可以将多个项目部署到同一个nginx上</p></blockquote><p><strong>location语法</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">location[&#x3D; | ~ | ~* |^~] uri&#123;    proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080;#    xxxxx xxxxx&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s1.ax1x.com/2020/06/25/NBf3sx.png" alt="NBf3sx.png"></p><h3 id="负载均衡-1"><a href="#负载均衡-1" class="headerlink" title="负载均衡"></a>负载均衡</h3><h4 id="案例一-1"><a href="#案例一-1" class="headerlink" title="案例一"></a>案例一</h4><p><strong>浏览器访问<a href="http://192.168.111.130/edu/a.html%EF%BC%8C%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%EF%BC%8C%E5%B9%B3%E5%9D%87%E5%88%B08080%E5%92%8C8081%E7%AB%AF%E5%8F%A3%E4%B8%AD">http://192.168.111.130/edu/a.html，实现负载均衡，平均到8080和8081端口中</a></strong></p><ul><li>前期准备<ul><li>配置两个tomcat，一个8080端口一个8081端口，别忘了放行端口</li><li>分别在<code>/webapps</code>目录下创建<code>edu</code>，并且写一个<code>a.html</code>页面用于验证(我这里分别用虚拟机和阿里云跑两个tomcat)</li></ul></li><li>修改配置文件</li></ul><h4 id="nginx分配服务器策略"><a href="#nginx分配服务器策略" class="headerlink" title="nginx分配服务器策略"></a>nginx分配服务器策略</h4><ul><li><p>轮询(默认)</p><blockquote><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</p></blockquote><p>  <img src="https://s1.ax1x.com/2020/06/25/NDSLNQ.png" alt="NDSLNQ.png"></p></li><li><p>权重weight</p><blockquote><p>weight代表权重默认为1,权重越高被分配的客户端越多</p></blockquote><p>  <img src="https://s1.ax1x.com/2020/06/25/NDSIjP.png" alt="weight"></p></li><li><p>ip_hash</p><blockquote><p>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器,<font color = red>这种方式可以解决session相关的问题</font></p></blockquote><p>  <img src="https://s1.ax1x.com/2020/06/25/NDp14H.png" alt="NDp14H.png"></p></li><li><p>fair</p><blockquote><p>根据浏览器对所有服务器的相应时间来分配，优先最短的</p></blockquote><p>  <img src="https://s1.ax1x.com/2020/06/25/NDpLqK.png" alt="NDpLqK.png"></p><h4 id="负载均衡的参数"><a href="#负载均衡的参数" class="headerlink" title="负载均衡的参数"></a>负载均衡的参数</h4></li><li><p><code>upstream</code>每个设备的状态</p></li><li><p><code>down</code> 表示单前的 server 暂时不参与负载</p></li><li><p><code>weight</code> 默认为 1.weight 越大，负载的权重就越大</p></li><li><p><code>fail_timeout</code> 次失败后，暂停的时间 默认 10s</p></li><li><p><code>max_fails</code> 允许请求失败的次数默认为 1.当超过最大次数时，返回</p></li><li><p><code>backup</code> 其它所有的非 backup 机器 down 或者忙的时候，请求 backup 机器。所以这台机器压力会最轻。</p></li></ul><h3 id="动静分离-1"><a href="#动静分离-1" class="headerlink" title="动静分离"></a>动静分离</h3><blockquote><p>nginx把动态请求和静态请求分离，tomcat处理动态请求。<strong>一种是把存粹的静态资源放在一个独立的服务器，这是主流的方案，即前后端分离。另一种是动态和静态文件混合在一起发布，通过nginx分开，如jsp项目</strong></p></blockquote><p><img src="https://s1.ax1x.com/2020/06/25/NDC439.png" alt="动静分离原理图"></p><p>实现操作跟上面的差不多，就不列举了。</p><h3 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h3><h4 id="图文介绍"><a href="#图文介绍" class="headerlink" title="图文介绍"></a>图文介绍</h4><p><img src="https://s1.ax1x.com/2020/06/25/NDF11J.png" alt="NDF11J.png"></p><p>解决：<br><img src="https://s1.ax1x.com/2020/06/25/NDklUf.png" alt="NDklUf.png"></p><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ul><li>两台nginx服务器<br>  <strong>两台都需要有tomcat，nginx，keepalived</strong></li><li>keepalived  <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install keepalived -y# 启动keepalivedsystemctl start keepalived.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>虚拟ip</li></ul><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ul><li>修改/etc/keepalived/keepalivec.conf 配置文件  <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">! Configuration File for keepalivedglobal_defs &#123;notification_email &#123;    acassen@firewall.loc    failover@firewall.loc    sysadmin@firewall.loc&#125;notification_email_from Alexandre.Cassen@firewall.locsmtp_server 192.168.200.1smtp_connect_timeout 30router_id LVS_DEVEL     # 绑定hosts里的127.0.0.1vrrp_skip_check_adv_addrvrrp_strictvrrp_garp_interval 0vrrp_gna_interval 0&#125;#脚本vrrp_script chk_http_port &#123;script &quot;&#x2F;usr&#x2F;local&#x2F;src&#x2F;nginx_check.sh&quot;interval 2 #（检测脚本执行的间隔）weight 2&#125;#vrrp_instance VI_1 &#123;    state MASTER  #主服务器MASTER，备用服务器BACKUP    interface ens32 # 需要与你的网卡类型相同    virtual_router_id 51 #主备机都要相同    priority 100 # 权重主备机一般分别是100 90    advert_int 1    authentication &#123;         auth_type PASS  # 认证策略密码        auth_pass 1111    &#125;    virtual_ipaddress &#123;  # 虚拟ip绑定，可以是多个        192.168.200.16        192.168.200.17        192.168.200.18    &#125;&#125;virtual_server 192.168.200.100 443 &#123;    delay_loop 6    lb_algo rr    lb_kind NAT    persistence_timeout 50    protocol TCP    real_server 192.168.201.100 443 &#123;        weight 1        SSL_GET &#123;            url &#123;            path &#x2F;            digest ff20ad2481f97b1754ef3e12ecd3a9cc            &#125;            url &#123;            path &#x2F;mrtg&#x2F;            digest 9b3a0c85a887a256d6939da88aabd8cd            &#125;            connect_timeout 3            nb_get_retry 3            delay_before_retry 3        &#125;    &#125;&#125;virtual_server 10.10.10.2 1358 &#123;    delay_loop 6    lb_algo rr     lb_kind NAT    persistence_timeout 50    protocol TCP    sorry_server 192.168.200.200 1358    real_server 192.168.200.2 1358 &#123;        weight 1        HTTP_GET &#123;            url &#123;             path &#x2F;testurl&#x2F;test.jsp            digest 640205b7b0fc66c1ea91c463fac6334d            &#125;            url &#123;             path &#x2F;testurl2&#x2F;test.jsp            digest 640205b7b0fc66c1ea91c463fac6334d            &#125;            url &#123;             path &#x2F;testurl3&#x2F;test.jsp            digest 640205b7b0fc66c1ea91c463fac6334d            &#125;            connect_timeout 3            nb_get_retry 3            delay_before_retry 3        &#125;    &#125;    real_server 192.168.200.3 1358 &#123;        weight 1        HTTP_GET &#123;            url &#123;             path &#x2F;testurl&#x2F;test.jsp            digest 640205b7b0fc66c1ea91c463fac6334c            &#125;            url &#123;             path &#x2F;testurl2&#x2F;test.jsp            digest 640205b7b0fc66c1ea91c463fac6334c            &#125;            connect_timeout 3            nb_get_retry 3            delay_before_retry 3        &#125;    &#125;&#125;virtual_server 10.10.10.3 1358 &#123;    delay_loop 3    lb_algo rr     lb_kind NAT    persistence_timeout 50    protocol TCP    real_server 192.168.200.4 1358 &#123;        weight 1        HTTP_GET &#123;            url &#123;             path &#x2F;testurl&#x2F;test.jsp            digest 640205b7b0fc66c1ea91c463fac6334d            &#125;            url &#123;             path &#x2F;testurl2&#x2F;test.jsp            digest 640205b7b0fc66c1ea91c463fac6334d            &#125;            url &#123;             path &#x2F;testurl3&#x2F;test.jsp            digest 640205b7b0fc66c1ea91c463fac6334d            &#125;            connect_timeout 3            nb_get_retry 3            delay_before_retry 3        &#125;    &#125;    real_server 192.168.200.5 1358 &#123;        weight 1        HTTP_GET &#123;            url &#123;             path &#x2F;testurl&#x2F;test.jsp            digest 640205b7b0fc66c1ea91c463fac6334d            &#125;            url &#123;             path &#x2F;testurl2&#x2F;test.jsp            digest 640205b7b0fc66c1ea91c463fac6334d            &#125;            url &#123;             path &#x2F;testurl3&#x2F;test.jsp            digest 640205b7b0fc66c1ea91c463fac6334d            &#125;            connect_timeout 3            nb_get_retry 3            delay_before_retry 3        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>在<code>/usr/local/src/</code>下添加对应的脚本  <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!&#x2F;bin&#x2F;bashA&#x3D;&#96;ps -C nginx –no-header |wc -l&#96;if [ $A -eq 0 ];then    &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx  #监视的路径，就是nginx的启动    sleep 2    if [ &#96;ps -C nginx --no-header |wc -l&#96; -eq 0 ];then        killall keepalived    fifi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="2020/06/23/she-ji-mo-shi/"/>
      <url>2020/06/23/she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>核心作用：保证一个类只有一个实例，并且提供一个访问该实例的全局访问点</p><p>常见应用场景：<br><img src="https://s1.ax1x.com/2020/06/23/NtRKgg.jpg" alt="NtRKgg.jpg"></p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>由于单例模式只生成一个实例，减少了系统性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决</li><li>单例模式可以在系统设置全局的访问点，优化环共享资源访问，例如可以设计一个单例类，负责所有数据表的映射处理</li></ul><h4 id="常见的五种单例模式实现方式"><a href="#常见的五种单例模式实现方式" class="headerlink" title="常见的五种单例模式实现方式"></a>常见的五种单例模式实现方式</h4><ul><li>主要：<ul><li>饿汉式（线程安全，调用效率高。 但是，不能延时加载。）<ul><li>饿汉式单例模式代码中，static变量会在类装载时初始化，此时也不会涉及多个线程对象访问该对象的问题。虚拟机保证只会装载一次该类，肯定不会发生并发访问的问题。因此，可以省略synchronized关键字。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 类初始化，立即加载，天然线程安全</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 私有构造器</span>     <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 提供唯一方法调用类对象，方法没有同步，调用效率高</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>懒汉式（线程安全，调用效率不高。 但是，可以延时加载。）  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton2</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 延迟加载，真正用的时候才加载，资源利用效率高，调用效率低</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton2</span> instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 方法同步调用效率低</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Singleton2</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>其他：<ul><li>双重检测锁式（由于JVM底层内部模型原因，偶尔会出问题。不建议使用）  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton3</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**    * 这个模式将同步内容下方到if内部，提高了执行的效率    * 不必每次获取对象时都进行同步，只有第一次才同步    * 创建了以后就没必要了    *    *    */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton3</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton3</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Singleton3</span> sc<span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton3</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                sc <span class="token operator">=</span> instance<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sc <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton3</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>sc <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    instance <span class="token operator">=</span> sc<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>静态内部类式(线程安全，调用效率高。 但是，可以延时加载)<ul><li>外部类没有static属性，则不会像饿汉式那样立即加载对象。</li><li>只有真正调用getInstance(),才会加载静态内部类。加载类时是线程安全的。 instance是static final类型，保证了内存中只有这样一个实例存在，而且只能被赋值一次，从而保证了线程安全性. </li><li>兼备了并发高效调用和延迟加载的优势！<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton4</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span>  <span class="token class-name">Singleton4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonClassInstance</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton4</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton4</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">SingletonClassInstance</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>枚举单例(线程安全，调用效率高，不能延时加载)  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Singleton5</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**    * 定义一个枚举元素，代表一个实例    *一个枚举元素本身就是单例    */</span>    INSTANCE<span class="token punctuation">;</span>    <span class="token comment">/**    * 单例可以有自己的操作    */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">singletonOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//功能处理</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>注意：<ul><li>防止反射获取不同对象的漏洞  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 问题：通过反射获取到构造方法，可以同时创建多个对象</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> constructor <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建出的obj1和obj2的地址是不一样的</span><span class="token class-name">T</span> obj1 <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">T</span> obj2 <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 解决：因为每次new对象都要调用构造方法，所以在构造方法里判空即可</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">T</span> instance<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>防止反序列化获取不同对象的漏洞  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">T</span> instance<span class="token punctuation">;</span><span class="token comment">// 反序列化时，如果定义了readResolve()则直接返回此方法的指定对象，不用单独创建对象</span><span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">readResolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ObjectStreamException</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h4><ul><li><strong>单例对象占用资源少，不需要延时加载</strong><ul><li>枚举式好于饿汉式</li></ul></li><li><strong>单例对象占用资源大，需要延时加载</strong><ul><li>静态内部类式好于懒汉式</li></ul></li></ul><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li><p>实现了创建者和调用者的分离</p></li><li><p>详细分类</p><ul><li>简单工厂模式</li><li>工厂方法模式</li><li>抽象工厂模式<h4 id="面向对象设计的基本原则"><a href="#面向对象设计的基本原则" class="headerlink" title="面向对象设计的基本原则"></a>面向对象设计的基本原则</h4></li></ul></li><li><p>OCP（开闭原则，Open-Closed Principle）：一个软件的实体应当对扩展开放，对修改关闭。</p></li><li><p>DIP（依赖倒转原则，Dependence Inversion Principle）：要针对接口编程，不要针对实现编程。</p></li><li><p>LoD（迪米特法则，Law of Demeter）：只与你直接的朋友通信，而避免和陌生人通信。</p></li></ul><h4 id="核心本质"><a href="#核心本质" class="headerlink" title="核心本质"></a>核心本质</h4><ul><li>实例化对象，用工厂方法代替new操作</li><li>将选择实现类、创建对象统一管理和控制。从而将调用者跟我们实现类解耦</li></ul>]]></content>
      
      
      <categories>
          
          <category> GOF23 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GOF23 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EL表达式和jstl</title>
      <link href="2020/06/19/el-biao-da-shi-he-jstl/"/>
      <url>2020/06/19/el-biao-da-shi-he-jstl/</url>
      
        <content type="html"><![CDATA[<h1 id="EL表达式和jstl"><a href="#EL表达式和jstl" class="headerlink" title="EL表达式和jstl"></a>EL表达式和jstl</h1><p>作用：解决了jsp页面数据渲染代码冗余的毛病，更加简单便捷</p><h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><h3 id="使用EL表达式获取请求数据"><a href="#使用EL表达式获取请求数据" class="headerlink" title="使用EL表达式获取请求数据"></a>使用EL表达式获取请求数据</h3><ul><li>获取用户请求数据<ul><li><code>$&#123;param.键名&#125;</code> 获取请求实体中一个键一个值的数据</li><li><code>$&#123;paramValues.键名&#125;</code> 获取请求实体中同键不同值的数据，返回的是String数组，可以使用角标直接获取 例如：爱好</li></ul></li><li>获取请求头数据<ul><li><code>$&#123;header&#125;</code>  返回所有的请求头数据，键值对形式</li><li><code>$&#123;header[&quot;键名&quot;]&#125;</code> 返回指定的键的请求头数据</li><li><code>$&#123;headerValues[&quot;键名&quot;]&#125;</code>返回指定的键名(同键不同值)的值的数组</li></ul></li><li>获取Cookie数据<ul><li><code>$&#123;cookie&#125;</code> 获取所有的Cookie对象,键值对</li><li><code>$&#123;cookie.Cookie对象的键名&#125;</code> 获取存储了指定Cookie数据的Cookie对象</li><li><code>$&#123;cookie.Cookie对象的键名.name&#125;</code> 获取存储了指定Cookie数据的Cookie对象的存储的键</li><li><code>$&#123;cookie.Cookie对象的键名.value&#125;</code>获取存储了指定Cookie数据的Cookie对象的存储的值<h3 id="使用EL表达式获取作用域数据"><a href="#使用EL表达式获取作用域数据" class="headerlink" title="使用EL表达式获取作用域数据"></a>使用EL表达式获取作用域数据</h3>作用域对象：pageContext  request  session application </li></ul></li><li>获取作用域数据 <ul><li>普通字符串数据 <code>$&#123;键名&#125;</code></li><li>对象数据 <code>$&#123;键名.属性名&#125;</code></li><li>集合数据<ul><li>list集合 <code>$&#123;键名[角标]&#125;</code></li><li>Map集合 <code>$&#123;map集合作用域存储的键名.map集合存储的数据的键名&#125;</code></li></ul></li><li>作用域查找顺序 <ul><li>pageContext–&gt;request–&gt;session–&gt;application</li></ul></li><li>获取指定作用域中的数据 <ul><li><code>$&#123;pageScope.键名&#125;</code>       指明获取pageContext作用域中的数据</li><li><code>$&#123;requestScope.键名&#125;</code>    指明获取request作用域中的数据</li><li><code>$&#123;sessionScope.键名&#125;</code>    指明获取session作用域中的数据</li><li><code>$&#123;applicationScope.键名&#125;</code>指明获取application作用域中的数据</li></ul></li></ul></li></ul><h3 id="使用EL表达式进行运算"><a href="#使用EL表达式进行运算" class="headerlink" title="使用EL表达式进行运算"></a>使用EL表达式进行运算</h3><ul><li>算术运算  <code>$&#123;1+2&#125;</code></li><li>关系运算  <code>$&#123;比较表达式&#125;</code></li><li>逻辑运算  <code>$&#123;逻辑表达式&#125;</code> EL表达式里没有&amp;和|<h3 id="使用EL表达式空值判断empty"><a href="#使用EL表达式空值判断empty" class="headerlink" title="使用EL表达式空值判断empty"></a>使用EL表达式空值判断empty</h3></li><li><code>$&#123;empty 键名&#125;</code> 判断该键是否有存储有效数据</li></ul><h2 id="jstl"><a href="#jstl" class="headerlink" title="jstl"></a>jstl</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>JSTL（Java server pages standarded tag library，即JSP标准标签库）是由JCP（Java community Proces）所制定的标准规范，它主要提供给Java Web开发人员一个标准通用的标签库，并由Apache的Jakarta小组来维护。开发人员可以利用这些标签取代JSP页面上的Java代码，从而提高程序的可读性，降低程序的维护难度。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>导入jar包<ul><li>jstl.jar</li><li>standard.jar</li></ul></li><li>使用taglib标签引入资源，<code>&lt;%@taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code></li><li>核心标签库<ul><li><code>c:out value=&quot;$&#123;表达式&#125;&quot; default=&quot;默认值&quot;</code> 将数据直接显示到页面上</li><li><code>c:set value=&quot;数据&quot; var=&quot;键名&quot; scope=&quot;作用域名&quot;</code> 存储数据到作用域对象中</li><li><code>c:remove var=&quot;要删除数据的键名&quot; scope=&quot;作用域名&quot;</code> 删除作用域中的指定键的数据</li><li><code>c:if test=&quot;$&#123;表达式&#125;&quot;</code> 逻辑判断标签需要依赖于EL的逻辑运算，也就是表达式中涉及到的数据必须从作用域中获取</li><li><code>c:choose</code> 条件成立只会执行一次，都不成立则执行otherwise<ul><li><code>&lt;c:when  test=&quot;&quot;&gt;执行内容&lt;/c:when&gt;</code></li><li><code>&lt;c:otherwise&gt;执行内容&lt;/c:otherwise&gt;</code><br><img src="https://s1.ax1x.com/2020/06/19/NMGDXT.png" alt="choose例子"></li></ul></li><li><code>c:foreach</code><ul><li><code>begin</code>:声明循环的开始位置</li><li><code>end</code>:声明循环的结束位置</li><li><code>step</code>:声明循环的步长</li><li><code>varStatus</code>:声明变量记录循环状态 ,例如变量名:i</li><li><code>items</code>:声明要遍历的数据，可以是集合和数组等,使用EL表达式来获取</li><li><code>var</code>:声明变量记录每次遍历的结果。可以做循环体中使用使用EL表达式获取遍历出来的数据<br><img src="https://s1.ax1x.com/2020/06/19/NMG4c6.png" alt="foreach例子"></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> EL </category>
          
          <category> jstl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EL </tag>
            
            <tag> jstl </tag>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP</title>
      <link href="2020/06/19/jsp/"/>
      <url>2020/06/19/jsp/</url>
      
        <content type="html"><![CDATA[<h1 id="JSP学习"><a href="#JSP学习" class="headerlink" title="JSP学习"></a>JSP学习</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>本质上还是Servlet、跨平台，一次编写处处运行、组件跨平台、健壮性和安全性。</p><h2 id="访问原理"><a href="#访问原理" class="headerlink" title="访问原理"></a>访问原理</h2><p> 浏览器向服务器发请求，不管访问的是什么资源，其实都是在访问Servlet，所以当访问一个jsp页面时，其实也是在访问一个Servlet，服务器在执行jsp的时候，首先把jsp翻译成一个Servlet，所以我们访问jsp时，其实不是在访问jsp，而是在访问jsp翻译过后的那个Servlet。</p><h2 id="page指令"><a href="#page指令" class="headerlink" title="page指令"></a>page指令</h2><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%--申明转义语言 --%&gt;&lt;%@page language&#x3D;&quot;java&quot;%&gt;&lt;%--申明转义时导入的Java包文件  --%&gt;&lt;%@page import&#x3D;&quot;java.util.*,java.lang.*&quot; %&gt;&lt;%--设置jsp的数据保存的编码格式--%&gt;&lt;%@page pageEncoding&#x3D;&quot;utf-8&quot;%&gt;&lt;%--设置数据的响应编码格式，，相当于setContentType--%&gt;&lt;%@page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;utf-8&quot;%&gt;&lt;%-- 设置session的状态，默认为true --%&gt;&lt;%@page session&#x3D;&quot;false&quot;%&gt;&lt;%-- 开启内置exception异常对象的使用，默认为false --%&gt;&lt;%@pageisErrorPage&#x3D;&quot;false&quot;%&gt;&lt;%-- 设置当jsp运行出现异常错误的时候跳转到指定的页面 --%&gt;&lt;%@page errorPage&#x3D;&quot;error.jsp&quot;%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="局部代码块"><a href="#局部代码块" class="headerlink" title="局部代码块"></a>局部代码块</h2><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><p>使用局部代码块声明的Java代码会被原样转义到_JspServlet方法中</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>使用局部代码块在jsp中进行逻辑判断，书写麻烦，阅读困难。</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>&lt;% xxxxx %&gt;</p><h2 id="全局代码块"><a href="#全局代码块" class="headerlink" title="全局代码块"></a>全局代码块</h2><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><p>全局代码声明的java代码，在被转译时，会被转译成jsp对应的Java全局代码</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>声明方法和全局变量</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>使用全局申明方法，使用局部调用方法</p><h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h3><p>&lt;%! xxxx %&gt;</p><h2 id="脚本段语句"><a href="#脚本段语句" class="headerlink" title="脚本段语句"></a>脚本段语句</h2><h3 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h3><p> 帮助我们快速的获取变量或者方法的返回值作为数据响应给浏览器</p><h3 id="格式-2"><a href="#格式-2" class="headerlink" title="格式"></a>格式</h3><p>&lt;%=变量名或者方法%&gt;</p><h2 id="静态引入和动态引入"><a href="#静态引入和动态引入" class="headerlink" title="静态引入和动态引入"></a>静态引入和动态引入</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>不同的jsp文件用相同的资源，如果资源在每个jsp页面中都单独声明，则会导致代码冗余量高</p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>实现资源共享</p><ul><li>静态引入<ul><li>格式：<code>&lt;%@include file=&quot;java.jsp&quot;%&gt;</code></li><li>特点：被引入的jsp文件和原有的jsp文件被编译成一个Java文件</li><li>注意：静态引入的相关jsp文件中不能申明同名变量</li></ul></li><li>动态引入<ul><li>格式：<code>&lt;jsp:include page=&quot;java.jsp&quot;&gt;&lt;/jsp:include&gt;</code></li><li>特点：被引入的文件会被单独转译，原有的jsp文件会调用被引入的jsp文件可以声明同名变量<h2 id="转发标签forward"><a href="#转发标签forward" class="headerlink" title="转发标签forward"></a>转发标签forward</h2><h3 id="特点-4"><a href="#特点-4" class="headerlink" title="特点"></a>特点</h3>从当前jsp跳转另外一个jsp页面<h3 id="格式-3"><a href="#格式-3" class="headerlink" title="格式"></a>格式</h3><code>&lt;jsp:forward page=&quot;要转发的jsp的相对路径&quot;&gt;&lt;/jsp:forward&gt;</code><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3>forward标签中除了<code>&lt;jsp:param value=&quot;&quot; name=&quot;&quot;/&gt;</code>子标签以外不能出现其他内容，否则会报错。value和name会将数据以?的形式拼接在转发路径的后面。<h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><h3 id="pageContext"><a href="#pageContext" class="headerlink" title="pageContext"></a>pageContext</h3></li></ul></li><li>页面上下文对象，此对象封存了另外8个对象</li><li>作用域：当前页面<h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3></li><li>封存了请求相关数据，由服务器创建</li><li>作用域：一次请求<h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3></li><li>用来存储用户的不同请求的共享数据</li><li>作用域：一次会话<h3 id="application"><a href="#application" class="headerlink" title="application"></a>application</h3></li><li>ServletContext对象，一次项目只有一个</li><li>作用域：项目整个生命周期<h3 id="response"><a href="#response" class="headerlink" title="response"></a>response</h3></li><li>响应，设置编码格式<h3 id="out"><a href="#out" class="headerlink" title="out"></a>out</h3></li><li>响应对象，Jsp内部使用。带有缓冲区的响应对象，效率高于response对象<h3 id="page"><a href="#page" class="headerlink" title="page"></a>page</h3></li><li>代表当前Jsp的对象。相当于java中的this<h3 id="exception"><a href="#exception" class="headerlink" title="exception"></a>exception</h3></li><li>封存了异常信息</li><li>使用此对象需要在page指定中使用属性isErrorPage=”true”开启。<h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3></li><li>ServletConfig，主要是用来获取web.xml中的配置数据，完成一些初始化数据的读取</li></ul><h2 id="作用域对象"><a href="#作用域对象" class="headerlink" title="作用域对象"></a>作用域对象</h2><h3 id="pageContext-1"><a href="#pageContext-1" class="headerlink" title="pageContext"></a>pageContext</h3><ul><li>作用域：当前页面</li><li>封存了另外8个对象，可以获取其他对象<h3 id="request-1"><a href="#request-1" class="headerlink" title="request"></a>request</h3></li><li>作用域：一次请求</li><li>一次请求的servlet的数据共享<h3 id="session-1"><a href="#session-1" class="headerlink" title="session"></a>session</h3></li><li>作用域：一次会话</li><li>一个用户的不同请求的数据共享<h3 id="application-1"><a href="#application-1" class="headerlink" title="application"></a>application</h3></li><li>作用域：项目内，相当于ServletContext对象</li><li>不同用户的数据据共享问题，将数据从一个用户流转给其他用户</li></ul><h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><p>/虚拟项目名/资源路径<br><strong>在jsp中资源的第一个/表示的是服务器根目录</strong></p><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><p>../../资源</p><h3 id="使用jsp中自带的全局路径声明"><a href="#使用jsp中自带的全局路径声明" class="headerlink" title="使用jsp中自带的全局路径声明"></a>使用jsp中自带的全局路径声明</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;%String  path = request.getContextPath();String  basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/"; %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%=base Path%><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JSP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>servlet入门</title>
      <link href="2020/06/19/servlet/"/>
      <url>2020/06/19/servlet/</url>
      
        <content type="html"><![CDATA[<h1 id="Servlet入门学习"><a href="#Servlet入门学习" class="headerlink" title="Servlet入门学习"></a>Servlet入门学习</h1><h2 id="Servlet介绍"><a href="#Servlet介绍" class="headerlink" title="Servlet介绍"></a>Servlet介绍</h2><p>狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。Servlet运行于支持Java的应用服务器中。从原理上讲，Servlet可以响应任何类型的请求，但绝大多数情况下Servlet只用来扩展基于HTTP协议的Web服务器。<br><img src="https://s1.ax1x.com/2020/06/19/NKDsVP.png" alt="Servlet执行流程"></p><p>要注意：</p><ul><li>servlet执行会自动调用service方法</li><li>如果没有service方法，则根据发送的请求的类型(get/post)，执行相对应的请求</li><li>如果都没有的话会去父类HttpServlet中调用service方法，但是根据源码我们可以得知会报错</li><li> 不管是get方式还是post方式的请求，如果Servlet类中有service方法，则优先调用Service方法。 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">String</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">long</span> errMsg<span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           errMsg <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLastModified</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>errMsg <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">long</span> ifModifiedSince <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getDateHeader</span><span class="token punctuation">(</span><span class="token string">"If-Modified-Since"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>ifModifiedSince <span class="token operator">&lt;</span> errMsg <span class="token operator">/</span> <span class="token number">1000L</span> <span class="token operator">*</span> <span class="token number">1000L</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">maybeSetLastModified</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> errMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                   resp<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">304</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"HEAD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           errMsg <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLastModified</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">maybeSetLastModified</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> errMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doHead</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"PUT"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPut</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"DELETE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doDelete</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"OPTIONS"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doOptions</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"TRACE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doTrace</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">String</span> errMsg1 <span class="token operator">=</span> lStrings<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"http.method_not_implemented"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> errArgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>method<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>           errMsg1 <span class="token operator">=</span> <span class="token class-name">MessageFormat</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>errMsg1<span class="token punctuation">,</span> errArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>           resp<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span><span class="token number">501</span><span class="token punctuation">,</span> errMsg1<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注解介绍"><a href="#注解介绍" class="headerlink" title="注解介绍"></a>注解介绍</h2><code>@WebServlet</code><blockquote><p>在servlet3.0以后，我们可以不用再web.xml里面配置servlet，只需要加上@WebServlet注解就可以修改该servlet的属性了。</p></blockquote></li></ul><p>以下是一些注解的属性</p><table><thead><tr><th align="center">属性名</th><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">name</td><td align="center">String</td><td align="center">指定Servlet 的 name 属性，等价于 <code>&lt;servlet-name&gt;</code>。如果没有显式指定，则该 Servlet 的取值即为类的全限定名</td></tr><tr><td align="center">value</td><td align="center">String[]</td><td align="center">该属性等价于 urlPatterns 属性。两个属性不能同时使用</td></tr><tr><td align="center">urlPatterns</td><td align="center">String[]</td><td align="center">指定一组 Servlet 的 URL 匹配模式。等价于<code>&lt;url-pattern&gt;</code>标签</td></tr><tr><td align="center">loadOnStartup</td><td align="center">int</td><td align="center">指定 Servlet 的加载顺序，等价于 <code>&lt;load-on-startup&gt;</code>标签</td></tr><tr><td align="center">initParams</td><td align="center">WebInitParam[]</td><td align="center">指定一组 Servlet 初始化参数，等价于<code>&lt;init-param&gt;</code>标签</td></tr><tr><td align="center">asyncSupported</td><td align="center">boolean</td><td align="center">声明 Servlet 是否支持异步操作模式，等价于<code>&lt;async-supported&gt;</code>标签</td></tr><tr><td align="center">description</td><td align="center">String</td><td align="center">该 Servlet 的描述信息，等价于 <code>&lt;description&gt;</code>标签</td></tr><tr><td align="center">displayName</td><td align="center">String</td><td align="center">该 Servlet 的显示名，通常配合工具使用，等价于<code>&lt;display-name&gt;</code>标签</td></tr></tbody></table><h2 id="request"><a href="#request" class="headerlink" title="request"></a>request</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>Request对象中封存了当前请求的所有请求信息</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>获取请求行数据<ul><li><code>req.getMethod();</code> 获取请求方式</li><li><code>req.getRequestURL();</code> 获取请求的URL</li><li><code>req.getRequestURI();</code> 获取请求的URI</li><li><code>req.getScheme();</code> 获取请求协议</li></ul></li><li>获取请求头数据<ul><li><code>req.getHeaderNames();</code> 获取请求头的键的枚举</li><li><code>req.getHeader(&quot;键名&quot;);</code> 获取指定键的信息</li></ul></li><li>获取用户数据<ul><li><code>req.getParameter(&quot;键名&quot;);</code> 获取指定键的用户数据</li><li><code>req.getParameterValues(&quot;键名&quot;);</code> 获取同键不同值的用户数据（多选），返回类型是数组</li></ul></li><li>注意<ul><li>如果要获取的请求数据不存在，返回为null</li><li>Request对象由tomcat服务器创建，并作为实参传递给处理请求的servlet的service()方法</li><li>解决乱码问题：<code>req.setCharacterEncoding(&quot;utf-8&quot;);</code><h2 id="response"><a href="#response" class="headerlink" title="response"></a>response</h2><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3>用来响应数据到浏览器的一个对象<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3></li></ul></li><li>设置响应头<ul><li><code>setHeader(String name,  String value);</code> 在相应头中添加信息，键名相同会覆盖原有的</li><li><code>addHeader(String name, String value);</code> 在响应头中添加响应信息，但是不会覆盖原有的</li></ul></li><li>设置响应状态<ul><li><code>sendError(int num, String msg);</code> 自定义相应状态码</li></ul></li><li>设置响应实体<ul><li><code>resp.getWrite().write(String str);</code> 响应具体的数据给浏览器</li></ul></li><li>设置响应编码格式<ul><li><code>resp.setContentType(&quot;text/html;charset=utf-8&quot;);</code><h2 id="servlet的使用"><a href="#servlet的使用" class="headerlink" title="servlet的使用"></a>servlet的使用</h2></li></ul></li><li>创建普通的java类并继承HttpServlet</li><li>覆写service方法</li><li>在service中编写业务代码<ul><li>设置请求编码格式 <code>req.setCharacterEncoding(&quot;utf-8&quot;);</code></li><li>设置响应编码格式 <code>resp.setContentType(&quot;text/html;charset=utf-8&quot;);</code></li><li>获取请求信息 <code>req.getParameter(&quot;数据的name&quot;)</code></li><li>处理请求信息 <code>业务处理,调用service层什么的</code></li><li>响应处理结果<br><img src="https://s1.ax1x.com/2020/06/19/NKcJpT.png" alt="重定向与请求转发"><ul><li>直接处理 <code>resp.getWriter().write()</code></li><li>请求转发 <code>request.getRequsetDispatcher().forward(requset,response)</code><ul><li>特点是：一次请求，地址栏信息不改变</li><li>通过<code>request.setAttribute(object name,Object value);</code>解决了一次请求内的不同Servlet的数据(请求数据+其他数据)共享问题。</li></ul></li><li>重定向 <code>response.sendRedirect(&quot;路径&quot;)</code><ul><li>特点是：两次请求，request不能共用，地址栏改变，避免表单重复提交</li></ul></li></ul></li></ul></li></ul><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>解决了发送不同请求的数据共享问题<br><img src="https://s1.ax1x.com/2020/06/19/NKhz59.png" alt="cookie"></p><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建cookie！！！！</span>    <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">String</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置有效期</span>    cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置有效路径</span>    cookie<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token class-name">String</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用resp响应到浏览器中</span>    resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>如果不设置有效期则默认存储在浏览器的内存里，关闭即失效</li><li>如果不设置有效路径则任意项目路径请求都含有cookie</li><li>如果设置了有效期则存储到客户端的硬盘里，到期自动销毁</li></ul><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><p>解决一个用户的不同请求处理的数据共享问题</p><h3 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建Session对象</span><span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置session有效期</span>      session<span class="token punctuation">.</span><span class="token function">setMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存储到session对象中</span>session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">Object</span> valuse<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//获取session中的数据,返回类型是Object，需要强制转换</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//强制销毁</span>      session<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul><li>有唯一标识sessionId（什么意思呢？就是说你打开浏览器就相当于创建了一个id，关闭就没了）</li><li>session解决了同一个用户不同请求的数据共享问题</li><li>session的作用域：浏览器不关闭session不失效，则同一用户的任意请求获取的都是同一session<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3></li><li>session默认有效时间为30分钟，可以在tomcat下的web.xml中进行配置</li><li>也可以在代码在使用：<code>session.setMaxInactiveInterval(int seconds)</code></li></ul><h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>ServletContext对象由服务器进行创建，一个项目只有一个对象。不管在项目的任意位置进行获取得到的都是同一个对象，那么不同用户发起的请求获取到的也就是同一个对象了，该对象由用户共同拥有。</p><h3 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h3><p>解决了不同用户的数据共享问题</p><h3 id="使用-4"><a href="#使用-4" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取ServletContext对象的三种方法</span><span class="token class-name">ServletContext</span> sc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ServletContext</span> sc2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ServletContext</span> sc3 <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 存储用户共享数据到ServletContext中</span>sc<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取数据，需要强转</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span>sc<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token comment">// 获取web.xml中的全局配置属性</span>sc<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取项目web下的资源的绝对路径,获取的路径为项目根目录，path参数为项目根目录中的路径</span><span class="token class-name">String</span> path <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//  获取web下的资源流对象</span><span class="token class-name">InputStream</span> is <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><p>服务器创建，所有用户共享</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>服务器启动到服务器关闭</p><h2 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h2><h3 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h3><p>解决获取在web.xml中给每个servlet单独配置的数据问题</p><h3 id="使用-5"><a href="#使用-5" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取ServletConfig对象</span><span class="token class-name">ServletConfig</span> sc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用web.xml中的配置数据</span>sc<span class="token punctuation">.</span><span class="token function">getInitParmeter</span><span class="token punctuation">(</span><span class="token class-name">String</span>  name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Servlet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>短信业务实战</title>
      <link href="2020/06/18/duan-xin-ye-wu-shi-zhan/"/>
      <url>2020/06/18/duan-xin-ye-wu-shi-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="阿里云短信服务"><a href="#阿里云短信服务" class="headerlink" title="阿里云短信服务"></a>阿里云短信服务</h1><h2 id="了解阿里云用户权限操作"><a href="#了解阿里云用户权限操作" class="headerlink" title="了解阿里云用户权限操作"></a>了解阿里云用户权限操作</h2><blockquote><p><img src="https://s1.ax1x.com/2020/05/12/YNhuZt.png" alt="用户操作权限"></p></blockquote><h3 id="进入RAM访问控制"><a href="#进入RAM访问控制" class="headerlink" title="进入RAM访问控制"></a>进入RAM访问控制</h3><blockquote><p><img src="https://s1.ax1x.com/2020/05/12/YNhxfS.png" alt="RAM访问控制"></p></blockquote><h3 id="添加用户组"><a href="#添加用户组" class="headerlink" title="添加用户组"></a>添加用户组</h3><blockquote><p>选择组群管理–&gt;新建组群，填写相应的信息，确定即可</p></blockquote><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><blockquote><p>用户–&gt;创建用户–&gt;输入相关信息，确定即可<br><img src="https://s1.ax1x.com/2020/06/18/Nn3UyQ.jpg" alt="添加用户"></p></blockquote><h3 id="得到Accesskey-id和secret"><a href="#得到Accesskey-id和secret" class="headerlink" title="得到Accesskey(id和secret)"></a>得到Accesskey(id和secret)</h3><blockquote><p><strong>添加了用户以后会显示，一定要保存一下，关掉页面就不显示了</strong> </p></blockquote><h3 id="添加组成员"><a href="#添加组成员" class="headerlink" title="添加组成员"></a>添加组成员</h3><blockquote><p>把刚创建的用户放入用户组中，类似于Linux系统的组和用户的关系</p></blockquote><h3 id="添加组权限"><a href="#添加组权限" class="headerlink" title="添加组权限"></a>添加组权限</h3><blockquote><p>添加权限–&gt;系统策略sms–&gt;管理短信服务–&gt;确定即可<br><img src="https://s1.ax1x.com/2020/06/18/Nn3CL9.jpg" alt="添加权限"></p></blockquote><h2 id="开通阿里云短信服务"><a href="#开通阿里云短信服务" class="headerlink" title="开通阿里云短信服务"></a>开通阿里云短信服务</h2><p>认识一下👇<br><img src="https://s1.ax1x.com/2020/06/18/NnYFXD.jpg" alt="模板细分介绍"></p><h3 id="打开阿里云短信控制面板"><a href="#打开阿里云短信控制面板" class="headerlink" title="打开阿里云短信控制面板"></a>打开阿里云短信控制面板</h3><blockquote><p><a href="https://dysms.console.aliyun.com/dysms.htm?spm=5176.12818093.nav-right.1.488716d0MlrfNE#/overview">https://dysms.console.aliyun.com/dysms.htm?spm=5176.12818093.nav-right.1.488716d0MlrfNE#/overview</a></p></blockquote><h3 id="设置签名"><a href="#设置签名" class="headerlink" title="设置签名"></a>设置签名</h3><blockquote><p>选择验证码按钮，一个人最多拥有一个签名。<strong>理由要填写正当，不然不给通过</strong></p></blockquote><h3 id="设置模板"><a href="#设置模板" class="headerlink" title="设置模板"></a>设置模板</h3><blockquote><p>添加模板，按要求填写信息<br><img src="https://s1.ax1x.com/2020/06/18/NnYE0H.jpg" alt="添加模板"><br><strong>申请理由一定要正当，不然不给通过</strong></p></blockquote><h2 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h2><blockquote><p>具体请参考 → <a href="https://help.aliyun.com/product/44282.html?spm=5176.12438469.0.0.170d1cbe8iQbMH">阿里云短信服务api帮助文档</a></p></blockquote><h3 id="新建springboot项目"><a href="#新建springboot项目" class="headerlink" title="新建springboot项目"></a>新建springboot项目</h3><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">  <span class="token comment">&lt;!--导入阿里云短信服务依赖--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aliyun-java-sdk-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--导入fastjson--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.60<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--导入redis--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编写测试代码-1"><a href="#编写测试代码-1" class="headerlink" title="编写测试代码"></a>编写测试代码</h3><p>在test中书写测试代码测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 连接阿里云</span>        <span class="token class-name">DefaultProfile</span> profile <span class="token operator">=</span> <span class="token class-name">DefaultProfile</span><span class="token punctuation">.</span><span class="token function">getProfile</span><span class="token punctuation">(</span><span class="token string">"cn-hangzhou"</span><span class="token punctuation">,</span> <span class="token string">"AccessKeyID"</span><span class="token punctuation">,</span> <span class="token string">"SECRET"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IAcsClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultAcsClient</span><span class="token punctuation">(</span>profile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 构建请求</span>        <span class="token class-name">CommonRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setSysMethod</span><span class="token punctuation">(</span><span class="token class-name">MethodType</span><span class="token punctuation">.</span>POST<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setSysDomain</span><span class="token punctuation">(</span><span class="token string">"dysmsapi.aliyuncs.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不要动</span>        request<span class="token punctuation">.</span><span class="token function">setSysVersion</span><span class="token punctuation">(</span><span class="token string">"2017-05-25"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不要动</span>        request<span class="token punctuation">.</span><span class="token function">setSysAction</span><span class="token punctuation">(</span><span class="token string">"SendSms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 事件名称</span>        <span class="token comment">// 自定义参数(手机号,验证码,签名,模板)</span>        request<span class="token punctuation">.</span><span class="token function">putQueryParameter</span><span class="token punctuation">(</span><span class="token string">"PhoneNumbers"</span><span class="token punctuation">,</span> <span class="token string">"接收短信的手机号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">putQueryParameter</span><span class="token punctuation">(</span><span class="token string">"SignName"</span><span class="token punctuation">,</span> <span class="token string">"你申请的签名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">putQueryParameter</span><span class="token punctuation">(</span><span class="token string">"TemplateCode"</span><span class="token punctuation">,</span> <span class="token string">"你申请的模板CODE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 构建一个短信验证码，作为测试</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span><span class="token number">2233</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">putQueryParameter</span><span class="token punctuation">(</span><span class="token string">"TemplateParam"</span><span class="token punctuation">,</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 发送客户端</span>            <span class="token class-name">CommonResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getCommonResponse</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果图：<br><img src="https://s1.ax1x.com/2020/06/18/Nng3uj.jpg" alt="发送成功"></p><h2 id="编写可复用的微服务接口"><a href="#编写可复用的微服务接口" class="headerlink" title="编写可复用的微服务接口"></a>编写可复用的微服务接口</h2><p>编写接口方便以后直接整合到需要的项目中</p><h3 id="编写application-properties"><a href="#编写application-properties" class="headerlink" title="编写application.properties"></a>编写application.properties</h3><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8080</span><span class="token comment"># 设置redis</span><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">localhost</span><span class="token attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编写service层接口"><a href="#编写service层接口" class="headerlink" title="编写service层接口"></a>编写service层接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 短信发送功能    * @param phoneNum 手机号    * @param signName 签名    * @param templateCode 模板编号code    * @param code 验证码    * @return boolean    */</span>   <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> phoneNum<span class="token punctuation">,</span><span class="token class-name">String</span> signName<span class="token punctuation">,</span> <span class="token class-name">String</span> templateCode<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> code<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编写serviceImpl层实现方法"><a href="#编写serviceImpl层实现方法" class="headerlink" title="编写serviceImpl层实现方法"></a>编写serviceImpl层实现方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> phoneNum<span class="token punctuation">,</span><span class="token class-name">String</span> signName<span class="token punctuation">,</span> <span class="token class-name">String</span> templateCode<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 连接阿里云</span>        <span class="token class-name">DefaultProfile</span> profile <span class="token operator">=</span> <span class="token class-name">DefaultProfile</span><span class="token punctuation">.</span><span class="token function">getProfile</span><span class="token punctuation">(</span><span class="token string">"cn-hangzhou"</span><span class="token punctuation">,</span> <span class="token class-name">SmsConstant</span><span class="token punctuation">.</span>ACCESSKEYID<span class="token punctuation">,</span> <span class="token class-name">SmsConstant</span><span class="token punctuation">.</span>SECRET<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IAcsClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultAcsClient</span><span class="token punctuation">(</span>profile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 构建请求</span>        <span class="token class-name">CommonRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setSysMethod</span><span class="token punctuation">(</span><span class="token class-name">MethodType</span><span class="token punctuation">.</span>POST<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setSysDomain</span><span class="token punctuation">(</span><span class="token string">"dysmsapi.aliyuncs.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不要动</span>        request<span class="token punctuation">.</span><span class="token function">setSysVersion</span><span class="token punctuation">(</span><span class="token string">"2017-05-25"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不要动</span>        request<span class="token punctuation">.</span><span class="token function">setSysAction</span><span class="token punctuation">(</span><span class="token string">"SendSms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 事件名称</span>        <span class="token comment">// 自定义参数(手机号,验证码,签名,模板)</span>        request<span class="token punctuation">.</span><span class="token function">putQueryParameter</span><span class="token punctuation">(</span><span class="token string">"PhoneNumbers"</span><span class="token punctuation">,</span> phoneNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">putQueryParameter</span><span class="token punctuation">(</span><span class="token string">"SignName"</span><span class="token punctuation">,</span> signName<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">putQueryParameter</span><span class="token punctuation">(</span><span class="token string">"TemplateCode"</span><span class="token punctuation">,</span> templateCode<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">putQueryParameter</span><span class="token punctuation">(</span><span class="token string">"TemplateParam"</span><span class="token punctuation">,</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 发送客户端</span>            <span class="token class-name">CommonResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getCommonResponse</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">getHttpResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编写controller层对外部的接口"><a href="#编写controller层对外部的接口" class="headerlink" title="编写controller层对外部的接口"></a>编写controller层对外部的接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>   <span class="token keyword">private</span> <span class="token class-name">SendSms</span> sendSms<span class="token punctuation">;</span>   <span class="token annotation punctuation">@Autowired</span>   <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> redisTemplate<span class="token punctuation">;</span>   <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/send/&#123;phone&#125;"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> phone<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">// 获取redis中的缓存code判断有没有过期</span>       <span class="token class-name">String</span> code <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token comment">// 验证码还没有过期</span>           <span class="token keyword">return</span> phone<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>code<span class="token operator">+</span><span class="token string">"已经存在，还没有过期"</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">// 生成验证码，并存储在redis中</span>       code <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span>param <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       param<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">boolean</span> send <span class="token operator">=</span> sendSms<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>phone<span class="token punctuation">,</span> <span class="token class-name">SmsConstant</span><span class="token punctuation">.</span>SIGNNAME<span class="token punctuation">,</span> <span class="token class-name">SmsConstant</span><span class="token punctuation">.</span>TEMPLATECODE<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>send<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>phone<span class="token punctuation">,</span>code<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> phone<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>code<span class="token operator">+</span><span class="token string">"发送成功"</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token string">"发送失败"</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编写常量类"><a href="#编写常量类" class="headerlink" title="编写常量类"></a>编写常量类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> SIGNNAME <span class="token operator">=</span> <span class="token string">"你申请的签名"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TEMPLATECODE <span class="token operator">=</span> <span class="token string">"你申请的模板CODE"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ACCESSKEYID <span class="token operator">=</span> <span class="token string">"你的accesskeyID"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> SECRET <span class="token operator">=</span> <span class="token string">"你的secret"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动项目，访问接口。例如：localhost:8080/send/手机号<br><img src="https://s1.ax1x.com/2020/06/18/Nn22es.jpg" alt="发送成功"><br>出现这个就证明发送成功啦！</p>]]></content>
      
      
      <categories>
          
          <category> 阿里云 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云 </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github博客迁移到gitee</title>
      <link href="2020/06/18/github-bo-ke-qian-yi-dao-gitee/"/>
      <url>2020/06/18/github-bo-ke-qian-yi-dao-gitee/</url>
      
        <content type="html"><![CDATA[<h1 id="blog迁移Gitee"><a href="#blog迁移Gitee" class="headerlink" title="blog迁移Gitee"></a>blog迁移Gitee</h1><p>ps:本篇博客可以实现GitHub和gitee双向访问，我们只需写文章之后用hexo发布到GitHub仓库，再去gitee上同步一下即可。用gitee可以更快速的访问我们的博客</p><h2 id="在Gitee用GitHub的链接建立仓库"><a href="#在Gitee用GitHub的链接建立仓库" class="headerlink" title="在Gitee用GitHub的链接建立仓库"></a>在Gitee用GitHub的链接建立仓库</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>语言必须选择js，仓库必须公开<br><img src="https://s1.ax1x.com/2020/06/18/Nevbc9.png" alt="创建前的设置"></p><h3 id="打开Gitee-Pages"><a href="#打开Gitee-Pages" class="headerlink" title="打开Gitee Pages"></a>打开Gitee Pages</h3><p><img src="https://s1.ax1x.com/2020/06/18/NexeN8.png" alt="打开gitee pages功能"></p><h3 id="启动Gitee-Pages项目"><a href="#启动Gitee-Pages项目" class="headerlink" title="启动Gitee Pages项目"></a>启动Gitee Pages项目</h3><p>部署分支一般是master，点上强制使用https即可。<br><img src="https://i.loli.net/2019/07/18/5d302f3d46d7b67296.png" alt="设置与启动"></p><p>成功之后点击显示的路径就能访问自己的blog了</p><h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><h3 id="进入页面样式无法正常加载"><a href="#进入页面样式无法正常加载" class="headerlink" title="进入页面样式无法正常加载"></a>进入页面样式无法正常加载</h3><p><img src="https://i.loli.net/2019/07/18/5d302fee7596d45273.png" alt="样式无法加载"><br><strong>原因是由于路径的问题，无法正确加载样式，我们只需要将链接后的二级目录去掉就好了。</strong>点击管理，将仓库的路径设置为与用户名一样即可。</p><p><img src="https://s1.ax1x.com/2020/06/18/NmpQjH.png" alt="解决方案"></p><p>然后就能愉快的访问了~~</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> Gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdbc和debug</title>
      <link href="2020/05/30/jdbc-he-debug/"/>
      <url>2020/05/30/jdbc-he-debug/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>JDBC API是一个Java API，可以访问任何类型表列数据，特别是存储在关系数据库中的数据。JDBC代表Java数据库连接。相当于一个中间商。</p></blockquote><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1、加载驱动"><a href="#1、加载驱动" class="headerlink" title="1、加载驱动"></a>1、加载驱动</h3><h4 id="1-1、导包"><a href="#1-1、导包" class="headerlink" title="1.1、导包"></a>1.1、导包</h4><p>导入相关的数据库jar包</p><h4 id="1-2、-加载驱动"><a href="#1-2、-加载驱动" class="headerlink" title="1.2、 加载驱动"></a>1.2、 加载驱动</h4><p>这一步相当于你准备打开了手机</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>yourDriverName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、获得连接"><a href="#2、获得连接" class="headerlink" title="2、获得连接"></a>2、获得连接</h3><p>这一步相当于你打开了美团外卖</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、书写sql"><a href="#3、书写sql" class="headerlink" title="3、书写sql"></a>3、书写sql</h3><p>这一步相当于你点了要吃的东西</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"select * from student"</span><span class="token punctuation">;</span><span class="token comment">// 查找</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、准备发起对话"><a href="#4、准备发起对话" class="headerlink" title="4、准备发起对话"></a>4、准备发起对话</h3><p>相当于你下单了，外卖小哥接到了你的单子</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5、执行操作并接收结果"><a href="#5、执行操作并接收结果" class="headerlink" title="5、执行操作并接收结果"></a>5、执行操作并接收结果</h3><p>相当于外卖小哥去饭馆买了饭给你送过来，你要去拿</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*情况一：执行查询操作的时候  要调用的方法是executeQuery()，其返回值是ResultSet类型*/</span><span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这时候就需要遍历rs，进行下一步操作（直接输出或者放到对象里边返回）</span><span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这里进行业务代码的书写</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"Sname"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"Sage"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*情况二：执行删除，增加，修改操作的时候，调用方法execute()或者executeUpdate()区别:executeUpdate() 返回的是受影响的行数execute() 执行成功返回false*/</span><span class="token keyword">boolean</span> execute <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回执行成功了没有</span><span class="token comment">// 或者</span><span class="token keyword">int</span> executeUpdate <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回执行的行数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>我们发现用上面的方法写业务的时候会出现大量代码冗余的情况，所以我们自己封装一下，可以减少很多冗余</p><h3 id="1、书写配置文件"><a href="#1、书写配置文件" class="headerlink" title="1、书写配置文件"></a>1、书写配置文件</h3><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver #驱动名</span><span class="token attr-name">jdbcUrl</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8 #固定格式，只需要修改地址和数据库名以及后面的参数</span><span class="token attr-name">username</span><span class="token punctuation">=</span><span class="token attr-value">root #用户名</span><span class="token attr-name">userpassword</span><span class="token punctuation">=</span><span class="token attr-value">root #密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、创建JdbcUtil类"><a href="#2、创建JdbcUtil类" class="headerlink" title="2、创建JdbcUtil类"></a>2、创建JdbcUtil类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DriverManager</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Statement</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ResourceBundle</span><span class="token punctuation">;</span><span class="token comment">/* * jdbc工具类 * @author Zhy * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCUtil</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> driver<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> jdbcUrl<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> userpassword<span class="token punctuation">;</span><span class="token keyword">static</span><span class="token punctuation">&#123;</span><span class="token comment">//读取Properties文件</span><span class="token class-name">ResourceBundle</span> bundle <span class="token operator">=</span> <span class="token class-name">ResourceBundle</span><span class="token punctuation">.</span><span class="token function">getBundle</span><span class="token punctuation">(</span><span class="token string">"jdbc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>driver <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jdbcUrl<span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"jdbcUrl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>username <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userpassword <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"userpassword"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//获取Connection对象</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span> conn <span class="token operator">=</span><span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>jdbcUrl<span class="token punctuation">,</span> username<span class="token punctuation">,</span> userpassword<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> conn<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//关闭Statement</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closeStatement</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> state<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>state <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>state<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//关闭Connection</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closeConnection</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> conn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//关闭资源</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closeResource</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> state<span class="token punctuation">,</span><span class="token class-name">Connection</span> conn<span class="token punctuation">,</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">closeStatement</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">closeConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">closeResultSet</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//关闭ResultSet连接</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closeResultSet</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>rs <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//事务回滚</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> conn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>conn<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> conn<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>conn<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * 测试连接Connection */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Connection</span> con <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>con <span class="token operator">=</span> <span class="token class-name">JDBCUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、书写代码"><a href="#3、书写代码" class="headerlink" title="3、书写代码"></a>3、书写代码</h3><p>一个简单的例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 调用工具类获取连接</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">JDBCUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//书写sql</span><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from school limit 0,10"</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//准备开始对话</span><span class="token class-name">PreparedStatement</span> prepareStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//接收结果</span><span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> prepareStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//遍历结果集，写业务代码</span><span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//这里写业务代码</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="DeBug"><a href="#DeBug" class="headerlink" title="DeBug"></a>DeBug</h1><blockquote><p>参考链接:<a href="https://blog.csdn.net/qq_33339121/article/details/78536185">https://blog.csdn.net/qq_33339121/article/details/78536185</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习</title>
      <link href="2020/05/16/vue-xue-xi/"/>
      <url>2020/05/16/vue-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue实战"><a href="#Vue实战" class="headerlink" title="Vue实战"></a>Vue实战</h1><h2 id="1-Vue-引言"><a href="#1-Vue-引言" class="headerlink" title="1. Vue 引言"></a>1. Vue 引言</h2><blockquote><p><code>渐进式</code> JavaScript 框架   –摘自官网</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 渐进式</span>   <span class="token list punctuation">1.</span> 易用  html css javascript   <span class="token list punctuation">2.</span> 高效  开发前端页面 非常高效    <span class="token list punctuation">3.</span> 灵活  开发灵活 多样性<span class="token title important"><span class="token punctuation">#</span> 总结</span>Vue 是一个javascript 框架<span class="token title important"><span class="token punctuation">#</span> 后端服务端开发人员: </span>Vue 渐进式javascript框架: 让我们通过操作很少的DOM,甚至不需要操作页面中任何DOM元素,就很容易的完成数据和视图绑定  双向绑定 MVVM  <span class="token code keyword">注意: 日后在使用Vue过程中页面中不要在引入Jquery框架htmlcss--->javascript ----->jquery---->angularjs -----> Vue</span>  <span class="token title important"><span class="token punctuation">#</span> Vue 作者</span>  尤雨溪   国内的    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2-Vue入门"><a href="#2-Vue入门" class="headerlink" title="2. Vue入门"></a>2. Vue入门</h2><h3 id="2-1-下载Vuejs"><a href="#2-1-下载Vuejs" class="headerlink" title="2.1    下载Vuejs"></a>2.1    下载Vuejs</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//开发版本:</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 开发环境版本，包含了有帮助的命令行警告 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment">//生产版本:</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 生产环境版本，优化了尺寸和速度 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/vue"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-Vue第一个入门应用"><a href="#2-2-Vue第一个入门应用" class="headerlink" title="2.2 Vue第一个入门应用"></a>2.2 Vue第一个入门应用</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       &#123;&#123; msg &#125;&#125;  &#123;&#123;username&#125;&#125; &#123;&#123;pwd&#125;&#125;       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>           &#123;&#123; username &#125;&#125;           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>&#123;&#123; msg &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--引入vue.js--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">       <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>           el<span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>  <span class="token comment">//element 用来给Vue实例定义一个作用范围</span>           data<span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token comment">//用来给Vue实例定义一些相关数据</span>               msg<span class="token operator">:</span><span class="token string">"百知欢迎你,期待你的加入!"</span><span class="token punctuation">,</span>               username<span class="token operator">:</span><span class="token string">"hello Vue!"</span><span class="token punctuation">,</span>               pwd <span class="token operator">:</span><span class="token string">"12345"</span><span class="token punctuation">,</span>           <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 总结:</span>1.vue实例(对象)中el属性: 代表Vue的作用范围  日后在Vue的作用范围内都可以使用Vue的语法2.vue实例(对象)中data属性: 用来给Vue实例绑定一些相关数据, 绑定的数据可以通过&#123;&#123;变量名&#125;&#125;在Vue作用范围内取出3.在使用&#123;&#123;&#125;&#125;进行获取data中数据时,可以在&#123;&#123;&#125;&#125;中书写表达式,运算符,调用相关方法,以及逻辑运算等4.el属性中可以书写任意的CSS选择器[jquery选择器],但是在使用Vue开发是推荐使用 id选择器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="3-v-text和v-html"><a href="#3-v-text和v-html" class="headerlink" title="3. v-text和v-html"></a>3. v-text和v-html</h2><h3 id="3-1-v-text"><a href="#3-1-v-text" class="headerlink" title="3.1 v-text"></a>3.1 v-text</h3><blockquote><p><code>v-text</code>:用来获取data中数据将数据以文本的形式渲染到指定标签内部             类似于javascript 中 innerText</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token punctuation">></span></span>&#123;&#123; message &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--引入vue.js--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          el<span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>          data<span class="token operator">:</span><span class="token punctuation">&#123;</span>              message<span class="token operator">:</span><span class="token string">"百知欢迎您"</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 总结</span>1.&#123;&#123;&#125;&#125;(插值表达式)和v-text获取数据的区别在于 a.使用v-text取值会将标签中原有的数据覆盖 使用插值表达式的形式不会覆盖标签原有的数据b.使用v-text可以避免在网络环境较差的情况下出现插值闪烁<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-v-html"><a href="#3-2-v-html" class="headerlink" title="3.2 v-html"></a>3.2 v-html</h3><blockquote><p><code>v-html</code>:用来获取data中数据将数据中含有的html标签先解析在渲染到指定标签的内部  类似于javascript中 innerHTML</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&#123;&#123;message&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>xxxxxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--引入vue.js--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            el<span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>            data<span class="token operator">:</span><span class="token punctuation">&#123;</span>                message<span class="token operator">:</span><span class="token string">"&lt;a href=''>百知欢迎您&lt;/a>"</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="4-vue中事件绑定-v-on"><a href="#4-vue中事件绑定-v-on" class="headerlink" title="4.vue中事件绑定(v-on)"></a>4.vue中事件绑定(v-on)</h2><h3 id="4-1-绑定事件基本语法"><a href="#4-1-绑定事件基本语法" class="headerlink" title="4.1 绑定事件基本语法"></a>4.1 绑定事件基本语法</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;message&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>年龄:&#123;&#123; age &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>点我改变年龄<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--引入vue.js--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          el<span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>          data<span class="token operator">:</span><span class="token punctuation">&#123;</span>              message<span class="token operator">:</span><span class="token string">"hello 欢迎来到百知课堂!"</span><span class="token punctuation">,</span>              age<span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token comment">//methods 用来定义vue中时间</span>              <span class="token function-variable function">changeage</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'点击触发'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 总结:</span>事件  事件源:发生事件dom元素  事件: 发生特定的动作  click....  监听器  发生特定动作之后的事件处理程序 通常是js中函数1.在vue中绑定事件是通过v-on指令来完成的 v-on:事件名 如  v-on:click2.在v-on:事件名的赋值语句中是当前时间触发调用的函数名3.在vue中事件的函数统一定义在Vue实例的methods属性中4.在vue定义的事件中this指的就是当前的Vue实例,日后可以在事件中通过使用this获取Vue实例中相关数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-Vue中事件的简化语法"><a href="#4-2-Vue中事件的简化语法" class="headerlink" title="4.2 Vue中事件的简化语法"></a>4.2 Vue中事件的简化语法</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123; age &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>通过v-on事件修改年龄每次+1<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>通过@绑定时间修改年龄每次-1<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>editage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--引入vue.js--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>         el<span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>  <span class="token comment">//element: 用来指定vue作用范围</span>         data<span class="token operator">:</span><span class="token punctuation">&#123;</span>             age<span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//data   : 用来定义vue实例中相关数据</span>         methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>             <span class="token function-variable function">changeage</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                 <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">++</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>             <span class="token function-variable function">editage</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                 <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">--</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>  <span class="token comment">//methods: 用来定义事件的处理函数</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 总结:</span>1.日后在vue中绑定事件时可以通过@符号形式 简化  v-on 的事件绑定<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-3-Vue事件函数两种写法"><a href="#4-3-Vue事件函数两种写法" class="headerlink" title="4.3 Vue事件函数两种写法"></a>4.3 Vue事件函数两种写法</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&#123;&#123;count&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>改变count的值<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changecount<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--引入vue.js--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>         el<span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>         data<span class="token operator">:</span><span class="token punctuation">&#123;</span>             count<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>             <span class="token comment">/*changecount:function()&#123;                 this.count++;             &#125;*/</span>             <span class="token function">changecount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                 <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 总结:</span>1.在Vue中事件定义存在两种写法  一种是 函数名:function()&#123;&#125;  推荐    一种是  函数名()&#123;&#125; 推荐<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-4-Vue事件参数传递"><a href="#4-4-Vue事件参数传递" class="headerlink" title="4.4 Vue事件参数传递"></a>4.4 Vue事件参数传递</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&#123;&#123;count&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>改变count为指定的值<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changecount(23,<span class="token punctuation">'</span>xiaohei<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--引入vue.js--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>         el<span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>         data<span class="token operator">:</span><span class="token punctuation">&#123;</span>             count<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>             <span class="token comment">//定义changecount</span>             <span class="token function">changecount</span><span class="token punctuation">(</span><span class="token parameter">count<span class="token punctuation">,</span>name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                 <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span>                 <span class="token function">alert</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 总结:</span>1.在使用事件时,可以直接在事件调用出给事件进行参数传递,在事件定义出通过定义对应变量接收传递的参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="5-v-show-v-if-v-bind"><a href="#5-v-show-v-if-v-bind" class="headerlink" title="5.v-show v-if v-bind"></a>5.v-show v-if v-bind</h2><h3 id="5-1-v-show"><a href="#5-1-v-show" class="headerlink" title="5.1 v-show"></a>5.1 v-show</h3><blockquote><p><code>v-show</code>:用来控制页面中某个标签元素是否展示        底层使用控制是 display 属性</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--        v-show: 用来控制标签展示还是隐藏的    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百知教育欢迎你的加入!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百知教育欢迎你的加入这是vue中定义变量true!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>展示隐藏标签<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showmsg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--引入vue.js--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token operator">:</span><span class="token punctuation">&#123;</span>            show<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token comment">//定义时间</span>            <span class="token function">showmsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">this</span><span class="token punctuation">.</span>show <span class="token operator">=</span>  <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>show<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 总结</span>1.在使用v-show时可以直接书写boolean值控制元素展示,也可以通过变量控制标签展示和隐藏2.在v-show中可以通过boolean表达式控制标签的展示课隐藏<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-2-v-if"><a href="#5-2-v-if" class="headerlink" title="5.2 v-if"></a>5.2 v-if</h3><blockquote><p><code>v-if</code>: 用来控制页面元素是否展示                底层控制是DOM元素    操作DOM</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百知教育<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百知教育欢迎你的加入<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--引入vue.js--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token operator">:</span><span class="token punctuation">&#123;</span>            show<span class="token operator">:</span><span class="token boolean">false</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-v-bind"><a href="#5-3-v-bind" class="headerlink" title="5.3 v-bind"></a>5.3 v-bind</h3><blockquote><p><code>v-bind</code>: 用来绑定标签的属性从而通过vue动态修改标签的属性</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;aa:showCss&#125;<span class="token punctuation">"</span></span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>baizhilogo.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--引入vue.js--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token operator">:</span><span class="token punctuation">&#123;</span>            msg<span class="token operator">:</span><span class="token string">"百知教育官方logo!!!!"</span><span class="token punctuation">,</span>            showCss<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-v-bind-简化写法"><a href="#5-4-v-bind-简化写法" class="headerlink" title="5.4 v-bind 简化写法"></a>5.4 v-bind 简化写法</h3><blockquote><p>​    vue为了方便我们日后绑定标签的属性提供了对属性绑定的简化写法如 <code>v-bind:属性名</code> 简化之后 <code>:属性名</code></p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;aa:showCss&#125;<span class="token punctuation">"</span></span>  <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>动态控制加入样式<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addCss<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>改变图片<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeSrc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--引入vue.js--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token operator">:</span><span class="token punctuation">&#123;</span>            msg<span class="token operator">:</span><span class="token string">"百知教育官方logo!!!!"</span><span class="token punctuation">,</span>            showCss<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>            src<span class="token operator">:</span><span class="token string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1583490365568&amp;di=52a82bd614cd4030f97ada9441bb2d0e&amp;imgtype=0&amp;src=http%3A%2F%2Fimg.kanzhun.com%2Fimages%2Flogo%2F20160714%2F820a68f65b4e4a3634085055779c000c.jpg"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function">addCss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>showCss<span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>showCss<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">changeSrc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1925088662,1336364220&amp;fm=26&amp;gp=0.jpg"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="6-v-for的使用"><a href="#6-v-for的使用" class="headerlink" title="6.v-for的使用"></a>6.v-for的使用</h2><blockquote><p><code>v-for</code>: 作用就是用来对对象进行遍历的(数组也是对象的一种)</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&#123;&#123; user.name &#125;&#125; &#123;&#123; user.age &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--       通过v-for遍历对象    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(value,key,index) in user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        &#123;&#123;index&#125;&#125; : &#123;&#123;key&#125;&#125; : &#123;&#123;value&#125;&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--        通过v-for遍历数组    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a,index in arr<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            &#123;&#123;index&#125;&#125; &#123;&#123;a&#125;&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--        通过v-for遍历数组中对象        :key 便于vue内部做重用和排序    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user,index in users<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            &#123;&#123;index+1&#125;&#125; &#123;&#123; user.name &#125;&#125;  === &#123;&#123; user.age &#125;&#125; ==== &#123;&#123; user.content &#125;&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--引入vue--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            user<span class="token operator">:</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"小陈"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            arr<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"北京校区"</span><span class="token punctuation">,</span> <span class="token string">"天津校区"</span><span class="token punctuation">,</span> <span class="token string">"河南校区"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            users<span class="token operator">:</span><span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>id<span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">"xiaochen"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span>content<span class="token operator">:</span><span class="token string">"我曾经也是一个单纯的少年!"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span>id<span class="token operator">:</span><span class="token string">"2"</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">"小白"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span>content<span class="token operator">:</span><span class="token string">"我曾经是一个邪恶的少年!"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 总结</span>1.在使用v-for的时候一定要注意加入:key 用来给vue内部提供重用和排序的唯一key <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="7-v-model-双向绑定"><a href="#7-v-model-双向绑定" class="headerlink" title="7 .v-model 双向绑定"></a>7 .v-model 双向绑定</h2><blockquote><p><code>v-model</code>: 作用用来绑定标签元素的值与vue实例对象中data数据保持一致,从而实现双向的数据绑定机制</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&#123;&#123;message&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>改变Data中值<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--引入vue--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            message<span class="token operator">:</span><span class="token string">""</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">changeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token operator">=</span><span class="token string">'百知教育!'</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 总结</span>1.使用v-model指令可以实现数据的双向绑定 2.所谓双向绑定 表单中数据变化导致vue实例data数据变化   vue实例中data数据的变化导致表单中数据变化 称之为双向绑定<span class="token title important"><span class="token punctuation">#</span> MVVM架构  双向绑定机制</span>Model: 数据  Vue实例中绑定数据<span class="token code keyword">VM:   ViewModel  监听器</span><span class="token code keyword">View:  页面  页面展示的数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="8-事件修饰符"><a href="#8-事件修饰符" class="headerlink" title="8. 事件修饰符"></a>8. 事件修饰符</h2><blockquote><p><code>修饰符</code>: 作用用来和事件连用,用来决定事件触发条件或者是阻止事件的触发机制</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.常用的事件修饰符</span>.stop.prevent.capture.self.once.passive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-1-stop事件修饰符"><a href="#8-1-stop事件修饰符" class="headerlink" title="8.1 stop事件修饰符"></a>8.1 stop事件修饰符</h3><blockquote><p>用来阻止事件冒泡</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aa<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>divClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--用来阻止事件冒泡--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span> <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--引入vue--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">btnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'button被点击了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">divClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'div被点击了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-2-prevent-事件修饰符"><a href="#8-2-prevent-事件修饰符" class="headerlink" title="8.2 prevent 事件修饰符"></a>8.2 prevent 事件修饰符</h3><blockquote><p>用来阻止标签的默认行为</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--用来阻止事件的默认行为--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.baizhibest.com/<span class="token punctuation">"</span></span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百知教育<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="8-3-self-事件修饰符"><a href="#8-3-self-事件修饰符" class="headerlink" title="8.3 self 事件修饰符"></a>8.3 self 事件修饰符</h3><blockquote><p>用来针对于当前标签的事件触发     ===========&gt; 只触发自己标签的上特定动作的事件     只关心自己标签上触发的事件 不监听事件冒泡</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--只触发标签自身的事件--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aa<span class="token punctuation">"</span></span> <span class="token attr-name">@click.self</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>divClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--用来阻止事件冒泡--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span> <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>按钮1<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btnClick1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-once-事件修饰符"><a href="#8-4-once-事件修饰符" class="headerlink" title="8.4 once 事件修饰符"></a>8.4 once 事件修饰符</h3><blockquote><p>once 一次 作用:  就是让指定事件只触发一次</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--.prevent : 用来阻止事件的默认行为.once    : 用来只执行一次特定的事件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.baizhibest.com/<span class="token punctuation">"</span></span> <span class="token attr-name">@click.prevent.once</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百知教育<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="9-按键修饰符"><a href="#9-按键修饰符" class="headerlink" title="9. 按键修饰符"></a>9. 按键修饰符</h2><blockquote><p>作用: 用来与键盘中按键事件绑定在一起,用来修饰特定的按键事件的修饰符</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 按键修饰符</span>.enter.tab.delete (捕获“删除”和“退格”键).esc.space.up.down.left.right<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-1-enter-回车键"><a href="#9-1-enter-回车键" class="headerlink" title="9.1 enter 回车键"></a>9.1 enter 回车键</h3><blockquote><p>用来在触发回车按键之后触发的事件</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keyups<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="9-2-tab-键"><a href="#9-2-tab-键" class="headerlink" title="9.2 tab 键"></a>9.2 tab 键</h3><blockquote><p>用来捕获到tab键执行到当前标签是才会触发</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup.tab</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keytabs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="10-Axios-基本使用"><a href="#10-Axios-基本使用" class="headerlink" title="10. Axios 基本使用"></a>10. Axios 基本使用</h2><h3 id="10-1-引言"><a href="#10-1-引言" class="headerlink" title="10.1 引言"></a>10.1 引言</h3><blockquote><p><code>Axios</code> 是一个异步请求技术,核心作用就是用来在页面中发送异步请求,并获取对应数据在页面中渲染       页面局部更新技术  Ajax</p></blockquote><h3 id="10-2-Axios-第一个程序"><a href="#10-2-Axios-第一个程序" class="headerlink" title="10.2 Axios 第一个程序"></a>10.2 Axios 第一个程序</h3><p>中文网站:<a href="https://www.kancloud.cn/yunye/axios/234845">https://www.kancloud.cn/yunye/axios/234845</a></p><p>安装: <a href="https://unpkg.com/axios/dist/axios.min.js">https://unpkg.com/axios/dist/axios.min.js</a></p><h4 id="10-2-1-GET方式的请求"><a href="#10-2-1-GET方式的请求" class="headerlink" title="10.2.1 GET方式的请求"></a>10.2.1 GET方式的请求</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//发送GET方式请求</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8989/user/findAll?name=xiaochen"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-2-2-POST方式请求"><a href="#10-2-2-POST方式请求" class="headerlink" title="10.2.2 POST方式请求"></a>10.2.2 POST方式请求</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//发送POST方式请求</span>  axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8989/user/save"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>      username<span class="token operator">:</span><span class="token string">"xiaochen"</span><span class="token punctuation">,</span>      age<span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span>      email<span class="token operator">:</span><span class="token string">"xiaochen@zparkhr.com"</span><span class="token punctuation">,</span>      phone<span class="token operator">:</span><span class="token number">13260426185</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-2-3-axios并发请求"><a href="#10-2-3-axios并发请求" class="headerlink" title="10.2.3 axios并发请求"></a>10.2.3 axios并发请求</h4><blockquote><p><code>并发请求</code>:  将多个请求在同一时刻发送到后端服务接口,最后在集中处理每个请求的响应结果</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//1.创建一个查询所有请求</span>   <span class="token keyword">function</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8989/user/findAll?name=xiaochen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">//2.创建一个保存的请求</span>   <span class="token keyword">function</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8989/user/save"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>           username<span class="token operator">:</span><span class="token string">"xiaochen"</span><span class="token punctuation">,</span>           age<span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span>           email<span class="token operator">:</span><span class="token string">"xiaochen@zparkhr.com"</span><span class="token punctuation">,</span>           phone<span class="token operator">:</span><span class="token number">13260426185</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">//3.并发执行</span>   axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>       axios<span class="token punctuation">.</span><span class="token function">spread</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res1<span class="token punctuation">,</span>res2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//用来将一组函数的响应结果汇总处理</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res1<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用来发送一组并发请求</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="11-Vue-生命周期"><a href="#11-Vue-生命周期" class="headerlink" title="11. Vue 生命周期"></a>11. Vue 生命周期</h2><blockquote><p><code>生命周期钩子</code>   ====&gt;  <code>生命周期函数</code></p></blockquote><p><img src="Vue%E5%AE%9E%E6%88%98.assets/lifecycle.png" alt="img"></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> Vue生命周期总结</span>1.初始化阶段beforeCreate()&#123; //1.生命周期中第一个函数,该函数在执行时Vue实例仅仅完成了自身事件的绑定和生命周期函数的初始化工作,Vue实例中还没有 Data el methods相关属性            console.log("beforeCreate: "+this.msg);        &#125;,        created()&#123; //2.生命周期中第二个函数,该函数在执行时Vue实例已经初始化了data属性和methods中相关方法            console.log("created: "+this.msg);        &#125;,        beforeMount()&#123;//3.生命周期中第三个函数,该函数在执行时Vue将El中指定作用范围作为模板编译            console.log("beforeMount: "+document.getElementById("sp").innerText);        &#125;,        mounted()&#123;//4.生命周期中第四个函数,该函数在执行过程中,已经将数据渲染到界面中并且已经更新页面            console.log("Mounted: "+document.getElementById("sp").innerText);        &#125;        <span class="token code keyword">2.运行阶段 beforeUpdate()&#123;//5.生命周期中第五个函数,该函数是data中数据发生变化时执行 这个事件执行时仅仅是Vue实例中data数据变化页面显示的依然是原始数据            console.log("beforeUpdate:"+this.msg);            console.log("beforeUpdate:"+document.getElementById("sp").innerText);        &#125;,        updated()&#123;    //6.生命周期中第六个函数,该函数执行时data中数据发生变化,页面中数据也发生了变化  页面中数据已经和data中数据一致            console.log("updated:"+this.msg);            console.log("updated:"+document.getElementById("sp").innerText);        &#125;,        3.销毁阶段 beforeDestory()&#123;//7.生命周期第七个函数,该函数执行时,Vue中所有数据 methods componet 都没销毁</span><span class="token code keyword">        &#125;,        destoryed()&#123; //8.生命周期的第八个函数,该函数执行时,Vue实例彻底销毁</span><span class="token code keyword">        &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="12-Vue中组件-Component"><a href="#12-Vue中组件-Component" class="headerlink" title="12. Vue中组件(Component)"></a>12. Vue中组件(Component)</h2><h3 id="12-1-组件作用"><a href="#12-1-组件作用" class="headerlink" title="12.1 组件作用"></a>12.1 组件作用</h3><p>组件作用: 用来减少Vue实例对象中代码量,日后在使用Vue开发过程中,可以根据 不能业务功能将页面中划分不同的多个组件,然后由多个组件去完成整个页面的布局,便于日后使用Vue进行开发时页面管理,方便开发人员维护。</p><h3 id="12-2-组件使用"><a href="#12-2-组件使用" class="headerlink" title="12.2 组件使用"></a>12.2 组件使用</h3><h4 id="12-2-1-全局组件注册"><a href="#12-2-1-全局组件注册" class="headerlink" title="12.2.1 全局组件注册"></a>12.2.1 全局组件注册</h4><p><code>说明:全局组件注册给Vue实例,日后可以在任意Vue实例的范围内使用该组件</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//1.开发全局组件</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>        template<span class="token operator">:</span><span class="token string">'&lt;div>&lt;h1>用户登录&lt;/h1>&lt;/div>'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.使用全局组件  在Vue实例范围内</span><span class="token operator">&lt;</span>login<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>login<span class="token operator">></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 注意:</span>1.Vue.component用来开发全局组件 参数1: 组件的名称  参数2: 组件配置&#123;&#125;  template:''用来书写组件的html代码  template中必须有且只有一个root元素2.使用时需要在Vue的作用范围内根据组件名使用全局组件3.如果在注册组件过程中使用 驼峰命名组件的方式 在使用组件时 必须将驼峰的所有单词小写加入-线进行使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-2-2-局部组件注册"><a href="#12-2-2-局部组件注册" class="headerlink" title="12.2.2 局部组件注册"></a>12.2.2 局部组件注册</h4><p><code>说明:通过将组件注册给对应Vue实例中一个components属性来完成组件注册,这种方式不会对Vue实例造成累加</code></p><ul><li>第一种开发方式</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//局部组件登录模板声明</span>  <span class="token keyword">let</span> login <span class="token operator">=</span><span class="token punctuation">&#123;</span>   <span class="token comment">//具体局部组件名称</span>      template<span class="token operator">:</span><span class="token string">'&lt;div>&lt;h2>用户登录&lt;/h2>&lt;/div>'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>      data<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      components<span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token comment">//用来注册局部组件</span>          login<span class="token operator">:</span>login  <span class="token comment">//注册局部组件</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//局部组件使用 在Vue实例范围内</span><span class="token operator">&lt;</span>login<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>login<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>第二种开发方式</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//1.声明局部组件模板  template 标签 注意:在Vue实例作用范围外声明</span>  <span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"loginTemplate"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span>用户登录<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token comment">//2.定义变量用来保存模板配置对象</span>    <span class="token keyword">let</span> login <span class="token operator">=</span><span class="token punctuation">&#123;</span>   <span class="token comment">//具体局部组件名称</span>        template<span class="token operator">:</span><span class="token string">'#loginTemplate'</span>  <span class="token comment">//使用自定义template标签选择器即可</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//3.注册组件</span>    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        components<span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token comment">//用来注册局部组件</span>            login<span class="token operator">:</span>login  <span class="token comment">//注册局部组件</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//4.局部组件使用 在Vue实例范围内</span> <span class="token operator">&lt;</span>login<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>login<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-3-Prop的使用"><a href="#12-3-Prop的使用" class="headerlink" title="12.3 Prop的使用"></a>12.3 Prop的使用</h3></li></ul><p><code>作用:props用来给组件传递相应静态数据或者是动态数据的</code></p><h4 id="12-3-1-通过在组件上声明静态数据传递给组件内部"><a href="#12-3-1-通过在组件上声明静态数据传递给组件内部" class="headerlink" title="12.3.1 通过在组件上声明静态数据传递给组件内部"></a>12.3.1 通过在组件上声明静态数据传递给组件内部</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//1.声明组件模板配置对象</span>    <span class="token keyword">let</span> login <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        template<span class="token operator">:</span><span class="token string">"&lt;div>&lt;h1>欢迎:&#123;&#123; userName &#125;&#125; 年龄:&#123;&#123; age &#125;&#125;&lt;/h1>&lt;/div>"</span><span class="token punctuation">,</span>        props<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'userName'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">]</span>  <span class="token comment">//props作用 用来接收使用组件时通过组件标签传递的数据</span>    <span class="token punctuation">&#125;</span><span class="token comment">//2.注册组件</span>    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        components<span class="token operator">:</span><span class="token punctuation">&#123;</span>            login <span class="token comment">//组件注册</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.通过组件完成数据传递</span><span class="token operator">&lt;</span>login user<span class="token operator">-</span>name<span class="token operator">=</span><span class="token string">"小陈"</span> age<span class="token operator">=</span><span class="token string">"23"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>login<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 总结:</span>1.使用组件时可以在组件上定义多个属性以及对应数据2.在组件内部可以使用props数组生命多个定义在组件上的属性名 日后可以在组件中通过&#123;&#123; 属性名 &#125;&#125; 方式获取组件中属性值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="12-3-2-通过在组件上声明动态数据传递给组件内部"><a href="#12-3-2-通过在组件上声明动态数据传递给组件内部" class="headerlink" title="12.3.2 通过在组件上声明动态数据传递给组件内部"></a>12.3.2 通过在组件上声明动态数据传递给组件内部</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//1.声明组件模板对象</span>    <span class="token keyword">const</span> login <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        template<span class="token operator">:</span><span class="token string">'&lt;div>&lt;h2>欢迎: &#123;&#123; name &#125;&#125; 年龄:&#123;&#123; age &#125;&#125;&lt;/h2>&lt;/div>'</span><span class="token punctuation">,</span>        props<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span> <span class="token comment">//2.注册局部组件</span>    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            username<span class="token operator">:</span><span class="token string">"小陈陈"</span><span class="token punctuation">,</span>            age<span class="token operator">:</span><span class="token number">23</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        components<span class="token operator">:</span><span class="token punctuation">&#123;</span>            login <span class="token comment">//注册组件</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.使用组件</span> <span class="token operator">&lt;</span>login <span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"username"</span> <span class="token operator">:</span>age<span class="token operator">=</span><span class="token string">"age"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>login<span class="token operator">></span>  <span class="token comment">//使用v-bind形式将数据绑定Vue实例中data属性,日后data属性发生变化,组件内部数据跟着变化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-3-3-prop的单向数据流"><a href="#12-3-3-prop的单向数据流" class="headerlink" title="12.3.3 prop的单向数据流"></a>12.3.3 prop的单向数据流</h4><p><code>单向数据流:所有的 prop 都使得其父子 prop 之间形成了一个**单向下行绑定**：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。</code></p><blockquote><p>所有的 prop 都使得其父子 prop 之间形成了一个<strong>单向下行绑定</strong>：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。</p><p>额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你<strong>不</strong>应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。—摘自官网</p></blockquote><h3 id="12-4-组件中定义数据和事件使用"><a href="#12-4-组件中定义数据和事件使用" class="headerlink" title="12.4 组件中定义数据和事件使用"></a>12.4 组件中定义数据和事件使用</h3><h5 id="1-组件中定义属于组件的数据"><a href="#1-组件中定义属于组件的数据" class="headerlink" title="1. 组件中定义属于组件的数据"></a>1. 组件中定义属于组件的数据</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//组件声明的配置对象</span>    <span class="token keyword">const</span> login <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        template<span class="token operator">:</span><span class="token string">'&lt;div>&lt;h1>&#123;&#123; msg &#125;&#125; 百知教育&lt;/h1>&lt;ul>&lt;li v-for="item,index in lists">&#123;&#123; index &#125;&#125;&#123;&#123; item &#125;&#125;&lt;/li>&lt;/ul>&lt;/div>'</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//使用data函数方式定义组件的数据   在templatehtml代码中通过插值表达式直接获取</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                msg<span class="token operator">:</span><span class="token string">"hello"</span><span class="token punctuation">,</span>                lists<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'java'</span><span class="token punctuation">,</span><span class="token string">'spring'</span><span class="token punctuation">,</span><span class="token string">'springboot'</span><span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token comment">//组件自己内部数据</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-组件中事件定义"><a href="#2-组件中事件定义" class="headerlink" title="2.组件中事件定义"></a>2.组件中事件定义</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> login<span class="token operator">=</span><span class="token punctuation">&#123;</span>       template<span class="token operator">:</span><span class="token string">'&lt;div>&lt;input type="button" value="点我触发组件中事件" @click="change">&lt;/div>'</span><span class="token punctuation">,</span>       <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>               name<span class="token operator">:</span><span class="token string">'小陈'</span>           <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>       methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>           <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>               <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'触发事件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 总结</span>1.组件中定义事件和直接在Vue中定义事件基本一致 直接在组件内部对应的html代码上加入@事件名=函数名方式即可2.在组件内部使用methods属性用来定义对应的事件函数即可,事件函数中this 指向的是当前组件的实例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="12-5-向子组件中传递事件并在子组件中调用改事件"><a href="#12-5-向子组件中传递事件并在子组件中调用改事件" class="headerlink" title="12.5 向子组件中传递事件并在子组件中调用改事件"></a>12.5 向子组件中传递事件并在子组件中调用改事件</h3><p><code>在子组件中调用传递过来的相关事件必须使用 this.$emit(&#39;函数名&#39;) 方式调用</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//1.声明组件</span>    <span class="token keyword">const</span> login <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        template<span class="token operator">:</span><span class="token string">"&lt;div>&lt;h1>百知教育 &#123;&#123; uname &#125;&#125;&lt;/h1> &lt;input type='button' value='点我' @click='change'>&lt;/div>"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                uname<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>name            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        props<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//调用vue实例中函数</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//调用组件传递过来的其他函数时需要使用 this.$emit('函数名调用')</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>     <span class="token comment">//2.注册组件</span>    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            username<span class="token operator">:</span><span class="token string">"小陈"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//一个事件函数  将这个函数传递给子组件</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Vue 实例中定义函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        components<span class="token operator">:</span><span class="token punctuation">&#123;</span>            login<span class="token punctuation">,</span><span class="token comment">//组件的注册</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.使用组件</span><span class="token operator">&lt;</span>login  @find<span class="token operator">=</span><span class="token string">"findAll"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>login<span class="token operator">></span>    <span class="token comment">//=====> 在组件内部使用  this.$emit('find')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="13-Vue中路由-VueRouter"><a href="#13-Vue中路由-VueRouter" class="headerlink" title="13.Vue中路由(VueRouter)"></a>13.Vue中路由(VueRouter)</h2><h4 id="13-1-路由"><a href="#13-1-路由" class="headerlink" title="13.1 路由"></a>13.1 路由</h4><p><code>路由:根据请求的路径按照一定的路由规则进行请求的转发从而帮助我们实现统一请求的管理</code></p><h4 id="13-2-作用"><a href="#13-2-作用" class="headerlink" title="13.2 作用"></a>13.2 作用</h4><p><code>用来在vue中实现组件之间的动态切换</code></p><h4 id="13-3-使用路由"><a href="#13-3-使用路由" class="headerlink" title="13.3 使用路由"></a>13.3 使用路由</h4><ol><li><h5 id="引入路由"><a href="#引入路由" class="headerlink" title="引入路由"></a>引入路由</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://unpkg.com/vue-router/dist/vue-router.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token comment">//vue 路由js</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><h5 id="创建组件对象"><a href="#创建组件对象" class="headerlink" title="创建组件对象"></a>创建组件对象</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//声明组件模板</span><span class="token keyword">const</span> login <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  template<span class="token operator">:</span><span class="token string">'&lt;h1>登录&lt;/h1>'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> register <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  template<span class="token operator">:</span><span class="token string">'&lt;h1>注册&lt;/h1>'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h5 id="定义路由对象的规则"><a href="#定义路由对象的规则" class="headerlink" title="定义路由对象的规则"></a>定义路由对象的规则</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token comment">//创建路由对象</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  routes<span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/login'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>login<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token comment">//path: 路由的路径  component:路径对应的组件</span>    <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/register'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>register<span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="4"><li><h5 id="将路由对象注册到vue实例"><a href="#将路由对象注册到vue实例" class="headerlink" title="将路由对象注册到vue实例"></a>将路由对象注册到vue实例</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    username<span class="token operator">:</span><span class="token string">"小陈"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  router<span class="token operator">:</span>router   <span class="token comment">//设置路由对象</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="5"><li><h5 id="在页面中显示路由的组件"><a href="#在页面中显示路由的组件" class="headerlink" title="在页面中显示路由的组件"></a>在页面中显示路由的组件</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--显示路由的组件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><h5 id="根据连接切换路由"><a href="#根据连接切换路由" class="headerlink" title="根据连接切换路由"></a>根据连接切换路由</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#/login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#/register<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="13-4-router-link使用"><a href="#13-4-router-link使用" class="headerlink" title="13.4 router-link使用"></a>13.4 router-link使用</h3></li></ol><p><code>作用:用来替换我们在切换路由时使用a标签切换路由</code></p><p><code>好处:就是可以自动给路由路径加入#不需要手动加入</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我要登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/register<span class="token punctuation">"</span></span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 总结:</span>1.router-link 用来替换使用a标签实现路由切换 好处是不需要书写#号直接书写路由路径2.router-link to属性用来书写路由路径   tag属性:用来将router-link渲染成指定的标签<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="13-5-默认路由"><a href="#13-5-默认路由" class="headerlink" title="13.5 默认路由"></a>13.5 默认路由</h3><p><code>作用:用来在第一次进入界面是显示一个默认的组件</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  routes<span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token comment">//&#123; path:'/',component:login&#125;,</span>    <span class="token punctuation">&#123;</span> path<span class="token operator">:</span><span class="token string">'/'</span><span class="token punctuation">,</span>redirect<span class="token operator">:</span><span class="token string">'/login'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//redirect: 用来当访问的是默认路由 "/" 时 跳转到指定的路由展示  推荐使用</span>    <span class="token punctuation">&#123;</span> path<span class="token operator">:</span><span class="token string">'/login'</span><span class="token punctuation">,</span> component<span class="token operator">:</span>login<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> path<span class="token operator">:</span><span class="token string">'/register'</span><span class="token punctuation">,</span> component<span class="token operator">:</span>register<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-6-路由中参数传递"><a href="#13-6-路由中参数传递" class="headerlink" title="13.6 路由中参数传递"></a>13.6 路由中参数传递</h3><ul><li>第一种方式传递参数 传统方式</li></ul><ol><li><p>通过?号形式拼接参数</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/login?id=21&amp;name=zhangsan<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我要登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>组件中获取参数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> login <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  template<span class="token operator">:</span><span class="token string">'&lt;h1>用户登录&lt;/h1>'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"=============>"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token operator">+</span><span class="token string">"======>"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>第二种方式传递参数 restful</li></ul><ol><li><p>通过使用路径方式传递参数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/register/24/张三"</span><span class="token operator">></span>我要注册<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  routes<span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'/register/:id/:name'</span><span class="token punctuation">,</span>component<span class="token operator">:</span>register<span class="token punctuation">&#125;</span>   <span class="token comment">//定义路径中获取对应参数</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p>组件中获取参数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> register <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  template<span class="token operator">:</span><span class="token string">'&lt;h1>用户注册&#123;&#123; $route.params.name &#125;&#125;&lt;/h1>'</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"注册组件中id:   "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-7-嵌套路由"><a href="#13-7-嵌套路由" class="headerlink" title="13.7 嵌套路由"></a>13.7 嵌套路由</h3></li><li><h5 id="声明最外层和内层路由"><a href="#声明最外层和内层路由" class="headerlink" title="声明最外层和内层路由"></a>声明最外层和内层路由</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"product"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span>商品管理<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/product/add"</span><span class="token operator">></span>商品添加<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>        <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/product/edit"</span><span class="token operator">></span>商品编辑<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>        <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token comment">//声明组件模板</span><span class="token keyword">const</span> product<span class="token operator">=</span><span class="token punctuation">&#123;</span>  template<span class="token operator">:</span><span class="token string">'#product'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  template<span class="token operator">:</span><span class="token string">'&lt;h4>商品添加&lt;/h4>'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> edit <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  template<span class="token operator">:</span><span class="token string">'&lt;h4>商品编辑&lt;/h4>'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><h5 id="创建路由对象含有嵌套路由"><a href="#创建路由对象含有嵌套路由" class="headerlink" title="创建路由对象含有嵌套路由"></a>创建路由对象含有嵌套路由</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        routes<span class="token operator">:</span><span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                path<span class="token operator">:</span><span class="token string">'/product'</span><span class="token punctuation">,</span>                component<span class="token operator">:</span>product<span class="token punctuation">,</span>                children<span class="token operator">:</span><span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'add'</span><span class="token punctuation">,</span>component<span class="token operator">:</span> add<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#123;</span>path<span class="token operator">:</span><span class="token string">'edit'</span><span class="token punctuation">,</span>component<span class="token operator">:</span> edit<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="3"><li><h5 id="注册路由对象"><a href="#注册路由对象" class="headerlink" title="注册路由对象"></a>注册路由对象</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    router<span class="token punctuation">,</span><span class="token comment">//定义路由对象</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试路由</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/product<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>商品管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr></li></ol><h2 id="14-Vue-CLI-脚手架"><a href="#14-Vue-CLI-脚手架" class="headerlink" title="14. Vue CLI 脚手架"></a>14. Vue CLI 脚手架</h2><h3 id="14-1-什么是CLI"><a href="#14-1-什么是CLI" class="headerlink" title="14.1 什么是CLI"></a>14.1 什么是CLI</h3><p>命令行界面（英语：command-line interface，缩写：<em>CLI</em>）是在图形用户界面得到普及之前使用最为广泛的用户界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。也有人称之为字符用户界面（CUI）</p><h3 id="14-2-什么是Vue-CLI"><a href="#14-2-什么是Vue-CLI" class="headerlink" title="14.2 什么是Vue CLI"></a>14.2 什么是Vue CLI</h3><p>Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统。使用Vue 脚手架之后我们开发的页面将是一个完整系统(项目)。</p><h3 id="14-3-Vue-CLI优势"><a href="#14-3-Vue-CLI优势" class="headerlink" title="14.3 Vue CLI优势"></a>14.3 Vue CLI优势</h3><ul><li>通过 <code>vue-cli</code> 搭建交互式的项目脚手架。bootstrap css js jquery js     通过执行命令方式下载相关依赖</li><li>通过 <code>@vue/cli</code> + <code>@vue/cli-service-global</code> 快速开始零配置原型开发    vue页面 vuejs  vuerouter        axios(一条命令)</li><li>一个运行时依赖 (<code>@vue/cli-service</code>)，该依赖：<ul><li>可升级；  一条命令</li><li>基于 webpack 构建，并带有合理的默认配置；  webpack  项目打包方式     编译好的项目源码===&gt;部署到服务器上直接使用</li><li>可以通过项目内的配置文件进行配置；               默认配置文件,通过修改默认配置文件达到自己想要的项目环境            </li><li>可以通过插件进行扩展。                                       vue v-charts  elementui </li></ul></li><li>一个丰富的官方插件集合，集成了前端生态中最好的工具。Nodejs(tomcat)  Vue VueRouter webpack yarn</li><li>一套完全图形化的创建和管理 Vue.js 项目的用户界面</li></ul><h3 id="14-4-Vue-CLI安装"><a href="#14-4-Vue-CLI安装" class="headerlink" title="14.4 Vue CLI安装"></a>14.4 Vue CLI安装</h3><h5 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h5><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span>1.下载nodejs</span>http://nodejs.cn/download/windows系统:   .msi  安装包(exe)指定安装位置   .zip(压缩包)直接解压缩指定目录  mac os 系统:   .pkg  安装包格式自动配置环境变量  .tar.gz(压缩包)解压缩安装到指定名<span class="token title important"><span class="token punctuation">#</span>2.配置nodejs环境变量</span>windows系统:1.计算上右键属性---->  高级属性 ---->环境变量 添加如下配置:NODE_HOME=  nodejs安装目录        PATH    = xxxx;%NODE_HOME%    2.macos 系统    推荐使用.pkg安装直接配置node环境 <span class="token title important"><span class="token punctuation">#</span>3.验证nodejs环境是否成功</span>node -v <span class="token title important"><span class="token punctuation">#</span>4.npm介绍</span>node package mangager    nodejs包管理工具       前端主流技术  npm 进行统一管理maven 管理java后端依赖   远程仓库(中心仓库)      阿里云镜像npm   管理前端系统依赖    远程仓库(中心仓库)      配置淘宝镜像<span class="token title important"><span class="token punctuation">#</span>5.配置淘宝镜像</span>  npm config set registry https://registry.npm.taobao.org  npm config get registry<span class="token title important"><span class="token punctuation">#</span>6.配置npm下载依赖位置</span> windows:npm config set cache "D:\nodereps\npm-cache"npm config set prefix "D:\nodereps\npm_global" mac os: npm config set cache "/Users/chenyannan/dev/nodereps"npm config set prefix "/Users/chenyannan/dev/nodereps"<span class="token title important"><span class="token punctuation">#</span>7.验证nodejs环境配置</span>npm config ls<span class="token code keyword">    ; userconfig /Users/chenyannan/.npmrc    cache = "/Users/chenyannan/dev/nodereps"    prefix = "/Users/chenyannan/dev/nodereps"    registry = "https://registry.npm.taobao.org/"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-安装脚手架"><a href="#2-安装脚手架" class="headerlink" title="2.安装脚手架"></a>2.安装脚手架</h5><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span>0.卸载脚手架</span>npm uninstall -g @vue/cli  //卸载3.x版本脚手架npm uninstall -g vue-cli  //卸载2.x版本脚手架<span class="token title important"><span class="token punctuation">#</span>1.Vue Cli官方网站</span>https://cli.vuejs.org/zh/guide/<span class="token title important"><span class="token punctuation">#</span>2.安装vue Cli</span>npm install -g vue-cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-第一个vue脚手架项目"><a href="#3-第一个vue脚手架项目" class="headerlink" title="3.第一个vue脚手架项目"></a>3.第一个vue脚手架项目</h5><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.创建vue脚手架第一个项目</span>vue init webpack 项目名<span class="token title important"><span class="token punctuation">#</span> 2.创建第一个项目</span>hello     ------------->项目名    -build  ------------->用来使用webpack打包使用build依赖    -config ------------->用来做整个项目配置目录    -node_modules  ------>用来管理项目中使用依赖    -src ------>用来书写vue的源代码[重点]    +assets      ------>用来存放静态资源 [重点]      components   ------>用来书写Vue组件 [重点]      router ------>用来配置项目中路由[重点]      App.vue      ------>项目中根组件[重点]      main.js      ------>项目中主入口[重点]    -static        ------>其它静态    -.babelrc      ------> 将es6语法转为es5运行    -.editorconfig ------> 项目编辑配置    -.gitignore    ------> git版本控制忽略文件    -.postcssrc.js ------> 源码相关js    -index.html    ------> 项目主页    -package.json  ------> 类似与pom.xml 依赖管理  jquery 不建议手动修改    -package-lock.json ----> 对package.json加锁    -README.md         ----> 项目说明文件<span class="token title important"><span class="token punctuation">#</span> 3.如何运行在项目的根目录中执行</span>npm start 运行前端系统<span class="token title important"><span class="token punctuation">#</span> 4.如何访问项目</span>http://localhost:8081    <span class="token title important"><span class="token punctuation">#</span> 5.Vue Cli中项目开发方式</span> 注意: 一切皆组件   一个组件中   js代码  html代码  css样式 <span class="token code keyword"> 1. VueCli开发方式是在项目中开发一个一个组件对应一个业务功能模块,日后可以将多个组件组合到一起形成一个前端系统 2. 日后在使用vue Cli进行开发时不再书写html,编写的是一个个组件(组件后缀.vue结尾的文件),日后打包时vue cli会将组件编译成运行的html文件  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-如何开发Vue脚手架"><a href="#4-如何开发Vue脚手架" class="headerlink" title="4.如何开发Vue脚手架"></a>4.如何开发Vue脚手架</h5><p><code>注意:在Vue cli 中一切皆组件</code></p><hr><h2 id="15-在脚手架中使用axios"><a href="#15-在脚手架中使用axios" class="headerlink" title="15.在脚手架中使用axios"></a>15.在脚手架中使用axios</h2><h3 id="15-1-安装axios"><a href="#15-1-安装axios" class="headerlink" title="15.1 安装axios"></a>15.1 安装axios</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.安装axios</span>npm install axios --save-dev<span class="token title important"><span class="token punctuation">#</span> 2.配置main.js中引入axios</span>import axios from 'axios';<span class="token code keyword">Vue.prototype.$http=axios;</span><span class="token title important"><span class="token punctuation">#</span> 3.使用axios</span>在需要发送异步请求的位置:this.$http.get("url").then((res)=>&#123;&#125;) this.$http.post("url").then((res)=>&#123;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="16-Vue-Cli脚手架项目打包和部署"><a href="#16-Vue-Cli脚手架项目打包和部署" class="headerlink" title="16.Vue Cli脚手架项目打包和部署"></a>16.Vue Cli脚手架项目打包和部署</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.在项目根目录中执行如下命令:</span>  vue run build<span class="token code keyword">注意:vue脚手架打包的项目必须在服务器上运行不能直接双击运行</span><span class="token title important"><span class="token punctuation">#</span> 2.打包之后当前项目中变化</span> 在打包之后项目中出现dist目录,dist目录就是vue脚手架项目生产目录或者说是直接部署目录<span class="token title important"><span class="token punctuation">#</span> 3.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot整合Web技术</title>
      <link href="2020/04/26/spring-boot-zheng-he-web-ji-zhu/"/>
      <url>2020/04/26/spring-boot-zheng-he-web-ji-zhu/</url>
      
        <content type="html"><![CDATA[<blockquote><h1 id="SpringBoot-整合Web层技术"><a href="#SpringBoot-整合Web层技术" class="headerlink" title="SpringBoot 整合Web层技术"></a>SpringBoot 整合Web层技术</h1></blockquote><h2 id="一、整合servlet"><a href="#一、整合servlet" class="headerlink" title="一、整合servlet"></a>一、整合servlet</h2><h3 id="1-通过注解扫描完成-Servlet-组件的注册"><a href="#1-通过注解扫描完成-Servlet-组件的注册" class="headerlink" title="1. 通过注解扫描完成 Servlet 组件的注册"></a>1. 通过注解扫描完成 Servlet 组件的注册</h3><h4 id="1-1创建-Servlet"><a href="#1-1创建-Servlet" class="headerlink" title="1.1创建 Servlet"></a>1.1创建 Servlet</h4><blockquote><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&gt;@WebServlet(name &#x3D; &quot;FirstServlet&quot;,urlPatterns &#x3D; &quot;&#x2F;first&quot;)&gt;public class FirstServlet extends HttpServlet &#123;&gt;public void doGet(HttpServletRequest request,HttpServletResponse response)&#123;System.out.println(&quot;First Servlet........&quot;);&gt;&#125;&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="1-2修改启动类-添加注解-ServletComponentScan"><a href="#1-2修改启动类-添加注解-ServletComponentScan" class="headerlink" title="1.2修改启动类(添加注解@ServletComponentScan)"></a>1.2修改启动类(添加注解@ServletComponentScan)</h4><blockquote><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&gt;@SpringBootApplication&gt;@ServletComponentScan&#x2F;&#x2F;在 spring Boot 启动时会扫描@WebServlet注解，并将该类实例化&gt;public class SpringbootwebApplication &#123;public static void main(String[] args) &#123;&gt;SpringApplication.run(SpringbootwebApplication.class,args);&#125;&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="2-通过方法完成-Servlet-组件的注册"><a href="#2-通过方法完成-Servlet-组件的注册" class="headerlink" title="2.通过方法完成 Servlet 组件的注册"></a>2.通过方法完成 Servlet 组件的注册</h3><h4 id="2-1-创建-Servlet"><a href="#2-1-创建-Servlet" class="headerlink" title="2.1 创建 Servlet"></a>2.1 创建 Servlet</h4><blockquote><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&gt;public class SecondServlet extends HttpServlet &#123;public void doGet(HttpServletRequest request,HttpServletResponse response)&#123;System.out.println(&quot;Second Servlet........&quot;);&#125;&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-2-创建-Servlet-配置类"><a href="#2-2-创建-Servlet-配置类" class="headerlink" title="2.2 创建 Servlet 配置类"></a>2.2 创建 Servlet 配置类</h4><blockquote><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&gt;@Configuration&gt;public class ServletConfig &#123;&gt;@Bean&gt;public ServletRegistrationBeangetServletRegistrationBean()&#123;ServletRegistrationBean bean &#x3D; new ServletRegistrationBean(new SecondServlet());bean.addUrlMappings(&quot;&#x2F;second&quot;);return bean;&gt;&#125;&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="2-整合Filter"><a href="#2-整合Filter" class="headerlink" title="2. 整合Filter"></a>2. 整合Filter</h2><h3 id="1-通过注解扫描完成-Filter-组件注册"><a href="#1-通过注解扫描完成-Filter-组件注册" class="headerlink" title="1. 通过注解扫描完成 Filter 组件注册"></a>1. 通过注解扫描完成 Filter 组件注册</h3><h4 id="1-1-创建-Filter"><a href="#1-1-创建-Filter" class="headerlink" title="1.1 创建 Filter"></a>1.1 创建 Filter</h4><blockquote><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&gt;@WebFilter(filterName &#x3D; &quot;FirstFilter&quot;,urlPatterns &#x3D;&quot;&#x2F;first&quot;)&gt;public class FirstFilter implements Filter&#123;@Overridepublic void init(FilterConfig filterConfig) throwsServletException &#123;&#125;@Overridepublic void doFilter(ServletRequest servletRequest,ServletResponse servletResponse, FilterChain filterChain)throws IOException, ServletException &#123;System.out.println(&quot;进入 First Filter&quot;);filterChain.doFilter(servletRequest,servletResponse);System.out.println(&quot;离开 First Filter&quot;);&#125;@Overridepublic void destroy() &#123;&#125;&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="1-2-修改启动类"><a href="#1-2-修改启动类" class="headerlink" title="1.2 修改启动类"></a>1.2 修改启动类</h4><blockquote><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&gt;@SpringBootApplication&gt;@ServletComponentScan&#x2F;&#x2F;在 spring Boot 启动时会扫描@WebServlet,@WebFilter 注解，并将该类实例化&gt;public class SpringbootwebApplication &#123;public static void main(String[] args) &#123;&gt;SpringApplication.run(SpringbootwebApplication.class,args);&#125;&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="2-通过方法完成-Filter-组件注册"><a href="#2-通过方法完成-Filter-组件注册" class="headerlink" title="2.通过方法完成 Filter 组件注册"></a>2.通过方法完成 Filter 组件注册</h3><h4 id="2-1-创建-Filter"><a href="#2-1-创建-Filter" class="headerlink" title="2.1 创建 Filter"></a>2.1 创建 Filter</h4><blockquote><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&gt;public class SecondFilter implements Filter &#123;@Overridepublic void init(FilterConfig filterConfig) throwsServletException &#123;&#125;@Overridepublic void doFilter(ServletRequest servletRequest,ServletResponse servletResponse, FilterChain filterChain)throws IOException, ServletException &#123;System.out.println(&quot;进入 Second Filter&quot;);filterChain.doFilter(servletRequest,servletResponse);System.out.println(&quot;离开 Second Filter&quot;);&#125;@Overridepublic void destroy() &#123;&#125;&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-2-创建-Filter-配置类"><a href="#2-2-创建-Filter-配置类" class="headerlink" title="2.2 创建 Filter 配置类"></a>2.2 创建 Filter 配置类</h4><blockquote><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&gt;@Configuration&gt;public class FilterConfig &#123;@Beanpublic FilterRegistrationBean getFilterRegistrationBean()&#123;FilterRegistrationBean bean &#x3D; new FilterRegistrationBean(new SecondFilter());&#x2F;&#x2F; bean.addUrlPatterns(new String[]&#123;&quot;*.do&quot;,&quot;*.jsp&quot;&#125;);bean.addUrlPatterns(&quot;&#x2F;second&quot;);return bean;&#125;&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="3-整合-Listener"><a href="#3-整合-Listener" class="headerlink" title="3.整合 Listener"></a>3.整合 Listener</h2><h3 id="1-通过注解扫描完成-Listener-组件注册"><a href="#1-通过注解扫描完成-Listener-组件注册" class="headerlink" title="1. 通过注解扫描完成 Listener 组件注册"></a>1. 通过注解扫描完成 Listener 组件注册</h3><h4 id="1-1-编写Listiener"><a href="#1-1-编写Listiener" class="headerlink" title="1.1 编写Listiener"></a>1.1 编写Listiener</h4><blockquote><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&gt;@WebListener&gt;public class FirstListener implements ServletContextListener&#123;public void contextDestroyed(ServletContextEvent event)&#123;&#125;public void contextInitialized(ServletContextEvent event)&#123;System.out.println(&quot;Listener ...Init......&quot;);&#125;&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="1-2-修改启动类-1"><a href="#1-2-修改启动类-1" class="headerlink" title="1.2 修改启动类"></a>1.2 修改启动类</h4><blockquote><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&gt;@SpringBootApplication&gt;@ServletComponentScan&#x2F;&#x2F;在 spring Boot 启动时会扫描@WebServlet,@WebFilter,@WebListener 注解，并将该类实例化&gt;public class SpringbootwebApplication &#123;public static void main(String[] args) &#123;SpringApplication.run(SpringbootwebApplication.class,args);&#125;&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="2-通过方法完成-Listener-组件注册"><a href="#2-通过方法完成-Listener-组件注册" class="headerlink" title="2.通过方法完成 Listener 组件注册"></a>2.通过方法完成 Listener 组件注册</h3><h4 id="2-1-编写-Listener"><a href="#2-1-编写-Listener" class="headerlink" title="2.1 编写 Listener"></a>2.1 编写 Listener</h4><blockquote><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&gt;public class SecondListener implements ServletContextListener &#123;public void contextDestroyed(ServletContextEvent event)&#123;&#125;public void contextInitialized(ServletContextEvent event)&#123;System.out.println(&quot;Second....Listener ...Init......&quot;);&#125;&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-2-创建-Listener-配置类"><a href="#2-2-创建-Listener-配置类" class="headerlink" title="2.2 创建 Listener 配置类"></a>2.2 创建 Listener 配置类</h4><blockquote><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&gt;@Configuration&gt;public class ListenerConfig &#123;@Beanpublic ServletListenerRegistrationBean getServletListenerRegistrationBean()&#123;ServletListenerRegistrationBean bean &#x3D; new ServletListenerRegistrationBean(new SecondListener());return bean;&#125;&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Java框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot整合JDBC</title>
      <link href="2020/04/26/spring-boot-zheng-he-jdbc/"/>
      <url>2020/04/26/spring-boot-zheng-he-jdbc/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot整合JDBC"><a href="#SpringBoot整合JDBC" class="headerlink" title="SpringBoot整合JDBC"></a>SpringBoot整合JDBC</h1><h2 id="1-引入相应的pom-xml文件依赖"><a href="#1-引入相应的pom-xml文件依赖" class="headerlink" title="1.引入相应的pom.xml文件依赖"></a>1.引入相应的pom.xml文件依赖</h2><blockquote><pre class="line-numbers language-xml" data-language="xml"><div class="caption"><span><!--添加jdbc启动器--></span></div><code class="language-xml">><span class="token comment">&lt;!--添加jdbc启动器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>><span class="token comment">&lt;!--添加mysql的驱动--></span>><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="2-配置数据源"><a href="#2-配置数据源" class="headerlink" title="2.配置数据源"></a>2.配置数据源</h2><blockquote></blockquote><h3 id="2-1通过自定义配置文件方式配置数据源信息"><a href="#2-1通过自定义配置文件方式配置数据源信息" class="headerlink" title="2.1通过自定义配置文件方式配置数据源信息"></a>2.1通过自定义配置文件方式配置数据源信息</h3><blockquote><ul><li>添加 Druid 数据源依赖</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">><span class="token comment">&lt;!--Druid 数据源依赖--></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建 Properties 文件</li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">>jdbc.driverClassName</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">>jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span><span class="token attr-name">>jdbc.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">>jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>要注意mysql8.0以后的<code>driverClassName</code>是<code>com.mysql.cj.jdbc.Driver</code></strong></p><ul><li>创建配置类<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&gt;@Configuration&gt;@PropertySource(&quot;classpath:&#x2F;jdbc.properties&quot;) &#x2F;&#x2F;加载指定的Properties 配置文件&gt;public class JdbcConfiguration &#123;&gt;@Value(&quot;$&#123;jdbc.driverClassName&#125;&quot;)&gt;private String driverClassName;&gt;@Value(&quot;$&#123;jdbc.url&#125;&quot;)&gt;private String url;&gt;@Value(&quot;$&#123;jdbc.username&#125;&quot;)&gt;private String username;&gt;@Value(&quot;$&#123;jdbc.password&#125;&quot;)&gt;private String password;&gt;&#x2F;&#x2F; 实例化 Druid&gt;@Bean&gt;public DataSource getDataSource()&#123;&gt;DruidDataSource source &#x3D; new DruidDataSource(); &#x2F;&#x2F; 把属性值赋进去&gt;source.setPassword(this.password);&gt;source.setUsername(this.username);&gt;source.setUrl(this.url);&gt;source.setDriverClassName(this.driverClassName);&gt;return source;&#125;&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></blockquote><h3 id="2-2通过-ConfigurationProperties-注解读取配置信息"><a href="#2-2通过-ConfigurationProperties-注解读取配置信息" class="headerlink" title="2.2通过@ConfigurationProperties 注解读取配置信息"></a>2.2通过@ConfigurationProperties 注解读取配置信息</h3><blockquote><p><font color = red>这种方式只能获取application的配置文件，并且变量名要一样</font></p><ul><li>创建配置信息实体类<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&gt;@ConfigurationProperties(prefix &#x3D; &quot;jdbc&quot;)&#x2F;&#x2F;是 SpringBoot 的注解不能读取其他配置文件，只能读取 SpringBoot 的 application 配置文件&gt;public class JdbcProperties &#123;&gt;private String driverClassName;&gt;private String url;&gt;private String username;&gt;private String password;&gt;public String getDriverClassName() &#123;&gt;return driverClassName;&gt;&#125;&gt;public void setDriverClassName(String driverClassName) &#123;&gt;this.driverClassName &#x3D; driverClassName;&gt;&#125;&gt;public String getUrl() &#123;&gt;return url;&gt;&#125;&gt;public void setUrl(String url) &#123;&gt;this.url &#x3D; url;&gt;&#125;&gt;public String getUsername() &#123;&gt;return username;&gt;&#125;&gt;public void setUsername(String username) &#123;&gt;this.username &#x3D; username;&gt;&#125;&gt;public String getPassword() &#123;&gt;return password;&gt;&#125;&gt;public void setPassword(String password) &#123;&gt;this.password &#x3D; password;&gt;&#125;&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>修改配置类<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&gt;@Configuration&gt;&#x2F;&#x2F;@PropertySource(&quot;classpath:&#x2F;jdbc.properties&quot;) &#x2F;&#x2F;加载指定的 Properties 配置文件&gt;@EnableConfigurationProperties(JdbcProperties.class)&#x2F;&#x2F;指定加载哪个配置信息属性类&gt;public class JdbcConfiguration &#123;&gt;@Bean&gt;public DataSource getDataSource(JdbcProperties&gt;jdbcProperties)&#123;&gt;DruidDataSource source &#x3D; new DruidDataSource();&gt;source.setPassword(jdbcProperties.getPassword());&gt;source.setUsername(jdbcProperties.getUsername());&gt;source.setUrl(jdbcProperties.getUrl());&gt;source.setDriverClassName(jdbcProperties.getDriverClassName());&gt;return source;&gt;&#125;&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></blockquote><h3 id="2-3-ConfigurationProperties-注解的优雅使用方式"><a href="#2-3-ConfigurationProperties-注解的优雅使用方式" class="headerlink" title="2.3 @ConfigurationProperties 注解的优雅使用方式"></a>2.3 @ConfigurationProperties 注解的优雅使用方式</h3><blockquote><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&gt;@Configuration&gt;public class JdbcConfiguration &#123;@Bean@ConfigurationProperties(prefix &#x3D; &quot;jdbc&quot;)&#x2F;&#x2F; 获取application配置文件中以jdbc开头的public DataSource getDataSource()&#123;DruidDataSource source &#x3D; new DruidDataSource();return source;&#125;&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="2-4-通过-Spring-Boot-配置文件配置数据源"><a href="#2-4-通过-Spring-Boot-配置文件配置数据源" class="headerlink" title="2.4 通过 Spring Boot 配置文件配置数据源"></a>2.4 通过 Spring Boot 配置文件配置数据源</h3><blockquote><p>在 Spring Boot1.x 版 本 中 的 spring-boot-starter-jdbc 启 动 器 中 默 认 使 用 的 是<br>org.apache.tomcat.jdbc.pool.DataSource 作为数据源<br>在 Spring Boot2.x 版 本 中 的 spring-boot-starter-jdbc 启 动 器 中 默 认 使 用 的 是<br>com.zaxxer.hikariDataSource 作为数据源</p><ul><li>使用 Spring Boot 默认的 HikariDataSource 数据源<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">>spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span><span class="token attr-name">>spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">>spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">>spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用第三方的 Druid 数据源（添加一个type属性）<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">>spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span><span class="token attr-name">>spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">>spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">>spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">>spring.datasource.type</span><span class="token punctuation">=</span><span class="token attr-value">com.alibaba.druid.pool.DruidDataSource</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thymeleaf 语法讲解</title>
      <link href="2020/04/25/thymeleaf-yu-fa-jiang-jie/"/>
      <url>2020/04/25/thymeleaf-yu-fa-jiang-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><h1 id="Thymeleaf-语法讲解"><a href="#Thymeleaf-语法讲解" class="headerlink" title="Thymeleaf 语法讲解"></a>Thymeleaf 语法讲解</h1></blockquote><h2 id="1-命名空间："><a href="#1-命名空间：" class="headerlink" title="1.命名空间："></a>1.命名空间：</h2><blockquote><p>在html标签后边添加上<code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code>即可<br>如果不添加也无伤大雅，只是会报红</p></blockquote><h2 id="2-字符串与变量输出操作"><a href="#2-字符串与变量输出操作" class="headerlink" title="2.字符串与变量输出操作"></a>2.字符串与变量输出操作</h2><h3 id="2-1-th-text在页面中输出值"><a href="#2-1-th-text在页面中输出值" class="headerlink" title="2.1 th:text在页面中输出值"></a>2.1 th:text在页面中输出值</h3><blockquote><ul><li><code>th:text=&quot;value&quot;</code><br><code>&lt;span th:text=&quot;文本1&quot;&gt;文本&lt;/span&gt;</code></li></ul><p><strong>要注意的是，这种情况<code>th:text</code>中的值会把<code>span</code>标签中的值覆盖掉，显示文本1。</strong></p><ul><li><code>th:text=&quot;$&#123;key&#125;&quot;</code></li></ul><p><strong>Thymeleaf也可以用EL表达式获取controller层发送过来的数据，显示到页面中</strong><br><code>&lt;span th:text=&quot;$&#123;msg&#125;&quot;&gt;&lt;/span&gt;</code></p></blockquote><h2 id="3-字符串操作"><a href="#3-字符串操作" class="headerlink" title="3.字符串操作"></a>3.字符串操作</h2><blockquote><p><font color = red><strong>Thymeleaf 提供了一些内置对象，内置对象可直接在模板中使用。这些对象是以#引用的。</strong></font></p></blockquote><h3 id="3-1使用内置对象的语法"><a href="#3-1使用内置对象的语法" class="headerlink" title="3.1使用内置对象的语法"></a>3.1使用内置对象的语法</h3><blockquote><ul><li>引用内置对象需要使用#</li><li>大部分内置对象的名称都以 s 结尾。如：strings、numbers、dates</li></ul><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">${ #strings.isEmpty(key)}</td><td align="center">判断字符串是否为空，如果为空返回 true，否则返回 false</td></tr><tr><td align="center">${ #strings.contains(msg,’T’)}</td><td align="center">判断字符串是否包含指定的子串，如果包含返回 true，否则返回 false</td></tr><tr><td align="center">${ #strings.startsWith(msg,’a’)}</td><td align="center">判断当前字符串是否以子串开头，如果是返回 true，否则返回 false</td></tr><tr><td align="center">${ #strings.endsWith(msg,’a’)}</td><td align="center">判断当前字符串是否以子串结尾，如果是返回 true，否则返回 false</td></tr><tr><td align="center">${ #strings.length(msg)}</td><td align="center">返回字符串的长度</td></tr><tr><td align="center">${ #strings.indexOf(msg,’h’)}</td><td align="center">查找子串的位置，并返回该子串的下标，如果没找到则返回-1</td></tr><tr><td align="center">${ #strings.substring(msg,2)} ${ #strings.substring(msg,2,5)}</td><td align="center">截取子串，用户与 jdk String 类下 SubString 方法相同</td></tr><tr><td align="center">${ #strings.toUpperCase(msg)} ${ #strings.toLowerCase(msg)}</td><td align="center">字符串转大小写。</td></tr></tbody></table><p><font color = red><strong>字符串操作类似与Java中的字符串操作，很好记忆</strong></font></p></blockquote><h2 id="4-日期格式化处理"><a href="#4-日期格式化处理" class="headerlink" title="4.日期格式化处理"></a>4.日期格式化处理</h2><blockquote><p><strong>这里的key是controller层传过来的值</strong></p><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">${ #dates.format(key)}</td><td align="center">格式化日期，默认的以浏览器默认语言为格式化标准</td></tr><tr><td align="center">${ #dates.format(key,’yyyy/MM/dd’)}</td><td align="center">按照自定义的格式做日期转换</td></tr><tr><td align="center">${ #dates.year(key)} ${ #dates.month(key)} ${ #dates.day(key)}</td><td align="center">Year：取年 Month：取月 Day：取日</td></tr></tbody></table></blockquote><h2 id="5-条件判断"><a href="#5-条件判断" class="headerlink" title="5.条件判断"></a>5.条件判断</h2><h3 id="5-1-th-if"><a href="#5-1-th-if" class="headerlink" title="5.1 th:if"></a>5.1 th:if</h3><h3 id="5-2-th-switch-th-case"><a href="#5-2-th-switch-th-case" class="headerlink" title="5.2 th:switch/th:case"></a>5.2 th:switch/th:case</h3><blockquote><p><strong><code>th:switch / th:case</code> 与 Java 中的 switch 语句等效，有条件地显示匹配的内容。如果有多个匹配结果只选择第一个显示。</strong><br><code>th:case=&quot;*&quot;</code>表示 Java 中 switch 的 default，即没有 case 的值为 true 时则显示 <code>th:case=&quot;*&quot;</code> 的内容。</p></blockquote><h2 id="6-迭代遍历"><a href="#6-迭代遍历" class="headerlink" title="6.迭代遍历"></a>6.迭代遍历</h2><h3 id="6-1-th-each-迭代器，用于循环迭代集合"><a href="#6-1-th-each-迭代器，用于循环迭代集合" class="headerlink" title="6.1 th:each  迭代器，用于循环迭代集合"></a>6.1 th:each  迭代器，用于循环迭代集合</h3><blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--这里的u : $&#123;list&#125;中，u表示每一次遍历获得的对象--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>u : $&#123;list&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;u.name&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;u.age&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;u.sex&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr></blockquote><h3 id="6-2-th-each-状态变量"><a href="#6-2-th-each-状态变量" class="headerlink" title="6.2 th:each 状态变量"></a>6.2 th:each 状态变量</h3><blockquote><p><strong>在遍历的基础上，u的后边加一个参数</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">><span class="token comment">&lt;!--这里的var就是定义了状态变量，用他可以调用相应的方法--></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>u,var : $&#123;list&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;u.name&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;u.age&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;u.sex&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;var.index&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;var.count&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;var.size&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;var.odd&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;var.even&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">index</td><td align="center">当前迭代器的索引 从 0 开始</td></tr><tr><td align="center">count</td><td align="center">当前迭代对象的计数 从 1 开始</td></tr><tr><td align="center">size</td><td align="center">被迭代对象的长度</td></tr><tr><td align="center">odd/even</td><td align="center">当前循环是否是偶数/奇数 从 0 开始</td></tr><tr><td align="center">first</td><td align="center">当前循环的是否是第一条，如果是返回 true 否则返回 false</td></tr><tr><td align="center">last</td><td align="center">当前循环的是否是最后一条，如果是则返回 true 否则返回 false</td></tr></tbody></table></blockquote><h2 id="7-操作域对象"><a href="#7-操作域对象" class="headerlink" title="7.操作域对象"></a>7.操作域对象</h2><blockquote><ul><li><code>HttpServletRequest</code><pre class="line-numbers language-html" data-language="html"><code class="language-html">><span class="token comment">&lt;!--两种方式获取--></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#httpServletRequest.getAttribute(<span class="token punctuation">'</span>req<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#request.getAttribute(<span class="token punctuation">'</span>req<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><code>HttpSession</code><pre class="line-numbers language-html" data-language="html"><code class="language-html">><span class="token comment">&lt;!--两种获取方式--></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;session.ses&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#session.getAttribute(<span class="token punctuation">'</span>ses<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>ServletContext<pre class="line-numbers language-html" data-language="html"><code class="language-html">><span class="token comment">&lt;!--两种获取方式--></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;application.app&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#servletContext.getAttribute(<span class="token punctuation">'</span>app<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></blockquote><h2 id="8-URL-表达式"><a href="#8-URL-表达式" class="headerlink" title="8.URL 表达式"></a>8.URL 表达式</h2><h3 id="8-1-语法"><a href="#8-1-语法" class="headerlink" title="8.1 语法"></a>8.1 语法</h3><blockquote><p><strong>在 Thymeleaf 中 URL 表达式的语法格式为@{}</strong></p></blockquote><h3 id="8-2-绝对路径"><a href="#8-2-绝对路径" class="headerlink" title="8.2 绝对路径"></a>8.2 绝对路径</h3><blockquote><p><code>&lt;a th:href=&quot;@&#123;http://www.baidu.com&#125;&quot;&gt;绝对路径&lt;/a&gt;</code></p></blockquote><h3 id="8-3-相对路径"><a href="#8-3-相对路径" class="headerlink" title="8.3 相对路径"></a>8.3 相对路径</h3><blockquote><ul><li>相对于当前项目的根<br><code>&lt;a th:href=&quot;@&#123;/show&#125;&quot;&gt;相对路径&lt;/a&gt;</code></li><li>相对于服务器路径的根<br><code>&lt;a th:href=&quot;@&#123;~/project2/resourcename&#125;&quot;&gt;相对于服务器的根&lt;/a&gt;</code></li></ul></blockquote><h3 id="8-4-在-URL-中传递参数"><a href="#8-4-在-URL-中传递参数" class="headerlink" title="8.4 在 URL 中传递参数"></a>8.4 在 URL 中传递参数</h3><blockquote><ul><li>在普通格式的 URL 中传递参数<ul><li><code>&lt;a th:href=&quot;@&#123;/show?id=1&amp;name=zhangsan&#125;&quot;&gt;普通 URL 格式传参&lt;/a&gt;</code></li><li><code>&lt;a th:href=&quot;@&#123;/show(id=1,name=zhangsan)&#125;&quot;&gt;普通 URL 格式传参&lt;/a&gt;</code></li><li><code>&lt;a th:href=&quot;@&#123;&#39;/show?id=&#39;+$&#123;id&#125;+&#39;&amp;name=&#39;+$&#123;name&#125;&#125;&quot;&gt;普通URL格式传参&lt;/a&gt;</code><br><font color = red>要注意的是，普通url格式传参与以往的不同，需要把固定的部分用’’拼接起来</font></li><li><code>&lt;a th:href=&quot;@&#123;/show(id=$&#123;id&#125;,name=$&#123;name&#125;)&#125;&quot;&gt;普通 URL 格式传参&lt;/a&gt;</code></li></ul></li><li>在 restful 格式的 URL 中传递参数<ul><li><code>&lt;a th:href=&quot;@&#123;/show/&#123;id&#125;(id=1)&#125;&quot;&gt;restful 格式传参&lt;/a&gt;</code></li><li><code>&lt;a th:href=&quot;@&#123;/show/&#123;id&#125;/&#123;name&#125;(id=1,name=admin)&#125;&quot;&gt;restful格式传参&lt;/a&gt;</code><br><font color = red>以下两种方法可以将restful风格和普通的传参风格结合起来</font></li><li><code>&lt;a th:href=&quot;@&#123;/show/&#123;id&#125;(id=1,name=admin)&#125;&quot;&gt;restful 格式传参&lt;/a&gt;</code></li><li><code>&lt;a th:href=&quot;@&#123;/show/&#123;id&#125;(id=$&#123;id&#125;,name=$&#123;name&#125;)&#125;&quot;&gt;restful格式传参&lt;/a&gt;</code></li></ul></li></ul></blockquote><h2 id="9-在配置文件中配置-Thymeleaf"><a href="#9-在配置文件中配置-Thymeleaf" class="headerlink" title="9.在配置文件中配置 Thymeleaf"></a>9.在配置文件中配置 Thymeleaf</h2><blockquote><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">>spring.thymeleaf.prefix</span><span class="token punctuation">=</span><span class="token attr-value">classpath:/templates/suibian/  #如果html被放在其他文件夹下，可以修改默认的路径前缀</span><span class="token attr-name">>spring.thymeleaf.suffix</span><span class="token punctuation">=</span><span class="token attr-value">.html   #默认后缀是html，所以controller层的return后面不需要加.html</span><span class="token attr-name">>spring.thymeleaf.mode</span><span class="token punctuation">=</span><span class="token attr-value">HTML #配置视图模板类型，如果视图模板使用的</span><span class="token attr-name">>是</span> <span class="token attr-value">html5 需要配置</span><span class="token attr-name">>spring.thymeleaf.encoding</span><span class="token punctuation">=</span><span class="token attr-value">utf-8</span><span class="token attr-name">>spring.thymeleaf.servlet.content-type</span><span class="token punctuation">=</span><span class="token attr-value">text/html #响应类型</span>>#配置页面缓存<span class="token attr-name">>spring.thymeleaf.cache</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Web </tag>
            
            <tag> Thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot整合视图层技术</title>
      <link href="2020/04/25/spring-boot-zheng-he-shi-tu-ceng-ji-zhu/"/>
      <url>2020/04/25/spring-boot-zheng-he-shi-tu-ceng-ji-zhu/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot-整合视图层"><a href="#Spring-Boot-整合视图层" class="headerlink" title="Spring Boot 整合视图层"></a>Spring Boot 整合视图层</h1><h2 id="Spring-Boot-整合-JSP-技术"><a href="#Spring-Boot-整合-JSP-技术" class="headerlink" title="Spring Boot 整合 JSP 技术"></a>Spring Boot 整合 JSP 技术</h2><h3 id="1-修改-POM-文件，添加-JSP-引擎与-JSTL-标签库"><a href="#1-修改-POM-文件，添加-JSP-引擎与-JSTL-标签库" class="headerlink" title="1.修改 POM 文件，添加 JSP 引擎与 JSTL 标签库"></a>1.修改 POM 文件，添加 JSP 引擎与 JSTL 标签库</h3><blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">><span class="token comment">&lt;!--添加 jsp 引擎，SpringBoot 内置的 Tomat 中没有此依赖--></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat.embed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat-embed-jasper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>><span class="token comment">&lt;!--添加 JSTL 坐标依赖--></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="2-创建-webapp-目录"><a href="#2-创建-webapp-目录" class="headerlink" title="2.创建 webapp 目录"></a>2.创建 webapp 目录</h3><blockquote><p><img src="https://s1.ax1x.com/2020/04/25/Js4E1e.png" alt="Js4E1e.png"></p></blockquote><h3 id="3-标记为-web-目录"><a href="#3-标记为-web-目录" class="headerlink" title="3.标记为 web 目录"></a>3.标记为 web 目录</h3><blockquote><p>打开Project Structure，Modules，选择你要改的项目下的Web，在右边Web Source中点击+号，找到项目中的webapp确定就可。<br><img src="https://s1.ax1x.com/2020/04/25/Js5PDs.png" alt="Js5PDs.png"></p></blockquote><h3 id="4-创建-JSP"><a href="#4-创建-JSP" class="headerlink" title="4.创建 JSP"></a>4.创建 JSP</h3><h3 id="5-修改配置文件，配置视图解析器"><a href="#5-修改配置文件，配置视图解析器" class="headerlink" title="5.修改配置文件，配置视图解析器"></a>5.修改配置文件，配置视图解析器</h3><blockquote><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">>spring.mvc.view.prefix</span><span class="token punctuation">=</span><span class="token attr-value">/WEB-INF/jsp/</span><span class="token attr-name">>spring.mvc.view.suffix</span><span class="token punctuation">=</span><span class="token attr-value">.jsp</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h3 id="6-创建-Controller"><a href="#6-创建-Controller" class="headerlink" title="6.创建 Controller"></a>6.创建 Controller</h3><blockquote><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&gt;@Controller&gt;public class PageController &#123;&gt;&#x2F;**&gt;* 页面跳转&gt;*&#x2F;@GetMapping(&quot;&#x2F;&#123;page&#125;&quot;)public String showPage(@PathVariable String page)&#123;return page;&#125;&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果在 IDEA 中项目结构为聚合工程。那么在运行 jsp 是需要指定路径。如果项目结构为独立项目则不需要。</strong><br><img src="https://s1.ax1x.com/2020/04/25/JsI9JK.png" alt="JsI9JK.png"></p></blockquote><h2 id="Spring-Boot-整合-Freemarker"><a href="#Spring-Boot-整合-Freemarker" class="headerlink" title="Spring Boot 整合 Freemarker"></a>Spring Boot 整合 Freemarker</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><blockquote><p>FreeMarker 是一款 模板引擎： 即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。<br>模板编写为FreeMarker Template Language (FTL)。它是简单的，专用的语言， 不是 像PHP那样成熟的编程语言。 那就意味着要准备数据在真实编程语言中来显示，比如数据库查询和业务运算， 之后模板显示已经准备好的数据。在模板中，你可以专注于如何展现数据， 而在模板之外可以专注于要展示什么数据。</p></blockquote><h3 id="2-修改-POM-文件，添加-Freemarker-启动器"><a href="#2-修改-POM-文件，添加-Freemarker-启动器" class="headerlink" title="2.修改 POM 文件，添加 Freemarker 启动器"></a>2.修改 POM 文件，添加 Freemarker 启动器</h3><blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">><span class="token comment">&lt;!--Freemarker 启动器依赖--></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-freemarker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="3-修改配置文件添加后缀"><a href="#3-修改配置文件添加后缀" class="headerlink" title="3. 修改配置文件添加后缀"></a>3. 修改配置文件添加后缀</h3><blockquote><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">>spring.freemarker.suffix</span><span class="token punctuation">=</span><span class="token attr-value">.ftl</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h2 id="Spring-Boot-整合-Thymeleaf"><a href="#Spring-Boot-整合-Thymeleaf" class="headerlink" title="Spring Boot 整合 Thymeleaf"></a>Spring Boot 整合 Thymeleaf</h2><h3 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1.简介"></a>1.简介</h3><blockquote><p>Thymeleaf 的主要目标是将优雅的自然模板带到开发工作流程中，并将 HTML 在浏览器中正确显示，并且可以作为静态原型，让开发团队能更容易地协作。Thymeleaf 能够处理HTML，XML，JavaScript，CSS 甚至纯文本。<br>长期以来,jsp 在视图领域有非常重要的地位,随着时间的变迁,出现了一位新的挑战者:Thymeleaf,Thymeleaf 是原生的,不依赖于标签库.它能够在接受原始 HTML 的地方进行编辑和渲染.因为它没有与Servelet规范耦合,因此Thymeleaf模板能进入jsp所无法涉足的领域。</p></blockquote><h3 id="2-修改-POM-文件，添加-Thymeleaf-启动器依赖"><a href="#2-修改-POM-文件，添加-Thymeleaf-启动器依赖" class="headerlink" title="2.修改 POM 文件，添加 Thymeleaf 启动器依赖"></a>2.修改 POM 文件，添加 Thymeleaf 启动器依赖</h3><blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">><span class="token comment">&lt;!--添加 Thymeleaf 启动器依赖--></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>由于Thymeleaf是用于页面渲染的，我们不可能让别人访问我们还未用数据渲染的页面，所以在地址栏中不能直接输入xxx.html访问，只能通过controller层进行跳转</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Java框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot访问静态资源</title>
      <link href="2020/04/23/springboot-fang-wen-jing-tai-zi-yuan/"/>
      <url>2020/04/23/springboot-fang-wen-jing-tai-zi-yuan/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot访问静态资源"><a href="#SpringBoot访问静态资源" class="headerlink" title="SpringBoot访问静态资源"></a>SpringBoot访问静态资源</h1><blockquote><p>在 SpringBoot 项目中没有我们之前常规 web 开发的 WebContent（WebApp），它只有src 目录。在 src/main/resources 下面有两个文件夹，<code>static</code> 和<code> templates</code>。SpringBoot 默认在<code> static</code>目录中存放静态页面，而 <code>templates</code> 中放动态页面。</p></blockquote><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><h3 id="static-目录"><a href="#static-目录" class="headerlink" title="static 目录"></a>static 目录</h3><blockquote><p>Spring Boot 通过<code> classpath/static</code> 目录访问静态资源。注意存放静态资源的目录名称必须是 <code>static</code>或者<code>public</code>,<code>resources</code></p></blockquote><h3 id="templates-目录"><a href="#templates-目录" class="headerlink" title="templates 目录"></a>templates 目录</h3><blockquote><p>在 Spring Boot 中不推荐使用 jsp 作为视图层技术，而是默认使用 <code>Thymeleaf </code>来做动态页面。Templates 目录这是存放<code>Thymeleaf</code>的页面。</p></blockquote><h2 id="2-静态资源存放其他位置"><a href="#2-静态资源存放其他位置" class="headerlink" title="2.静态资源存放其他位置"></a>2.静态资源存放其他位置</h2><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p><img src="https://s1.ax1x.com/2020/06/26/NsvOzR.png" alt="WebMvcAutoConfiguration"><br>第一个框框是判断用户有没有自定义静态资源路径，如果自定义了就直接返回，不继续往下走了</p><p><code>/webjars/**</code>是一种以maven引入的静态资源，比如jquery</p><p>在maven中添加坐标</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.webjars<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jquery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再看项目目录可以发现他们的关系<br><img src="https://s1.ax1x.com/2020/06/27/Ny4Jxg.png" alt="Ny4Jxg.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> staticPathPattern <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>调用方法获得staticPathPattern，如下<br><img src="https://s1.ax1x.com/2020/06/26/Nsxmef.png" alt="Nsxmef.png"><br>返回<br><img src="https://s1.ax1x.com/2020/06/26/NsxMFg.png" alt="NsxMFg.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> CLASSPATH_RESOURCE_LOCATIONS <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"classpath:/META-INF/resources/"</span><span class="token punctuation">,</span><span class="token string">"classpath:/resources/"</span><span class="token punctuation">,</span> <span class="token string">"classpath:/static/"</span><span class="token punctuation">,</span> <span class="token string">"classpath:/public/"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里可以看到为什么springboot的访问静态资源的位置是这几个了<br><img src="https://s1.ax1x.com/2020/06/26/NsxJO0.png" alt="NsxJO0.png"></p><h3 id="Spring-Boot-访问静态资源的位置"><a href="#Spring-Boot-访问静态资源的位置" class="headerlink" title="Spring Boot 访问静态资源的位置"></a>Spring Boot 访问静态资源的位置</h3><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">classpath</span><span class="token punctuation">:</span><span class="token attr-value">/META‐INF/resources/  # 一般是webjars</span><span class="token attr-name">classpath</span><span class="token punctuation">:</span><span class="token attr-value">/resources/</span><span class="token attr-name">classpath</span><span class="token punctuation">:</span><span class="token attr-value">/static/</span><span class="token attr-name">classpath</span><span class="token punctuation">:</span><span class="token attr-value">/public/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优先级</strong>：resources&gt;static(默认)&gt;public</p><h3 id="自定义静态资源位置"><a href="#自定义静态资源位置" class="headerlink" title="自定义静态资源位置"></a>自定义静态资源位置</h3><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#配置静态资源访问路径</span><span class="token attr-name">spring.resources.static-locations</span><span class="token punctuation">=</span><span class="token attr-value">classpath:/suibian/,lasspath:/static/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="SpringBoot文件上传功能"><a href="#SpringBoot文件上传功能" class="headerlink" title="SpringBoot文件上传功能"></a>SpringBoot文件上传功能</h1><h2 id="上传界面"><a href="#上传界面" class="headerlink" title="上传界面"></a>上传界面</h2><p>上传需要一个表单，最重要的特点是必须是post请求，且<code>enctype=&quot;multipart/form-data&quot;</code></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&lt;form action&#x3D;&quot;&#x2F;fileUploadController&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="编写-Controller"><a href="#编写-Controller" class="headerlink" title="编写 Controller"></a>编写 Controller</h2><p>需要注意的是，要吧<code>MultipartFile name</code>作为参数传入方法中</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">@PostMapping(&quot;&#x2F;fileUploadController&quot;)public String fileUpload(MultipartFile file)throws Exception&#123;&#x2F;&#x2F;输出文件的真实名称System.out.println(file.getOriginalFilename());&#x2F;&#x2F;这一步是把文件保存到某个位置file.transferTo(new File(&quot;c:&#x2F;&quot;+file.getOriginalFilename()));return &quot;OK&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改文件上传大小"><a href="#修改文件上传大小" class="headerlink" title="修改文件上传大小"></a>修改文件上传大小</h2><p>默认限制了上传文件的大小，我们应该去配置文件中修改他</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#配置单个上传文件的大小的限制</span><span class="token attr-name">spring.servlet.multipart.max-file-size</span><span class="token punctuation">=</span><span class="token attr-value">2MB</span><span class="token comment">#配置在一次请求中上传文件的总容量的限制</span><span class="token attr-name">spring.servlet.multipart.max-request-size</span><span class="token punctuation">=</span><span class="token attr-value">20MB</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="JSR303数据校验"><a href="#JSR303数据校验" class="headerlink" title="JSR303数据校验"></a>JSR303数据校验</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>controller层加一个<code>@Validated </code>进行数据校验</p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>JSR-303 是JAVA EE 6 中的一项子规范，叫做Bean Validation，Hibernate Validator 是 Bean Validation 的参考实现 . Hibernate Validator 提供了 JSR 303 规范中所有内置 constraint 的实现，除此之外还有一些附加的 constraint。</p><p><img src="https://upload-images.jianshu.io/upload_images/3145530-8ae74d19e6c65b4c?imageMogr2/auto-orient/strip%7CimageView2/2/w/654/format/webp" alt="JSR303"></p><p> Hibernate Validator 附加的 constraint：<br> <img src="https://upload-images.jianshu.io/upload_images/3145530-10035c6af8e90a7c?imageMogr2/auto-orient/strip%7CimageView2/2/w/432/format/webp" alt="附加"></p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Java框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot核心注解</title>
      <link href="2020/04/23/springboot-he-xin-zhu-jie/"/>
      <url>2020/04/23/springboot-he-xin-zhu-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot核心注解"><a href="#SpringBoot核心注解" class="headerlink" title="SpringBoot核心注解"></a>SpringBoot核心注解</h1><h2 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h2><blockquote><p>是 SpringBoot 的启动类。此注解等同于@Configuration+@EnableAutoConfiguration+@ComponentScan 的组合</p></blockquote><h2 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h2><blockquote><p>@SpringBootConfiguration 注解是@Configuration 注解的派生注解，跟@Configuration注解的功能一致，标注这个类是一个配置类，只不过@SpringBootConfiguration 是 springboot的注解，而@Configuration 是 spring 的注解</p></blockquote><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h2><blockquote><p>通过对 bean 对象的操作替代 spring 中 xml 文件</p></blockquote><h2 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h2><blockquote><p>Spring Boot 自动配置（auto-configuration）：尝试根据你添加的 jar 依赖自动配置你的Spring 应用。是@AutoConfigurationPackage 和@Import(AutoConfigurationImportSelector.class)注解的组合。</p></blockquote><h2 id="AutoConfigurationPackage"><a href="#AutoConfigurationPackage" class="headerlink" title="@AutoConfigurationPackage"></a>@AutoConfigurationPackage</h2><blockquote><p>@AutoConfigurationPackage 注解，自动注入主类下所在包下所有的加了注解的类(@Controller，@Service 等），以及配置类（@Configuration）</p></blockquote><h2 id="Import-AutoConfigurationImportSelector-class"><a href="#Import-AutoConfigurationImportSelector-class" class="headerlink" title="@Import({AutoConfigurationImportSelector.class})"></a>@Import({AutoConfigurationImportSelector.class})</h2><blockquote><p>直接导入普通的类<br>导入实现了 ImportSelector 接口的类<br>导入实现了 ImportBeanDefinitionRegistrar 接口的类</p></blockquote><h2 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h2><blockquote><p>组件扫描，可自动发现和装配一些 Bean。</p></blockquote><h2 id="ConfigurationPropertiesScan"><a href="#ConfigurationPropertiesScan" class="headerlink" title="@ConfigurationPropertiesScan"></a>@ConfigurationPropertiesScan</h2><blockquote><p>@ConfigurationPropertiesScan 扫描配置属性。@EnableConfigurationProperties 注解的作用是使用 @ConfigurationProperties 注解的类生效。</p></blockquote><h2 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h2><blockquote><p>@RestController 相当于@Controller+@ResponseBody 注解<br>如果使用@RestController注解 Controller 中的方法无法返回页面，相当于在方法上面自动 加 了 @ResponseBody 注 解 ， 所 以 <font color=red>没 办 法 跳 转 并 传 输 数 据 到 另 一 个 页 面 </font>， 所 以InternalResourceViewResolver 也不起作用，返回的内容就是 Return 里的内容。</p></blockquote><h3 id="GetMapping"><a href="#GetMapping" class="headerlink" title="@GetMapping"></a>@GetMapping</h3><blockquote><p>@GetMapping 注解是@RequestMapping(method = RequestMethod.GET)的缩写。</p></blockquote><h3 id="PostMapping"><a href="#PostMapping" class="headerlink" title="@PostMapping"></a>@PostMapping</h3><blockquote><p>@PostMapping 注解是@RequestMapping(method = RequestMethod.POST)的缩写。</p></blockquote><h3 id="PutMapping"><a href="#PutMapping" class="headerlink" title="@PutMapping"></a>@PutMapping</h3><blockquote><p>@PutMapping 注解是@RequestMapping(method = RequestMethod.PUT)的缩写。</p></blockquote><h3 id="DeleteMapping"><a href="#DeleteMapping" class="headerlink" title="@DeleteMapping"></a>@DeleteMapping</h3><blockquote><p>@DeleteMapping 注解是@RequestMapping(method = RequestMethod.DELETE)的缩写</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Java框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot简介和框架搭建</title>
      <link href="2020/04/22/springboot-jian-jie-he-kuang-jia-da-jian/"/>
      <url>2020/04/22/springboot-jian-jie-he-kuang-jia-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><h3 id="1-什么是-Spring-Boot"><a href="#1-什么是-Spring-Boot" class="headerlink" title="1 什么是 Spring Boot"></a>1 什么是 Spring Boot</h3><blockquote><p>Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.<br>We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need minimal Spring configuration.</p><p>Spring Boot 是一个框架，一种全新的编程规范，他的产生简化了框架的使用，所谓简化是指简化了 Spring 众多框架中所需的大量且繁琐的配置文件，所以 Spring Boot 是一个服务于框架的框架，服务范围是简化配置文件。所以从本质上来说，Spring Boot 其实就是 Spring框架的另一种表现形式。</p></blockquote><h3 id="2-Spring-Boot-特征"><a href="#2-Spring-Boot-特征" class="headerlink" title="2 Spring Boot 特征"></a>2 Spring Boot 特征</h3><ul><li><p>使用 Spring Boot 可以创建独立的 Spring 应用程序</p></li><li><p>在Spring Boot中直接嵌入了Tomcat、Jetty、Undertow等Web容器，所以在使用SpringBoo做 Web 开发时不需要部署 WAR 文件</p></li><li><p>通过提供自己的启动器(Starter)依赖，简化项目构建配置</p></li><li><p>尽量的自动配置 Spring 和第三方库</p></li><li><p>提供了生产就绪特征，如：度量指标，运行状况检查和外部化配置</p></li><li><p>绝对没有代码生成，也不需要 XML 配置文件</p><h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3></li><li><p>Create stand-alone Spring applications</p></li><li><p>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)</p></li><li><p>Provide opinionated ‘starter’ dependencies to simplify your build configuration</p></li><li><p>Automatically configure Spring and 3rd party libraries whenever possible</p></li><li><p>Provide production-ready features such as metrics, health checks, and externalized configuration</p></li><li><p>Absolutely no code generation and no requirement for XML configuration</p></li></ul><h3 id="3-Spring-Boot-版本介绍"><a href="#3-Spring-Boot-版本介绍" class="headerlink" title="3 Spring Boot 版本介绍"></a>3 Spring Boot 版本介绍</h3><ul><li>SNAPSHOT：快照版，即开发版。</li><li>CURRENT：最新版，但是不一定是稳定版。</li><li>GA：General Availability，正式发布的版本。</li></ul><p><a href="https://imgchr.com/i/JUkDVe"><img src="https://s1.ax1x.com/2020/04/22/JUkDVe.md.png" alt="JUkDVe.md.png"></a></p><h2 id="二、搭建spring-boot框架项目"><a href="#二、搭建spring-boot框架项目" class="headerlink" title="二、搭建spring boot框架项目"></a>二、搭建spring boot框架项目</h2><h3 id="1-通过官网创建项目"><a href="#1-通过官网创建项目" class="headerlink" title="1 通过官网创建项目"></a>1 通过官网创建项目</h3><blockquote><ul><li><a href="https://start.spring.io/">戳这里</a>进行相关操作</li><li>选择构建Maven Project,填写必要的信息，然后选择Generate Project下载项目。</li><li>将我们下载好的zip解压，导入到IDE中</li></ul></blockquote><h3 id="2-通过idea脚手架工具创建"><a href="#2-通过idea脚手架工具创建" class="headerlink" title="2 通过idea脚手架工具创建"></a>2 通过idea脚手架工具创建</h3><p><a href="https://imgchr.com/i/JUkjqU"><img src="https://s1.ax1x.com/2020/04/22/JUkjqU.md.png" alt="JUkjqU.md.png"></a></p><h3 id="3-先创建maven项目，再导入相关的pom文件"><a href="#3-先创建maven项目，再导入相关的pom文件" class="headerlink" title="3 先创建maven项目，再导入相关的pom文件"></a>3 先创建maven项目，再导入相关的pom文件</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>版本.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>java版本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--导入web启动器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--导入test启动器--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--导入springboot的maven插件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、Spring-Boot项目结构介绍"><a href="#三、Spring-Boot项目结构介绍" class="headerlink" title="三、Spring Boot项目结构介绍"></a>三、Spring Boot项目结构介绍</h2><h3 id="1-POM文件："><a href="#1-POM文件：" class="headerlink" title="1.POM文件："></a>1.POM文件：</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>版本号.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Spring Boot 的父级依赖，只有继承它项目才是 Spring Boot 项目。<br>spring-boot-starter-parent 是一个特殊的 starter，它用来提供相的 Maven 默认依赖。使<br>用它之后，常用的包依赖可以省去 version 标签。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>启动器依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>spring-boot-maven-plugin 插件是将 springboot 的应用程序打包成 jar 包的插件。将所有应用启动运行所需要的 jar 包都包含进来，从逻辑上将具备了独立运行的条件。当运行”mvn package”进行打包后，使用”java -jar”命令就可以直接运行。</p><h3 id="2-启动类与启动器区别："><a href="#2-启动类与启动器区别：" class="headerlink" title="2.启动类与启动器区别："></a>2.启动类与启动器区别：</h3><ul><li><p>启动类</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">@SpringBootApplicationpublic class SpringBootDemo3Application &#123;    public static void main(String[] args)&#123;    SpringApplication.run(SpringBootDemo3Application.class,args);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动器</p><p>Spring Boot 将所有的功能场景都抽取出来，做成一个个的 starter(启动器)，只需要在项目里面引入这些 starter 相关场景的所有依赖都会导入进来，要用什么功能就导入什么场景，在 jar 包管理上非常方便，最终实现一站式开发。<br><font color=green>Spring Boot 提供了多达 44 个启动器。</font>详情看这篇<a href="https://blog.csdn.net/qq_42614253/article/details/83592638">文章</a></p></li></ul><h3 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3.配置文件"></a>3.配置文件</h3><p>Spring Boot 提供一个名称为 application 的全局配置文件，支持两种格式 properteis 格式与 yaml(yml) 格式。</p><ul><li><p>Properties 格式<br>配置 Tomcat 监听端口</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8888</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>yaml格式(拓展名可以是yaml也可以是yml)</p><ul><li><p>大小写敏感</p></li><li><p>使用缩进代表层级关系</p></li><li><p>相同的部分只出现一次</p><p>配置 Tomcat 监听端口</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span><span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8888</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>配置文件存放位置</p><ul><li>当前项目根目录中</li><li>当前项目根目录下的一个<code>/config</code> 子目录中</li><li>项目的 resources 即 classpath 根路径中</li><li>项目的 resources 即 classpath 根路径下的<code>/config</code> 目录中</li></ul></li><li><p>配置文件加载顺序</p><ul><li>不同格式的加载顺序(优先级)：<ul><li>当前项目根目录下的一个/config 子目录中(最高)</li><li>当前项目根目录中(其次)</li><li>项目的 resources 即 classpath 根路径下的/config 目录中(一般)</li><li>项目的 resources 即 classpath 根路径中(最后)</li></ul></li></ul></li></ul><h3 id="4-配置文件中的占位符"><a href="#4-配置文件中的占位符" class="headerlink" title="4.配置文件中的占位符${}"></a>4.配置文件中的占位符${}</h3><h4 id="4-1-简介"><a href="#4-1-简介" class="headerlink" title="4.1 简介"></a>4.1 简介</h4><p>语法：<code>$&#123;&#125;</code></p><ul><li><p>占位符作用：</p><ul><li><code>$&#123;&#125;</code>中可以获取框架提供的方法中的值如：random.int 等</li><li>占位符可以获取配置文件中的键的值赋给另一个键作为值</li></ul></li><li><p>生成随机数</p></li></ul><table><thead><tr><th align="center">代码</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">${random.value}</td><td align="center">类似 uuid 的随机数，没有”-“连接</td></tr><tr><td align="center">${random.int}</td><td align="center">随机取整型范围内的一个值</td></tr><tr><td align="center">${random.long}</td><td align="center">随机取长整型范围内的一个值</td></tr><tr><td align="center">${random.long(100,200)}</td><td align="center">随机生成长整型 100-200 范围内的一个值</td></tr><tr><td align="center">${random.uuid}</td><td align="center">生成一个 uuid，有短杠连接</td></tr><tr><td align="center">${random.int(10)}</td><td align="center">随机生成一个 10 以内的数</td></tr><tr><td align="center">${random.int(100,200)}</td><td align="center">随机生成一个 100-200 范围以内的数</td></tr></tbody></table><h4 id="4-2-配置文件注入值"><a href="#4-2-配置文件注入值" class="headerlink" title="4.2 配置文件注入值"></a>4.2 配置文件注入值</h4><p> <strong>配置文件</strong></p><p> <img src="https://s1.ax1x.com/2020/06/26/NsbqGq.png" alt="yml"></p><p> <strong>java实体类</strong><br> <img src="https://s1.ax1x.com/2020/06/26/NsHNjS.png" alt="pojo"></p><p> <strong>java实体类获取配置文件中的值的两种形式</strong></p><ul><li>自动注入application配置文件<ul><li>添加注解<code>@ConfigurationProperties(prefix = &quot;xxx&quot;)</code></li><li>springboot会自动将名字相同的属性注入进去<br>  <img src="https://s1.ax1x.com/2020/06/26/NsLi7Q.png" alt="运行效果图"></li><li><strong>如果配置文件中存在实体类中没有的属性，或者实体类中存在配置文件中没有的属性，都会设置为null</strong></li></ul></li><li>指定要注入的配置文件<ul><li>添加注解<code>@PropertySource(value = &quot;xxx&quot;)</code>，这个注解不会自动注入</li><li>在对应的位置创建上配置文件，写入内容</li><li>在实体类中用<code>@Value()</code>和el表达式获取值<br>  <img src="https://s1.ax1x.com/2020/06/26/NsXmeU.png" alt="运行图"></li></ul></li></ul><h3 id="5-bootstrap-配置文件"><a href="#5-bootstrap-配置文件" class="headerlink" title="5.bootstrap 配置文件"></a>5.bootstrap 配置文件</h3><ul><li>bootstrap 配置文件介绍：<br>Spring Boot 中有两种上下文对象，一种是 bootstrap, 另外一种是 pplication, bootstrap<br>是应用程序的父上下文，也就是说 bootstrap 加载优先于 applicaton。bootstrap 主要用于从<br>额外的资源来加载配置信息，还可以在本地外部配置文件中解密属性。这两个上下文共用一<br>个环境，它是任何 Spring 应用程序的外部属性的来源。bootstrap 里面的属性会优先加载，<br>它们默认也不能被本地相同配置覆盖。</li><li>bootstrap 配置文件特征<ul><li>boostrap 由父 ApplicationContext 加载，比 applicaton 优先加载。</li><li>boostrap 里面的属性不能被覆盖。</li></ul></li><li>bootstrap 与 application 的应用场景<ul><li>application 配置文件主要用于 Spring Boot 项目的自动化配置。</li><li>bootstrap 配置文件有以下几个应用场景。<ul><li>使用 Spring Cloud Config 配置中心时，这时需要在 bootstrap 配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息。</li><li>一些固定的不能被覆盖的属性。</li><li>一些加密/解密的场景。</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Java框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库的范式</title>
      <link href="2020/04/21/shu-ju-ku-de-fan-shi/"/>
      <url>2020/04/21/shu-ju-ku-de-fan-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><h6 id="范式是关系数据库关系模式规范化的标准，从规范化的宽松到严格，分为不同的范式，通常使用的有第一范式。第二范式、第三范式及BC范式。范式是建立在函数依赖基础上的。"><a href="#范式是关系数据库关系模式规范化的标准，从规范化的宽松到严格，分为不同的范式，通常使用的有第一范式。第二范式、第三范式及BC范式。范式是建立在函数依赖基础上的。" class="headerlink" title="范式是关系数据库关系模式规范化的标准，从规范化的宽松到严格，分为不同的范式，通常使用的有第一范式。第二范式、第三范式及BC范式。范式是建立在函数依赖基础上的。"></a>范式是关系数据库关系模式规范化的标准，从规范化的宽松到严格，分为不同的范式，通常使用的有第一范式。第二范式、第三范式及BC范式。范式是建立在函数依赖基础上的。</h6><h1 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h1><p>如果一个表中某一个字段Y的值是由另外一个字段或一组字段X的值来确定的，就称为Y函数依赖于X。</p></blockquote><h1 id="函数依赖-1"><a href="#函数依赖-1" class="headerlink" title="函数依赖"></a>函数依赖</h1><blockquote><p>首先要理清相关的依赖关系</p><p>1.完全函数依赖</p><p>设X,Y是关系R的两个属性集合，X’是X的真子集，存在X→Y，但对每一个X’都有X’!→Y，则称Y完全函数依赖于X。</p><p>例：成绩表（学号，课程号，成绩）关系中，</p><p>完全函数依赖：（学号，课程号）→ 成绩，学号 －\→ 成绩，课程号 －\→ 成绩，所以（学号，课程号）→ 成绩 是完全函数依赖。</p><p>2.部分函数依赖</p><p>设X,Y是关系R的两个属性集合，存在X→Y，若X’是X的真子集，存在X’→Y，则称Y部分函数依赖于X。</p><p>例：学生表（学号，姓名，性别，班级，年龄）关系中，</p><p>部分函数依赖：（学号，姓名）→ 性别，学号 → 性别，所以（学号，姓名）→ 性别 是部分函数依赖。</p><p>3.传递函数依赖</p><p>设X,Y,Z是关系R中互不相同的属性集合，存在X→Y(Y !→X),Y→Z，则称Z传递函数依赖于X。</p><p>例：关系S1（学号，系名，系主任），</p><p>学号 → 系名，系名 → 系主任，并且系名 －\→ 学号，系主任 －\→ 系名，所以学号 → 系主任为传递函数依赖。</p></blockquote><h2 id="范式简介"><a href="#范式简介" class="headerlink" title="范式简介"></a>范式简介</h2><blockquote><p>关系数据库有六种，一、二、三、四、五和BC。满足最低要求的范式是第一范式。在第一范式的基础上进一步满足更多要求的称为第二范式，其余范式以此类推。一般情况的数据库只需满足第三范式即可。</p></blockquote><h2 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h2><blockquote><p>如果关系模式R是第一范式的模式，那么，R的每一个关系r的属性都是原子项，不可分割。</p><p><a href="https://imgchr.com/i/Y8oaPe"><img src="https://s1.ax1x.com/2020/05/11/Y8oaPe.png" alt="img"></a></p><p>1NF是关系模式应具备的最起码的条件，如果数据库设计不能满足第一范式，就不能称为关系型数据库。关系数据库设计研究的关系规范化是在1NF之上进行的。</p></blockquote><h2 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h2><blockquote><p>如果关系模式R是1NF，且每一个非主属性完全依赖于候选建，那么就称R是第二范式。</p><p>第二范式要满足的条件：首先要满足第一范式，其次每一个非主属性要完全函数依赖于候选键，或者是主键。也就是说，每个非主属性是由整个主键函数决定的，而不能有主键的一部分来决定。</p><p>第二范式（2NF）：符合1NF，并且，非主属性完全依赖于码。（一个候选码中的主属性也可能是好几个。如果一个主属性，它不能单独做为一个候选码，那么它也不能确定任何一个非主属性。</p><p>什么样的实例不符合第二范式？</p><p>举一个教务管理系统的例子。</p><p>学生上课指定一个老师，一本教材，一个教室，一个时间，学生去上课，怎么设计数据库？</p><p><a href="https://imgchr.com/i/Y8od8H"><img src="https://s1.ax1x.com/2020/05/11/Y8od8H.png" alt="img"></a></p><p>有如下关系成立：</p><p>（学生，课程）——&gt;教室；</p><p>（学生，课程）——&gt;老师；</p><p>（学生，课程）——&gt;老师职称；</p><p>（学生，课程）——&gt;教材；</p><p>（学生，课程）——&gt;上课时间；</p><p>可以得出（学生，课程）是一个码。</p><p>又：课程——&gt;教材；</p><ul><li>（学生，课程）是一个码，课程却决定了教材，这就叫做不完全依赖，或者说部分依赖。</li></ul><p> 出现了这种情况，就不满足第二范式了。</p><p>解决办法：分解。进行投影分解：</p><p><img src="https://s1.ax1x.com/2020/05/11/Y8ow2d.png" alt="img"></p></blockquote><h2 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h2><blockquote><p>如果关系模式R是2NF，且关系模式R（U,F）中的所有非主属性对任何候选关键字都不存在传递依赖，则称关系R是属于第三范式。</p><p>第三范式（3NF）；符合2NF，并且，消除传递依赖。</p><p>上图中符合2NF ，但存在传递依赖（老师——&gt;老师职称。一个老师一定能确定一个老师职称）。</p><p>解决办法：分解。投影分解：</p><p><img src="https://s1.ax1x.com/2020/05/11/Y8o0xA.png" alt="img"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux基础指令</title>
      <link href="2020/04/19/linux-ji-chu-zhi-ling/"/>
      <url>2020/04/19/linux-ji-chu-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux学习"><a href="#Linux学习" class="headerlink" title="Linux学习"></a>Linux学习</h1><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><ul><li><code>cd</code> 进入路径指令  <code>cd /local/user</code> 表示进入/local/user文件夹中</li><li><code>pwd</code> 显示当前所在的路径</li><li><code>ll</code> 列出该文件下的所有文件信息，包括隐藏的文件</li><li><code>ls -l</code>  只列出显式文件，<code>ls -a</code>查看所有内容包括隐藏文件</li><li><code>clear</code> 清空清屏</li><li><code>touch</code> 创建空白文件，不需要后缀<br><img src="https://s1.ax1x.com/2020/06/19/NuasjP.png" alt="touch创建文件"></li><li><code>cat</code> 查看文件全部内容，<code>cat /local/user/a</code>，表示查看/local/user/下的a文件的所有内容</li><li><code>more</code> 分屏显示文件内容</li><li><code>ctrl+c</code> 强制退出</li><li><code>tab</code> 当你书写一串指令的时候可以用tab自动补全，如果文件中有的话</li><li><code>head</code> 显示文件的前多少行，默认10行,如果不够10行会用回车补充，通过<code>head -number 文件名</code>控制<br><img src="https://s1.ax1x.com/2020/06/19/NuwXlR.png" alt="NuwXlR.png"></li><li><code>tail</code> 显示文件末尾多少行，默认10行，格式同上</li><li><code>mkdir</code> 创建目录，格式为<code>mkdir [路径] 目录名</code><ul><li>创建多级目录需要指令 -p<br><img src="https://s1.ax1x.com/2020/06/19/Nu07ut.png" alt="Nu07ut.png"></li></ul></li><li><code>cp</code> 复制<ul><li>复制文件<ul><li><code>cp 文件名 新文件名</code></li><li><code>cp 目录名/文件名 文件名/[新文件名]</code></li></ul></li><li>复制目录<ul><li><code>cp -r 目录名 新目录名</code></li></ul></li></ul></li><li><code>rm</code> 删除<ul><li><code>rm [目录名] 文件名</code> 删除文件</li><li><code>rm -r [目录名]</code> 删除目录</li><li>另外，-f是强制删除的意思，有时候会用到 <code>rm -r -f [目录名]</code></li></ul></li><li><code>mv</code> 移动(剪切)，<code>mv 文件名 新路径</code></li><li><code>vi/vim</code> 两者都是编辑文件，vim是字母高亮。进入文件以后的操作<ul><li><code>a</code> 追加方式进入编辑模式</li><li><code>i</code> 在光标所在位置处插入</li><li><code>o</code> 在下一行进入编辑模式</li><li><code>O</code> 在上一行进入编辑模式</li><li><code>dd</code> 删除当前行</li><li><code>:wq</code> 保存并退出</li><li><code>:q!</code> 强制退出</li><li><code>set nu</code> 设置行号</li><li><code>/keywords</code> 搜索关键字</li><li><code>G</code> 让光标移动到文件末尾</li><li><code>gg</code> 返回文件顶部</li></ul></li><li><code>reboot</code> 重启Linux系统</li><li><code>halt</code> 关闭正在运行的Linux操作系统</li><li><code>yum install xxx</code> 常用的下载资源指令<h2 id="Linux时区设置"><a href="#Linux时区设置" class="headerlink" title="Linux时区设置"></a>Linux时区设置</h2></li><li><code>date</code> 查看系统时间</li><li><code>tzselect</code> 可以选择时区，国内一般选择shanghai</li><li>最后把获取到的时区信息添加到配置文件中</li></ul><h2 id="Linux开启网络"><a href="#Linux开启网络" class="headerlink" title="Linux开启网络"></a>Linux开启网络</h2><p>很多centos系统都是默认开启网络的，但有时候抽风会出现无法上网的情况，我们就需要<strong>启动ens32/33网络配置</strong> ，<code>nmcli up ens32/33</code>，具体数值看版本,centos8是33</p><h2 id="虚拟机设置网络类型"><a href="#虚拟机设置网络类型" class="headerlink" title="虚拟机设置网络类型"></a>虚拟机设置网络类型</h2><ul><li>NAT模式<ul><li>优点：省IP资源</li><li>缺点：网段不同，局域网内其他设备无法访问虚拟机中的操作系统</li></ul></li><li>桥连模式<ul><li>将虚拟机的虚拟网络适配器与主机的物理网络适配器进行交接，虚拟机中的虚拟网络适配器可通过主机中的物理网络适配器直接访问到外部网络</li></ul></li></ul><h2 id="快照和克隆概念"><a href="#快照和克隆概念" class="headerlink" title="快照和克隆概念"></a>快照和克隆概念</h2><ul><li>快照<ul><li>用于恢复系统到快照状态</li></ul></li><li>克隆<ul><li>又装了一个跟他一样的虚拟机<h2 id="文件上传与下载"><a href="#文件上传与下载" class="headerlink" title="文件上传与下载"></a>文件上传与下载</h2><h3 id="lrzsz的使用"><a href="#lrzsz的使用" class="headerlink" title="lrzsz的使用"></a>lrzsz的使用</h3></li></ul></li><li><code>yum install lrzsz</code> 执行指令下载lrzsz</li><li><code>rz</code> 弹出一个文件选择窗口，从本地选择文件上传到服务器</li><li><code>sz</code> 将选定的文件发送到本地机器，语句：<code>sz xxx</code><h3 id="xftp的使用"><a href="#xftp的使用" class="headerlink" title="xftp的使用"></a>xftp的使用</h3></li><li>下载xftp的软件<br><img src="https://s1.ax1x.com/2020/06/19/NKkD7F.jpg" alt="NKkD7F.jpg"></li><li>新建连接，输入虚拟机地址，用户，密码，连接成功</li><li>左边是本地，右边是Linux，然后就能上传下载文件了</li></ul><h2 id="文件压缩与解压"><a href="#文件压缩与解压" class="headerlink" title="文件压缩与解压"></a>文件压缩与解压</h2><ul><li>*tar.gz格式<ul><li><code>tar -czvf 文件名称.tar.gz [目录名称]</code> 创建压缩文件</li><li><code>tar -zxvf 文件名称</code> 解压文件</li></ul></li><li>*.zip格式<ul><li><code>zip 文件.zip</code> 压缩文件</li><li><code>unzip 文件.zip -d 指定目录</code> 解压文件<h3 id="解压命令细节"><a href="#解压命令细节" class="headerlink" title="解压命令细节"></a>解压命令细节</h3></li></ul></li><li>-c: 建立压缩档案</li><li>-x：解压</li><li>-t：查看内容</li><li>-v：显示所有过程</li><li>-f：使用文件名</li><li>-z: 是否同时具有gz属性</li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人简历模板</title>
      <link href="2020/04/18/ge-ren-jian-li-mo-ban/"/>
      <url>2020/04/18/ge-ren-jian-li-mo-ban/</url>
      
        <content type="html"><![CDATA[<blockquote><h1 id="个人简历"><a href="#个人简历" class="headerlink" title="个人简历"></a>个人简历</h1></blockquote><h2 id="一、个人信息"><a href="#一、个人信息" class="headerlink" title="一、个人信息"></a>一、个人信息</h2><blockquote><ul><li>姓名：</li><li>性别：</li><li>籍贯：</li><li>学校：</li><li>专业：</li><li>学历：</li><li>英语等级：</li><li>邮箱：</li><li>手机号：</li></ul></blockquote><h2 id="二、教育背景"><a href="#二、教育背景" class="headerlink" title="二、教育背景"></a>二、教育背景</h2><blockquote><ul><li>xxxx.xx~xxxx.xx </li></ul></blockquote><h2 id="三、专业技能"><a href="#三、专业技能" class="headerlink" title="三、专业技能"></a>三、专业技能</h2><blockquote><ol><li>熟悉Java语言、C、C++语言</li><li>熟悉SQL、MySQL、SQL Server</li><li>xxxxxx</li></ol></blockquote><h2 id="四、项目经验"><a href="#四、项目经验" class="headerlink" title="四、项目经验"></a>四、项目经验</h2><blockquote><blockquote><p>建议写3个左右的项目，最好是有实际用户，模拟项目面试官兴趣不大</p></blockquote><ul><li>项目名称：xxx</li><li>开发环境：Windows、</li><li>开发工具：</li><li>编码规范：</li><li>代码质量：Alibaba Code Guidelines、PMD、Sonar</li><li>项目描述：</li><li>个人职责：（做了什么，怎么做的，代码实现流程）</li></ul></blockquote><h2 id="五、大学经历"><a href="#五、大学经历" class="headerlink" title="五、大学经历"></a>五、大学经历</h2><blockquote><ul><li>获得互联网+大赛 xxx</li><li>获得国家软著登记一项</li><li>参加xxxx（与工作有关）</li></ul></blockquote><h2 id="六、自我评价"><a href="#六、自我评价" class="headerlink" title="六、自我评价"></a>六、自我评价</h2><blockquote><p>1、有良好的沟通能力、团队合作精神<br>2、xxxxxxx</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 简历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven学习及私服配置</title>
      <link href="2020/04/18/maven-xue-xi-ji-si-fu-pei-zhi/"/>
      <url>2020/04/18/maven-xue-xi-ji-si-fu-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven学习"><a href="#Maven学习" class="headerlink" title="Maven学习"></a>Maven学习</h1><blockquote></blockquote><h2 id="一、Maven常用命令"><a href="#一、Maven常用命令" class="headerlink" title="一、Maven常用命令"></a>一、Maven常用命令</h2><h3 id="Clean"><a href="#Clean" class="headerlink" title="Clean"></a><code>Clean</code></h3><blockquote><p>清除已编译信息。<br>删除工程中的 target 目录。</p></blockquote><h3 id="validate"><a href="#validate" class="headerlink" title="validate"></a><code>validate</code></h3><blockquote><p>验证项目是否正确</p></blockquote><h3 id="complie"><a href="#complie" class="headerlink" title="complie"></a><code>complie</code></h3><blockquote><p>只编译。 javac 命令</p></blockquote><h3 id="test"><a href="#test" class="headerlink" title="test"></a><code>test</code></h3><blockquote><p>用于执行项目的测试，如果test目录下含有测试代码，那么maven在执行install的时候会先去执行test命令，把test目录下所有的测试代码走一遍。如果有测试代码执行失败，install终止</p></blockquote><h3 id="package"><a href="#package" class="headerlink" title="package"></a><code>package</code></h3><blockquote><p>打包。 包含编译，打包两个功能</p></blockquote><h3 id="verify"><a href="#verify" class="headerlink" title="verify"></a><code>verify</code></h3><blockquote><p>运行任何检查，验证jar包是否有效并且达到质量标准</p></blockquote><h3 id="install"><a href="#install" class="headerlink" title="install"></a><code>install</code></h3><blockquote><p>本地安装， 包含编译，打包，安装到本地仓库<br>编译 - javac<br>打包 - jar， 将 java 代码打包为 jar 文件<br>安装到本地仓库 - 将打包的 jar 文件，保存到本地仓库目录中。</p></blockquote><h3 id="site"><a href="#site" class="headerlink" title="site"></a><code>site</code></h3><blockquote><p>项目站点文件创建的处理，该命令需要配置插件</p></blockquote><h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a><code>deploy</code></h3><blockquote><p>部署。 常见于结合私服使用的命令。<br>相当于是 install+上传 jar 到私服。<br>包含编译，打包，安装到本地仓库，上传到私服仓库。</p></blockquote><h2 id="二、Maven私服"><a href="#二、Maven私服" class="headerlink" title="二、Maven私服"></a>二、Maven私服</h2><ol><li>私服是一种特殊的远程仓库，它是架设在局域网的仓库服务，私服代理广域网上的远程仓库，供局域网使用。其好处有：</li></ol><ul><li><font color=red>节省资金、外网带宽</font><br>利用私服代理外部仓库之后，对外的重复构件下载便得以简化，降低外网带宽压力。</li><li><font color=red>加速 Maven 构建</font><br>不停地连接请求外部仓库是相当耗时的，但是 maven 的一些内部机制（如快照更新检查）要求Maven 在执行构建的时候不停地检查远程仓库数据。因此，当项目配置了很多外部远程仓库的时候，构建速度会降低。使用私服解决这问题，因为 Maven 只需要检查局域网内私服的数据时，构建速度便有明显提高。</li><li><font color=red>部署第三方构件</font><br>当某个构件无法从任何一个远程仓库获取怎么办？比如 Oracle 的 JDBC 驱动由于版权原因不能发布到公共仓库中。建立私服后，便可以将这些构件部署到这个内部仓库中，供内部 Maven 项目使用。</li><li><font color=red>提高稳定性，增强控制</font><br>对于远程仓库来说，当外网不可用时，Maven 构建有可能因为依赖没有下载而不可行，搭建并应用私服后，即使没有外网，如果该构件之前被其它人下载过就会存在私服上，此时再次依赖该构件就可以不用连接外网直接就可以从私服上下载到。同时私服软件（nexus)还提供了额外的管理功能。</li><li><font color=red>降低中央仓库的负荷</font><br>中央仓库是有限的。如果所有的 Maven 工程开发过程中，都通过中央仓库实现构件的依赖和管理，那么中央仓库的负荷过高，也会严重影响工程构建的效率。如果使用私服，可以分散中央仓库的负荷，只有在私服中没有需要依赖的构件时才会去连接中央仓库。</li></ul><h2 id="三、Nexus搭建私服"><a href="#三、Nexus搭建私服" class="headerlink" title="三、Nexus搭建私服"></a>三、Nexus搭建私服</h2><h3 id="1-搭建环境：CentOS7-6，JDK1-8"><a href="#1-搭建环境：CentOS7-6，JDK1-8" class="headerlink" title="1. 搭建环境：CentOS7.6，JDK1.8"></a>1. 搭建环境：CentOS7.6，JDK1.8</h3><h3 id="2-搭建步骤："><a href="#2-搭建步骤：" class="headerlink" title="2. 搭建步骤："></a>2. 搭建步骤：</h3><h4 id="2-1-安装JDK"><a href="#2-1-安装JDK" class="headerlink" title="2.1 安装JDK"></a>2.1 安装JDK</h4><h5 id="2-1-1-JDK-资源包下载"><a href="#2-1-1-JDK-资源包下载" class="headerlink" title="2.1.1 JDK 资源包下载"></a>2.1.1 JDK 资源包下载</h5><blockquote><p>JDK 官方下载地址为：<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p></blockquote><h5 id="2-1-2-JDK-资源包解压"><a href="#2-1-2-JDK-资源包解压" class="headerlink" title="2.1.2 JDK 资源包解压"></a>2.1.2 JDK 资源包解压</h5><blockquote><p>在 Linux 中安装应用的常用目录为：/opt 或/usr/local 目录。本课件将 JDK 安装到<code>/usr/local/java</code>目录中。解压 JDK 到指定目录：<code>tar -zxvf jdk-7u80-linux-x64.tar.gz -C /usr/local</code>重命名 JDK 目录：<code>mv /usr/local/jdk1.7.0_80 /usr/local/java</code></p></blockquote><h5 id="2-1-3-环境变量配置"><a href="#2-1-3-环境变量配置" class="headerlink" title="2.1.3 环境变量配置"></a>2.1.3 环境变量配置</h5><blockquote><p>修改<code>/etc/profile </code>配置文件，增加环境变量配置。</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;javaexport CLASSPATH&#x3D;.:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jarexport PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>环境变量修改后，可以重启 Linux 实现永久生效；或执行 source /etc/profile 命令，让新修改的环境变量在当前终端中生效。</p></blockquote><h4 id="2-2-安装私服-Nexus"><a href="#2-2-安装私服-Nexus" class="headerlink" title="2.2 安装私服 Nexus"></a>2.2 安装私服 Nexus</h4><h5 id="2-2-1-Nexus-资源包下载"><a href="#2-2-1-Nexus-资源包下载" class="headerlink" title="2.2.1 Nexus 资源包下载"></a>2.2.1 Nexus 资源包下载</h5><blockquote><p>Nexus 官方下载地址为：<a href="https://www.sonatype.com/nexus-repository-oss">https://www.sonatype.com/nexus-repository-oss</a></p></blockquote><h5 id="2-2-2-Nexus-资源包解压"><a href="#2-2-2-Nexus-资源包解压" class="headerlink" title="2.2.2 Nexus 资源包解压"></a>2.2.2 Nexus 资源包解压</h5><blockquote><p>在/usr/local 目录中创建子目录 nexus：<code>mkdir /usr/local/nexus</code>解压 Nexus 到指定目录：<code>tar -zxvf nexus-2.11.2-03-bundle.tar.gz -C /usr/local/nexus</code>Nexus 压缩包中包含两个子目录: <code>nexus-2.11.2-03</code> 和 <code>sonatype-work</code>nexus-2.11.2-03 是具体的私服应用内容，<code>sonatype-work</code> 是 Nexus 私服下载的构件存放工<br>作目录。</p></blockquote><h5 id="2-2-3-检查私服端口和工作目录"><a href="#2-2-3-检查私服端口和工作目录" class="headerlink" title="2.2.3 检查私服端口和工作目录"></a>2.2.3 检查私服端口和工作目录</h5><blockquote><p>在 nexus-2.11.2-03 目录中有子目录 <code>conf</code>，其中保存私服应用的配置信息。查看<code>nexus.properties</code> 文件，确定私服访问端口和工作目录。此操作可不做任何内容修改。配置文件内容如下：</p><pre class="line-numbers language-none"><code class="language-none"># Jetty section，Nexus 私服应用是使用 Jetty 提供 web 服务的，下述内容为 Jetty 配置。application-port&#x3D;8081 # 私服访问端口application-host&#x3D;0.0.0.0nexus-webapp&#x3D;$&#123;bundleBasedir&#125;&#x2F;nexus # Nexus 私服 WEB 应用所在位置nexus-webapp-context-path&#x3D;&#x2F;nexus # Nexus 私服 WEB 应用 contextPath#Nexus section Nexus 私服配置信息nexus-work&#x3D;$&#123;bundleBasedir&#125;&#x2F;..&#x2F;sonatype-work&#x2F;nexus # 私服工作目录，即构件保存目录runtime&#x3D;$&#123;bundleBasedir&#125;&#x2F;nexus&#x2F;WEB-INF # 私服 WEB 应用运行目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-2-4-修改-Nexus-运行用户"><a href="#2-2-4-修改-Nexus-运行用户" class="headerlink" title="2.2.4 修改 Nexus 运行用户"></a>2.2.4 修改 Nexus 运行用户</h4><blockquote><p>Nexus 私服在启动后，私服应用需要访问 Linux 的文件系统，所以需要有足够的权限。Nexus 的启动脚本文件中，可以指定私服应用的访问用户，此信息在 <code>nexus-2.11.2-03/bin/nexus</code>脚本文件中定义。需要修改的信息如下：</p><pre class="line-numbers language-none"><code class="language-none"># NOTE - This will set the user which is used to run the Wrapper as well as# the JVM and is not useful in situations where a privileged resource or# port needs to be allocated prior to the user being changed#RUN_AS_USER&#x3D; #原内容RUN_AS_USER&#x3D;root #修改后的内容，代表 Nexus 私服使用 root 用户权限。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-2-5-修改防火墙，开放-Nexus-私服端口访问"><a href="#2-2-5-修改防火墙，开放-Nexus-私服端口访问" class="headerlink" title="2.2.5 修改防火墙，开放 Nexus 私服端口访问"></a>2.2.5 修改防火墙，开放 Nexus 私服端口访问</h4><blockquote><p>修改防火墙配置文件，开放 Nexus 私服的访问端口 8081，通过<code>vi /etc/sysconfig/iptables</code>，在其中加入<code>-A INPUT -m state --state NEW -m tcp -p tcp --dport 8081 -j ACCEPT</code>，最后重新启动防火墙：<code>service iptables restart</code></p></blockquote><h4 id="2-2-6-启动并测试访问"><a href="#2-2-6-启动并测试访问" class="headerlink" title="2.2.6 启动并测试访问"></a>2.2.6 启动并测试访问</h4><blockquote><p>启动 Nexus 私服：<br><code>/usr/local/nexus/nexus-2.11.2-03/bin/nexus start</code><br>可通过命令检查私服运行状态：<br><code>/usr/local/nexus/nexus-2.11.2-03/bin/nexus status</code><br>也可使用浏览器访问 Nexus 私服 WEB 应用， 访问地址为：<br><code>http://ip:8081/nexus （ip 为 Nexus 所在系统的访问 IP）</code></p></blockquote><h3 id="3-私服登录"><a href="#3-私服登录" class="headerlink" title="3. 私服登录"></a>3. 私服登录</h3><blockquote><p>Nexus 默认提供管理用户，用户名为 <code>admin</code>，密码为<code>admin123</code>。 </p></blockquote><h3 id="4-仓库管理"><a href="#4-仓库管理" class="headerlink" title="4. 仓库管理"></a>4. 仓库管理</h3><blockquote><p>常用仓库类型为：hosted 和 proxy</p></blockquote><h4 id="4-1-group"><a href="#4-1-group" class="headerlink" title="4.1 group"></a>4.1 group</h4><blockquote><p>仓库组：Nexus 通过仓库组来统一管理多个仓库，这样访问仓库组就相当于访问仓库组管理的多个仓库。</p></blockquote><h4 id="4-2-hosted"><a href="#4-2-hosted" class="headerlink" title="4.2 hosted"></a>4.2 hosted</h4><blockquote><p>宿主仓库：主要用于发布内部项目构件或第三方的项目构件（如购买商业的构件）以及无法从公共仓库获取的构件（如 oracle 的 JDBC 驱动）。</p></blockquote><h4 id="4-3-releases"><a href="#4-3-releases" class="headerlink" title="4.3 releases"></a>4.3 releases</h4><blockquote><p>发布内部的 releases 模块的仓库，所有非快照版本工程都发布到此仓库中。</p></blockquote><h4 id="4-4-snapshots"><a href="#4-4-snapshots" class="headerlink" title="4.4 snapshots"></a>4.4 snapshots</h4><blockquote><p>发布内部的快照模块的仓库，所有工程版本以 SNAPSHOT 结尾的都发布到此仓库中。</p></blockquote><h4 id="4-5-3rd-party"><a href="#4-5-3rd-party" class="headerlink" title="4.5 3rd party"></a>4.5 3rd party</h4><blockquote><p>第三方依赖的仓库，这个数据通常是由内部人员自行下载之后发布上去</p></blockquote><h4 id="4-6-proxy"><a href="#4-6-proxy" class="headerlink" title="4.6 proxy"></a>4.6 proxy</h4><blockquote><p>代理仓库：代理公共的远程仓库。</p></blockquote><h4 id="4-7-virtual"><a href="#4-7-virtual" class="headerlink" title="4.7 virtual"></a>4.7 virtual</h4><blockquote><p>虚拟仓库：用于适配 Maven 1</p></blockquote><h3 id="5-代理仓库配置"><a href="#5-代理仓库配置" class="headerlink" title="5.代理仓库配置"></a>5.代理仓库配置</h3><blockquote><p><a href="https://repo1.maven.org/maven2/">Maven的远程中央仓库</a>所有的maven都是从这里下载东西的。<br><a href="http://maven.aliyun.com/nexus/content/groups/public/">阿里云的镜像maven中央仓库</a>，配置地址改成这个能下载更快。</p></blockquote><h4 id="5-1-修改settings-xml文件"><a href="#5-1-修改settings-xml文件" class="headerlink" title="5.1 修改settings.xml文件"></a>5.1 修改settings.xml文件</h4><blockquote></blockquote><h3 id="6-在servers节点中添加仓库的用户认证"><a href="#6-在servers节点中添加仓库的用户认证" class="headerlink" title="6.在servers节点中添加仓库的用户认证"></a>6.在servers节点中添加仓库的用户认证</h3><blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- server 的 id 必须和 pom.xml 文件中的仓库 id 一致 --></span><span class="token comment">&lt;!--这是 server 的 id（注意不是用户登陆的 id），该 id 与 distributionManagement 中repository 元素的 id 相匹配。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus-releases<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>deployment<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>deployment123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus-snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>deployment<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>deployment123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="7-配置profile和插件"><a href="#7-配置profile和插件" class="headerlink" title="7.配置profile和插件"></a>7.配置profile和插件</h3><blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--根据环境参数来调整构建配置的列表。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>jdk-1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>sxt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">></span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 私有库配置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 私有库 id --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 私有库地址 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://192.168.120.158:8081/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 私有库是否支持 releases 版本 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 私有库是否支持 snapshots 版本 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepositories</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 插件库配置，具体含义私有库配置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepository</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://192.168.120.158:8081/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepository</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepositories</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="8-激活profile"><a href="#8-激活profile" class="headerlink" title="8.激活profile"></a>8.激活profile</h3><blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 激活 profile --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfiles</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 根据 profile 的 id 标签值激活指定的内容 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfile</span><span class="token punctuation">></span></span>sxt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfiles</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="9-删除原本的阿里镜像（如果一开始没有配置就不用了）"><a href="#9-删除原本的阿里镜像（如果一开始没有配置就不用了）" class="headerlink" title="9.删除原本的阿里镜像（如果一开始没有配置就不用了）"></a>9.删除原本的阿里镜像（如果一开始没有配置就不用了）</h3><h2 id="四、maven项目结构"><a href="#四、maven项目结构" class="headerlink" title="四、maven项目结构"></a>四、maven项目结构</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><ul><li><font color = red>src</font><ul><li><font color = blue>main</font><ul><li><font color = green>java</font> 这个目录下储存 java 源代码</li><li><font color = green>resources</font> 储存主要的资源文件</li></ul></li><li><font color = blue>test</font><ul><li><font color = green>java</font> 存放测试代码</li></ul></li></ul></li><li><font color = red>pom.xml</font> 是 Maven 的基础配置文件，也是 Maven 项目核心配置文件，用于配置项目的基本信息，项目的继承关系，项目类型，依赖管理，依赖注入，插件管理，插件注入等等</li><li><font color = red>target</font> 编译后内容放置的地方</li></ul><h3 id="POM模型"><a href="#POM模型" class="headerlink" title="POM模型"></a>POM模型</h3><p><img src="https://s1.ax1x.com/2020/06/19/NK1Jbj.png" alt="NK1Jbj.png"></p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul><li>内置插件</li><li>拓展插件</li></ul>]]></content>
      
      
      <categories>
          
          <category> Maven仓库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Java高级技术 </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git指令整理</title>
      <link href="2020/03/10/git-zhi-ling-zheng-li/"/>
      <url>2020/03/10/git-zhi-ling-zheng-li/</url>
      
        <content type="html"><![CDATA[<blockquote><p>随便整理的一些自用的Git指令</p></blockquote><h1 id="GitHub创建仓库提示代码"><a href="#GitHub创建仓库提示代码" class="headerlink" title="GitHub创建仓库提示代码"></a>GitHub创建仓库提示代码</h1><pre><code>echo &quot;# 项目名&quot; &gt;&gt; README.mdgit initgit add README.mdgit commit -m &quot;first commit&quot;git remote add origin git@github.com:qiubaiying/项目名.gitgit push -u origin master</code></pre><p>若仓库存在直接push</p><pre><code>git remote add origin git@github.com:qiubaiying/test.gitgit push -u origin master</code></pre><h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><h4 id="创建仓库（初始化）"><a href="#创建仓库（初始化）" class="headerlink" title="创建仓库（初始化）"></a>创建仓库（初始化）</h4><pre><code>在当前指定目录下创建git init新建一个仓库目录git init [project-name]克隆一个远程项目git clone [url]</code></pre><h4 id="添加文件到缓存区"><a href="#添加文件到缓存区" class="headerlink" title="添加文件到缓存区"></a>添加文件到缓存区</h4><pre><code>添加所有变化的文件git add .添加名称指定文件git add text.txt</code></pre><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><pre><code>设置提交代码时的用户信息git config [--global] user.name &quot;[name]&quot;git config [--global] user.email &quot;[email address]&quot;</code></pre><p>​    </p><h4 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h4><pre><code>提交暂存区到仓库区git commit -m &quot;msg&quot;# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ...</code></pre><h4 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h4><pre><code># 下载远程仓库的所有变动$ git fetch [remote]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force# 推送所有分支到远程仓库$ git push [remote] --all</code></pre><p>​    </p><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><pre><code># 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch]</code></pre><h4 id="标签Tags"><a href="#标签Tags" class="headerlink" title="标签Tags"></a>标签Tags</h4><pre><code>添加标签 在当前commitgit tag -a v1.0 -m &#39;xxx&#39; 添加标签 在指定commitgit tag v1.0 [commit]查看git tag删除git tag -d V1.0删除远程taggit push origin :refs/tags/[tagName]推送git push origin --tags拉取git fetch origin tag V1.0新建一个分支，指向某个taggit checkout -b [branch] [tag]</code></pre><h4 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h4><pre><code># 显示有变更的文件$ git status# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog</code></pre><h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><pre><code># 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]# 暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop</code></pre><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><pre><code># 生成一个可供发布的压缩包$ git archives</code></pre>]]></content>
      
      
      <categories>
          
          <category> 终端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 终端 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
